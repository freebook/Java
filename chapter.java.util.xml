<?xml version="1.0" encoding="UTF-8"?>
	&section.java.util.data.xml;
	&section.java.util.regex.xml;
	&section.java.util.concurrent.xml;
	&section.java.util.stream.xml;
	&section.java.util.function.xml;
<chapter id="index"><?dbhtml dir="util" ?>
	<title>Util</title>
	
	&section.java.util.Properties.xml;
	<section id="java.util.logging">
		<title>Logging</title>
		<programlisting>
		<![CDATA[
import java.util.logging.*;
public class Main {
	public static void main(String[] args) {
		Logger log = Logger.getLogger("test"); 
        log.setLevel(Level.INFO); 
        log.info("--------------------------");
        log.info("Test");
        log.info("--------------------------");
        
	}
}
		]]>
		</programlisting>
		<para>XML</para>
		<programlisting>
		<![CDATA[
import java.io.IOException;
import java.util.logging.*;

public class Main {
	public static void main(String[] args) {

		try {
			Logger log = Logger.getLogger("test");
			FileHandler fileHandler = new FileHandler("test.%g.log");
			fileHandler.setLevel(Level.INFO);
			log.addHandler(fileHandler);
			
			log.setLevel(Level.INFO);
			log.info("One");
			log.info("Two");
			log.info("Three");
			
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}		
		]]>
		</programlisting>
		<para>XML 输出结果</para>
		<programlisting>
		<![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log SYSTEM "logger.dtd">
<log>
<record>
  <date>2016-04-19T15:57:19</date>
  <millis>1461052639360</millis>
  <sequence>0</sequence>
  <logger>test</logger>
  <level>INFO</level>
  <class>Main</class>
  <method>main</method>
  <thread>1</thread>
  <message>One</message>
</record>
<record>
  <date>2016-04-19T15:57:19</date>
  <millis>1461052639394</millis>
  <sequence>1</sequence>
  <logger>test</logger>
  <level>INFO</level>
  <class>Main</class>
  <method>main</method>
  <thread>1</thread>
  <message>Two</message>
</record>
<record>
  <date>2016-04-19T15:57:19</date>
  <millis>1461052639395</millis>
  <sequence>2</sequence>
  <logger>test</logger>
  <level>INFO</level>
  <class>Main</class>
  <method>main</method>
  <thread>1</thread>
  <message>Three</message>
</record>
</log>
		]]>
		</programlisting>
		<para>Formatter 日志格式化</para>
		<programlisting>
		<![CDATA[
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.*;

class LogFormatter extends Formatter {
	@Override
	public String format(LogRecord record) {
		return String.format("%s %s\t%s\n", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date()) , record.getLevel(), record.getMessage());
	}
}

public class Main {
	public static void main(String[] args) {

		try {
			Logger log = Logger.getLogger("test");
			FileHandler fileHandler = new FileHandler("test.%g.log");
			fileHandler.setLevel(Level.INFO);
			log.addHandler(fileHandler);
			fileHandler.setFormatter(new LogFormatter());
			log.setLevel(Level.INFO);
			log.info("One");
			log.info("Two");
			log.info("Three");

		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}		
		]]>
		</programlisting>
		<para>输出样式</para>
		<programlisting>
		<![CDATA[
2016-04-19 16:05:53.324 INFO	One
2016-04-19 16:05:53.352 INFO	Two
2016-04-19 16:05:53.353 INFO	Three		
		]]>
		</programlisting>
		<section>
			<title>console</title>
			<para>控制台日志输入格式定义</para>
			<programlisting>
				ConsoleHandler consoleHandler = new ConsoleHandler();
				consoleHandler.setLevel(Level.OFF);
				logger.addHandler(consoleHandler);
			</programlisting>
			<para>禁止 Console 输出</para>
			<programlisting>
				logger.setUseParentHandlers(false);
			</programlisting>
		</section>
	</section>
	<section id="java.util.Base64">
		<title>BASE64</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Base64Test {
	public static void main(String[] args) {
		final String text = "http://www.netkiller.cn/index.html";

		final String encoded = Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));
		System.out.println(encoded);

		final String decoded = new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);
		System.out.println(decoded);
	}
}
		]]>
		</programlisting>
	</section>
	<section id="java.util.Locale">
		<title>Locale 国际化</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.i18n;

import java.util.Locale;

public class Lang {

	public Lang() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		// create a new locale
		Locale locale = new Locale("ENGLISH", "US");

		// print locale
		System.out.println("Locale:" + locale);

		// print display name for locale - based on inLocale
		System.out.println("Name:" + locale.getDisplayName(new Locale("GERMAN", "GERMANY")));

	}

}
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
Locale locale = new Locale("zh", "CN");
Locale locale = Locale.US;
Locale locale = Locale.getDefault();	// 默认语言	
		]]>
		</programlisting>
	</section>
	<section id="java.util.ResourceBundle">
		<title>ResourceBundle</title>
		<programlisting>
		<![CDATA[
java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("message");

resourceBundle.getString("nickname");	

// 指定语言

Locale  locale = new Locale("zh", "CN");
ResourceBundle res = ResourceBundle.getBundle("message", locale);	
		]]>
		</programlisting>
	</section>
	<section id="Scanner">
		<title>Scanner</title>
		<programlisting>
		<![CDATA[
Scanner in = new Scanner(System.in);
System.out.println("Username:");
String username = in.next();
		]]>
		</programlisting>
	</section>

	<section id="java.util.UUID">
		<title>UUID</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.example.uuid;

import java.util.UUID;

public class UuidTest {

	public UuidTest() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		UUID uuid = UUID.randomUUID();
		String randomUUIDString = uuid.toString();

		System.out.println("Random UUID String = " + randomUUIDString);
		System.out.println("UUID version       = " + uuid.version());
		System.out.println("UUID variant       = " + uuid.variant());
	}

}
		
		]]>
		</programlisting>
	</section>
	<section id="Arrays.equals">
		<title>Arrays.equals 判断两个数组是否相等</title>
		<para>static boolean equals(type[] a, type[] b)</para>
		<programlisting>
		<![CDATA[
Arrays.equals(array1, array2)		
		]]>
		</programlisting>
	</section>
	<section id="java.util.Random">
		<title>Random 随机字符串</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.Random;

public class QueueTest {

	public static void main(String[] args) throws InterruptedException {
		new Random().ints(10, 33, 38).forEach(System.out::println);
	}
}
		
		]]>
		</programlisting>
		<screen>
		<![CDATA[
36
34
34
36
37
35
34
35
34
33
		
		]]>
		</screen>
		<section>
			<title>取 0-n 范围内随机数</title>
			<programlisting>
			<![CDATA[
    private int salt() {
        Random random = new Random();
        return random.nextInt(99999999);
    }			
			]]>
			</programlisting>
		</section>
		<section>
			<title>指定随机数范围</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.test;

import java.util.Random;

public class RandomTest {

	public static int random(int min, int max) {
		var value = new Random().ints(min, (max + 1)).limit(1).findFirst().getAsInt();
		return value;
	}

	public static void main(String[] args) throws InterruptedException {
		System.out.println(random(10, 15));
	}
}
			
			]]>
			</programlisting>
		</section>
	</section>

	<section id="java.util.zip.CRC32">
		<title>CRC32</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.security;

import java.nio.ByteBuffer;
import java.util.zip.CRC32;

public class CRC {

	public static void main(String[] args) {

		final CRC32 crc32 = new CRC32();
		ByteBuffer data = ByteBuffer.wrap("http://www.netkiller.cn".getBytes());
		crc32.update(data);
		System.out.println(crc32.getValue());

	}

}		
		]]>
		</programlisting>
	</section>
	<section id="Timer">
		<title>Timer / TimerTask 实现周期性重复执行</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.Timer;
import java.util.TimerTask;

public class Test {

    public static void main(String[] args) {

        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            int count = 1;

            @Override
            public void run() {
                System.out.println("count: " + count + " time:" + System.currentTimeMillis());
                count++;
                if (count > 10) {
                    timer.cancel();
                    System.out.println("purge value :" + timer.purge());
                }
            }
        }, 1000, 1000);

    }
}
		]]>
		</programlisting>
	</section>
</chapter>