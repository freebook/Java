<?xml version="1.0" encoding="UTF-8"?>
<chapter id="junit5">
	<title>Junit5</title>
	<!-- https://www.ibm.com/developerworks/cn/java/j-junit5/index.html -->
	<para>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</para>
	<section>
		<title>项目初始化</title>
		<section>
			<title>Maven</title>
			<para><ulink url="https://github.com/junit-team/junit5-samples/tree/r5.9.0/junit5-jupiter-starter-maven" /></para>
			<programlisting>
			<![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cn.netkiller</groupId>
	<artifactId>inspection</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>inspection</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>18</maven.compiler.source>
		<maven.compiler.target>${maven.compiler.source}</maven.compiler.target>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>5.9.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M6</version>
			</plugin>
		</plugins>
	</build>

</project>			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="JUnit 5 注解">
		<title>JUnit 5 注解</title>
		<para>JUnit 5 常用注解</para>
		<programlisting>
		<![CDATA[
名称				说明
@Test			表明一个测试方法
@DisplayName	测试类或方法的显示名称
@BeforeEach		表明在单个测试方法运行之前执行的方法
@AfterEach		表明在单个测试方法运行之后执行的方法
@BeforeAll		表明在所有测试方法运行之前执行的方法
@AfterAll		表明在所有测试方法运行之后执行的方法
@Disabled		禁用测试类或方法
@Tag			为测试类或方法添加标签
		]]>
		</programlisting>
		<section id="@Disabled">
			<title>@Disabled</title>
			<programlisting>
			<![CDATA[
	@Test
    @Disabled("这条用例暂时跑不过，忽略!")
    void myFailTest(){
        assertEquals(1,2);
    }			
			]]>
			</programlisting>
		</section>
		<section id="@Tag">
			<title>@Tag</title>
			<para>元注解标签</para>
			<programlisting>
			<![CDATA[
@Target({ ElementType.TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@Tag("remote")
public @interface Remote {
}			
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
@DisplayName("Remote test")
public class RemoteTest {
	@Test
	@Remote
	public void testGetUser() {
		System.out.println("Get user");
	}
}
			]]>
			</programlisting>
		</section>
		<section id="@Nested">
			<title>@Nested</title>
			<programlisting>
			<![CDATA[
package junit5;

import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

@DisplayName("Nested tests for HashMap")
class Junit5NestedTest {

	Map<String, Object> map;

	@Nested

	@DisplayName("when a new")
	class WhenNew {

		@BeforeEach
		void create() {
			map = new HashMap<>();
		}

		@Test

		@DisplayName("is empty")
		void isEmpty() {
			assertTrue(map.isEmpty());
		}

		@Nested

		@DisplayName("after adding a new entry")
		class AfterAdd {

			String key = "key";
			Object value = "value";

			@BeforeEach
			void add() {
				map.put(key, value);
			}

			@Test

			@DisplayName("is not empty")
			void isNotEmpty() {
				assertFalse(map.isEmpty());
			}

			@Test

			@DisplayName("returns value when getting by key")
			void returnValueWhenGettingByKey() {
				assertEquals(value, map.get(key));
			}

			@Nested

			@DisplayName("after removing the entry")
			class AfterRemove {

				@BeforeEach
				void remove() {
					map.remove(key);
				}

				@Test

				@DisplayName("is empty now")
				void isEmpty() {
					assertTrue(map.isEmpty());
				}

				@Test

				@DisplayName("returns null when getting by key")
				void returnNullForKey() {
					assertNull(map.get(key));
				}
			}
		}
	}

}

			]]>
			</programlisting>
		</section>
		<section id="@TestFactory">
			<title>@TestFactory</title>
			<para></para>
			<programlisting>
			<![CDATA[
	@TestFactory
	public Collection<DynamicTest> simpleDynamicTest() {
		return Collections.singleton(dynamicTest("simple dynamic test", () -> assertTrue(2 > 1)));
	}			
			]]>
			</programlisting>
			<para>DynamicTest 提供了一个静态方法 stream 来根据输入生成动态测试</para>
			<programlisting>
			<![CDATA[
	@TestFactory
	public Stream<DynamicTest> streamDynamicTest() {
	 return stream(
	       Stream.of("Hello", "World").iterator(),
	       (word) -> String.format("Test - %s", word),
	       (word) -> assertTrue(word.length() > 4)
	 );
	}
			]]>
			</programlisting>
		</section>
	</section>
	<section id="JUnit 5 断言">
		<title>JUnit 5 断言</title>
		<programlisting>
		<![CDATA[
常用的断言方法
方法				说明
assertEquals	判断两个对象或两个原始类型是否相等
assertNotEquals	判断两个对象或两个原始类型是否不相等
assertSame	判断两个对象引用是否指向同一个对象
assertNotSame	判断两个对象引用是否指向不同的对象
assertTrue	判断给定的布尔值是否为 true
assertFalse	判断给定的布尔值是否为 false
assertNull	判断给定的对象引用是否为 null
assertNotNull	判断给定的对象引用是否不为 null		
		]]>
		</programlisting>
		<section id="assertArrayEquals">
			<title>assertArrayEquals</title>
			<para>assertArrayEquals 方法的示例</para>
			<programlisting>
			<![CDATA[
	@Test
	@DisplayName("array assertion")
	public void array() {
		assertArrayEquals(new int[]{1, 2}, new int[] {1, 2});
	}			
			]]>
			</programlisting>
		</section>
		<section id="assertAll">
			<title>assertAll</title>
			<programlisting>
			<![CDATA[
	@Test
    @DisplayName("运行一组断言")
    public void assertAllCase() {
        assertAll("groupAssert",
                () -> assertEquals(2, 1 + 1),
                () -> assertTrue(1 > 0)
        );
    }
			]]>
			</programlisting>
		</section>
		<section id="assertThrows">
			<para>assertThrows</para>
			<para>通过 assertThrows 或 expectThrows 来判断是否抛出期望的异常类型</para>
			<para>assertThrows 和 expectThrows 方法的示例</para>
			<programlisting>
			<![CDATA[
	@Test
	@DisplayName("throws exception")
	public void exception() {
		assertThrows(ArithmeticException.class, () -> System.out.println(1 / 0));
	}
			]]>
			</programlisting>
		</section>
		<section id="fail">
			<title>fail</title>
			<para>通过 fail 方法直接使得测试失败</para>
			<programlisting>
			<![CDATA[
	@Test
	@DisplayName("fail")
	public void shouldFail() {
		fail("This should fail");
	}			
			]]>
			</programlisting>
		</section>
		<section id="assumptions">
			<title>JUnit 5 前置条件</title>
			<para>前置条件（assumptions）类似于断言，不同之处在于不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的执行终止。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</para>
			<programlisting>
			<![CDATA[
	@DisplayName("Assumptions")
	public class AssumptionsTest {
		private final String environment = "DEV";
	 
		 @Test
		 @DisplayName("simple")
		 public void simpleAssume() {
		    assumeTrue(Objects.equals(this.environment, "DEV"));
		    assumeFalse(() -> Objects.equals(this.environment, "PROD"));
		 }
	 
		 @Test
		 @DisplayName("assume then do")
		 public void assumeThenDo() {
		    assumingThat(
		       Objects.equals(this.environment, "DEV"),
		       () -> System.out.println("In DEV")
		    );
		 }
	}			
			]]>
			</programlisting>
			<para>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</para>
		</section>
	</section>
	<section id="依赖注入">
		<title>依赖注入</title>
		<section id="TestInfo">
			<title>TestInfo</title>
			<programlisting>
			<![CDATA[
	@Test
	@DisplayName("test info")
	public void testInfo(final TestInfo testInfo) {
		System.out.println(testInfo.getDisplayName());
	}			
			]]>
			</programlisting>
		</section>
		<section id="TestReporter">
			<title>TestReporter</title>
			<programlisting>
			<![CDATA[
	@Test
	@DisplayName("test reporter")
	public void testReporter(final TestReporter testReporter) {
		testReporter.publishEntry("name", "Alex");
	}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="junit4">
		<title>Junit4</title>
		<section id="junit4.html.report">
			<title>生成 HTML 报告</title>
			<screen>
			<![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>demo</groupId>
	<artifactId>junit4</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>junit4</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<useSystemClassLoader>false</useSystemClassLoader>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.22.1</version>
			</plugin>
		</plugins>
	</reporting>
</project>

			]]>
			</screen>
			<para>生成报告</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/workspace/junit4 % mvn surefire-report:report-only
			]]>
			</screen>
		</section>
		<section id="junit4.format">
			<title>Junit4 输出格式定义</title>
			<programlisting>
		<![CDATA[
package cn.netkiller.api.test;

import java.util.ArrayList;
import java.util.List;

import org.junit.experimental.categories.Category;
import org.junit.runner.Description;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.runners.model.FrameworkMethod;
import org.junit.runners.model.InitializationError;

public class ApiTestRunner extends BlockJUnit4ClassRunner {

	public ApiTestRunner(Class<?> class) throws InitializationError {
		super(class);
	}

	@Override
	protected Description describeChild(FrameworkMethod method) {
		Api api = method.getAnnotation(Api.class);
		if (api == null) {
			return super.describeChild(method);
		}

		List<String> list = new ArrayList<String>();
		Class<?>[] categorys;

		if (method.getAnnotation(Category.class) != null) {
			categorys = method.getAnnotation(Category.class).value();
		} else {
			categorys = this.getTestClass().getJavaClass().getAnnotation(Category.class).value();
		}

		for (Class<?> category : categorys) {
			if (category.getSimpleName().equals("EnterpriseCategory")) {
				list.add("Enterprise");
			} else if (category.getSimpleName().equals("ProfessionalCategory")) {
				list.add("Professional");
			}
		}

		String tag = "";
		if (list != null) {
			tag = String.join(",", list);
		}
		String name = String.format("%s - %s %s - %s", method.getName(), api.method(), api.uri(), tag);
		return Description.createTestDescription(getTestClass().getJavaClass(), name, method.getAnnotations());
	}
}
		]]>
			</programlisting>
			<programlisting>
		<![CDATA[
package cn.netkiller.api.test;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(value = RetentionPolicy.RUNTIME)
@Target(value = { ElementType.METHOD })
public @interface Api {
    public ApiMethod method() default ApiMethod.GET;

    public String uri() default "/";
}
		]]>
			</programlisting>
			<para></para>
			<programlisting>
		<![CDATA[
public interface ProfessionalCategory {
    String name = "Professional";
}

public interface EnterpriseCategory {
    String name = "Enterprise";
}		
		]]>
			</programlisting>
		</section>
	</section>
</chapter>