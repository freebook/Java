<?xml version="1.0" encoding="UTF-8"?>
<section id="Problem Details">
	<title>Problem Details [RFC 7807]</title>
	<para>HTTP RFC 7807
		规范：https://www.rfc-editor.org/rfc/rfc7807。这个规范里定义了HTTP
		API的“问题细节”（Problem Details）内容。用它来携带HTTP错误返回信息，避免自定义新的错误返回格式。</para>
	<programlisting>
	<![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
Content-Language: en

{
	"status": 403,
	"type": "https://bankname.com/common-problems/low-balance",
	"title": "You not have enough balance",
	"detail": "Your current balance is 30 and you are transterring 50",
	"instance": "/account-transfer-service"
}		
	]]>
	</programlisting>
	<programlisting>
	<![CDATA[
type：		问题的类型；
title：		问题类型描述；
status：	HTTP状态码；
detail：	问题实例描述；
instance：	URI的内容应该用来描述问题实例，但不是必须的。
	]]>
	</programlisting>
	<programlisting>
	<![CDATA[
    @GetMapping("/ProblemDetail/v1/{id}")
    public ResponseEntity config(@PathVariable("id") Long id) {
        if (id < 100) {
            return ResponseEntity.ok(new Member(id, "netkiller"));
        } else {
            ProblemDetail pd = ProblemDetail.forStatusAndDetail(HttpStatus.NOT_FOUND, "Member id '" + id + "' does no exist");
            pd.setType(URI.create("https://www.netkiller.cn/errors/not-found"));
            pd.setTitle("Record Not Found");
            pd.setProperty("hostname", "www.netkiller.cn");
            return ResponseEntity.status(404).body(pd);
        }
    }
	]]>
	</programlisting>
	<programlisting>
	<![CDATA[
    @GetMapping(path = "/ProblemDetail/v2/{id}")
    public ResponseEntity getEmployeeById_V3(@PathVariable("id") Long id) {

        try {
            //somthing threw this exception
            throw new NullPointerException("Something was expected but it was null");
        } catch (NullPointerException npe) {
            ProblemDetail pd = ProblemDetail
                    .forStatusAndDetail(HttpStatus.INTERNAL_SERVER_ERROR,
                            "Null Pointer Exception");
            pd.setType(URI.create("https://www.netkiller.cn/errors/npe"));
            pd.setTitle("Null Pointer Exception");
            pd.setProperty("hostname", "www.netkiller.cn");
            throw new ErrorResponseException(HttpStatus.NOT_FOUND, pd, npe);
        }
    }
	]]>
	</programlisting>

	<section id="ResponseEntity">
		<title>ResponseEntity</title>
		<programlisting>
			<![CDATA[
@PostMapping(path = "/foo", params = {"id", "name=John"})
public ResponseEntity<String> handlePostRequest() {
    // 处理请求
    return ResponseEntity.ok("Success");
}
			]]>
		</programlisting>
		<section>
			<title>status</title>
			<programlisting>
			<![CDATA[
return ResponseEntity
                  .status(HttpStatus.CREATED)
                  .header("Location", locationUri)
                  .body("Employee created successfully. Location: " + locationUri);		
			]]>
			</programlisting>
		</section>
	</section>
</section>
<section id="Jackson">
	<title>Jackson</title>
	<section>
		<title>Jackson 相关配置</title>
		<screen>
		<![CDATA[
#序列化时间格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.mvc.date-format=yyyy-MM-dd HH:mm:ss
#mvc序列化时候时区选择
spring.jackson.time-zone=GMT+8		
		]]>
		</screen>
	</section>
	<section id="@JsonIgnore">
		<title>@JsonIgnore 返回json是不含有该字段</title>
		<programlisting>
			<![CDATA[
	@JsonIgnore
	private String entityName = this.getClass().getSimpleName();	
			]]>
		</programlisting>
	</section>
	<section id="@JsonFormat 日期格式化">
		<title>@JsonFormat 格式化 json 时间格式</title>
		<section>
			<title>日期格式化</title>

			<para>默认 json 中的时间格式是这样的</para>
			<screen>
			<![CDATA[
"createDate":"2018-09-11T07:34:20.106+0000","updateDate":"2018-09-11T07:34:20.106+0000"			
			]]>
			</screen>
			<para>@JsonFormat 可以格式化 json 返回的时间格式。</para>
			<programlisting>
			<![CDATA[
@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")			
			]]>
			</programlisting>
			<para>格式化后</para>
			<programlisting>
			<![CDATA[
"createDate":"2018-09-11 07:42:44","updateDate":"2018-09-11 07:42:44"			
			]]>
			</programlisting>
			<para>解决时区问题，MongoDb 默认使用UTC,显示时间相差8小时</para>
			<programlisting>
			<![CDATA[
@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	
private Date createdDate = new Date();			
			]]>
			</programlisting>
		</section>
		<section>
			<title>时区</title>
			<programlisting>
			<![CDATA[
public class Test {
   @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MMM-dd HH:mm:ss z", timezone="EST")
   @JsonProperty("pubDate")
   private Date recentBookPubDate;	
} 			
			]]>
			</programlisting>
		</section>
		<section>
			<title>枚举</title>
			<programlisting>
			<![CDATA[
public class Test {
   @JsonFormat(shape=JsonFormat.Shape.NUMBER)
   @JsonProperty("birthDate")
   private Date birthDate;
} 
			]]>
			</programlisting>
			<screen>
			<![CDATA[
{
  "birthDate" : 1528702883858
} 			
			]]>
			</screen>
		</section>
		<section>
			<title>枚举</title>
			<programlisting>
			<![CDATA[
package cn.netkiller;
import com.fasterxml.jackson.annotation.JsonFormat;

@JsonFormat(shape=JsonFormat.Shape.NUMBER)
enum Code {
    BLOCKING,
    CRITICAL,
    MEDIUM,
    LOW;
} 

@JsonFormat(shape=JsonFormat.Shape.STRING)
enum Lang {
	Java,
	PHP,
	Python
} 
			]]>
			</programlisting>
		</section>
	</section>
	<section id="@JsonComponent">
		<title>@JsonComponent</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.json;

public class Member {
	private String name;

	public Member() {
		// TODO Auto-generated constructor stub
	}

	public Member(String name) {
		// TODO Auto-generated constructor stub
		this.name = name;

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Member [name=" + name + "]";
	}

}
		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
package cn.netkiller.json;

import java.io.IOException;

import org.springframework.boot.jackson.JsonComponent;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.node.TextNode;

@JsonComponent
public class Json {

	public Json() {
		// TODO Auto-generated constructor stub
	}

	public static class MemberJsonSerializer extends JsonSerializer<Member> {

		@Override
		public void serialize(Member value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
			// TODO Auto-generated method stub
			gen.writeStartObject();
			gen.writeStringField("member", value.toString());
			gen.writeEndObject();

		}
	}

	public static class MemberJsonDeserializer extends JsonDeserializer<Member> {

		@Override
		public Member deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
			// TODO Auto-generated method stub
			TreeNode treeNode = p.getCodec().readTree(p);
			TextNode member = (TextNode) treeNode.get("member");
			return new Member(member.asText());
		}
	}
}		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
package cn.netkiller.json.controller;

import cn.netkiller.json.Member;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 *
 * @author neo
 */
@RestController
public class SimpleController {

	@Autowired
	public ObjectMapper objectMapper;

	@GetMapping("/")
	public String home() throws JsonMappingException, JsonProcessingException {
		String json = "{\"name\":\"netkiller\"}";
		Member member = objectMapper.readValue(json, Member.class);
		System.out.println(member.getName());
		return member.getName();
	}

}
		]]>
		</programlisting>
	</section>
	<section id="ObjectToJson">
		<title>Object to Json</title>
		<programlisting>
		<![CDATA[
ObjectMapper mapper = new ObjectMapper();
User user = new User();

//Object to JSON in file
mapper.writeValue(new File("c:\\user.json"), user);

//Object to JSON in String
String jsonInString = mapper.writeValueAsString(user);

//Convert object to JSON string and pretty print
String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(user);
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
	Notification notification = new Notification(status, time, summary + info);
	ObjectMapper objectMapper = new ObjectMapper();
	String json = objectMapper.writeValueAsString(notification);		
		]]>
		</programlisting>
	</section>
	<section id="JsonToObject">
		<title>Json To Object</title>
		<programlisting>
		<![CDATA[
ObjectMapper mapper = new ObjectMapper();
String jsonInString = "{'name' : 'mkyong'}";

//JSON from file to Object
User user = mapper.readValue(new File("c:\\user.json"), User.class);

//JSON from String to Object
User user = mapper.readValue(jsonInString, User.class);
		]]>
		</programlisting>
	</section>
</section>