<?xml version="1.0" encoding="UTF-8"?>
<chapter id="framework">
<!-- <?dbhtml dir="util" ?> -->
	<title>Spring 框架</title><!-- Miscellaneous -->
	<para>Spring框架为基于Java的现代企业级应用程序提供了全面的编程和配置模型——适用于任何类型的部署平台。</para>
	<para>Spring框架的关键要素是应用程序级别的基础设施支持：Spring专注于企业级应用程序的“管道”，以便团队可以专注于应用程序级别的业务逻辑，而无需与特定的部署环境产生不必要的联系。</para>
	<section id="bean"><!-- <?dbhtml dir="bean" ?> -->
		<title>@Bean</title>
		<programlisting>
	<![CDATA[
package cn.netkiller.config;

import lombok.Data;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Configuration
@Data
public class Config {

    @Bean
    public MyBean myBean() {
        return new MyBean();
    }

    @Bean(initMethod = "init", destroyMethod = "destroy")
    public MyBean myBean2() {
        return new MyBean();
    }

    @Bean({"myBean4", "myBean5"})
    @Scope("prototype")
    public MyBean myBean3() {
        return new MyBean();
    }

    public class MyBean {

        public MyBean() {
            System.out.println("MyBean Initializing");
        }

        public String output() {
            return "Helloworld!!!";
        }

        public void init() {
            System.out.println("Bean 初始化方法被调用");
        }

        public void destroy() {
            System.out.println("Bean 销毁方法被调用");
        }
    }
}

	]]>
		</programlisting>
		<para>查看注入情况</para>
		<screen>
	<![CDATA[
neo@MacBook-Pro-M2 ~/w/watch (main)> curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq | grep -i mybean -A 5
        "myBean2": {
          "aliases": [],
          "scope": "singleton",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": [
            "config"
          ]
        },
--
        "myBean4": {
          "aliases": [
            "myBean5"
          ],
          "scope": "prototype",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": []
        },
        "dbHealthContributor": {
          "aliases": [],
--
        "myBean": {
          "aliases": [],
          "scope": "singleton",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": [
            "config"
          ]
        },	
	]]>
		</screen>
		<section>
			<title>@Scope 定义类型</title>
			<programlisting>
		<![CDATA[
    @Bean({"neo","netkiller"})
    @Scope("prototype")
    public MyBean myBean(){
        return new MyBean();
    }		
		]]>
			</programlisting>
			<screen>
		<![CDATA[
Scope		详解
singleton	默认单例的bean定义信息，对于每个IOC容器来说都是单例对象
prototype	bean对象的定义为任意数量的对象实例
request		bean对象的定义为一次HTTP请求的生命周期，也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅仅在web-aware的上下文中有效
session		bean对象的定义为一次HTTP会话的生命周期。仅仅在web-aware的上下文中有效
application	bean对象的定义范围在ServletContext生命周期内。仅仅在web-aware的上下文中有效
websocket	bean对象的定义为WebSocket的生命周期内。仅仅在web-aware的上下文中有效
		]]>
			</screen>
			<para>singleton和prototype
				一般都用在普通的Java项目中，而request、session、application、websocket都用于web应用中。
			</para>
			<programlisting>
		<![CDATA[
	@Bean
    @Scope(value = "singleton")
    public Person person(){
        return new Person();
    }		
		]]>
			</programlisting>
			<screen>
		<![CDATA[
ConfigurableBeanFactory.SCOPE_PROTOTYPE，即“prototype”
ConfigurableBeanFactory.SCOPE_SINGLETON，即“singleton”
WebApplicationContext.SCOPE_REQUEST，即“request”
WebApplicationContext.SCOPE_SESSION，即“session”
		]]>
			</screen>
		</section>
		<section>
			<title>InitializingBean</title>
			<para>afterPropertiesSet() 在 @Value 完成之后执行</para>
			<programlisting>
		<![CDATA[
package cn.netkiller.services;

import lombok.Data;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@Data
@Slf4j
public class TestService implements InitializingBean {

    private String appId;

    public TestService(@Value("${app.id}") String appId) {
        this.appId = appId;
        log.info(this.appId);
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        log.info(this.appId);
    }
}

		]]>
			</programlisting>
			<programlisting>
		<![CDATA[
		
		]]>
			</programlisting>
		</section>
	</section>
	<section id="UriComponents">
		<title>URL 拼装/解析</title>
		<programlisting>
		<![CDATA[
        UriComponents https = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/article")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();

        log.info(https.toUriString());		
		]]>
		</programlisting>
		<para>URL 解析</para>
		<programlisting>
		<![CDATA[
String httpUrl = "https://www.netkiller.cn:8080/article?id=9527";		
UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(httpUrl).build();

提取协议头
String scheme = uriComponents.getScheme();
// scheme = https
System.out.println("scheme = " + scheme);

获取host操作。
String host = uriComponents.getHost();
// host = felord.cn
System.out.println("host = " + host);

提取 Port 端口。

int port = uriComponents.getPort();
// port = -1
System.out.println("port = " + port);
但是很奇怪的是上面的是 -1,很多人误以为会是80。其实 Http 协议确实是80，但是java.net.URL#getPort()规定，若 URL 的实例未申明（省略）端口号，则返回值为-1。所以当返回了-1就等同于80，但是 URL 中不直接体现它们。

提取 Path 路径
String path = uriComponents.getPath();
// path = /spring-security/{article}
System.out.println("path = " + path);

提取 Query 参数

String query = uriComponents.getQuery();
// query = version=1&timestamp=123123325
System.out.println("query = " + query);
更加合理的提取方式：

MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();
// queryParams = {version=[1], timestamp=[123123325]}
System.out.println("queryParams = " + queryParams);
		]]>
		</programlisting>
		<para>fromPath</para>
		<programlisting>
			<![CDATA[
String endpoint = "/employees";
        
UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromPath(endpoint)
    .queryParam("param1", "value1")
    .queryParam("param2", "value2");

webClient.post()
        .uri(uriBuilder.build().toUri())
        .bodyValue(new Employee(...))
        .retrieve()
        .bodyToMono(Employee.class);
			]]>
		</programlisting>
		
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>
		<para>替换变量</para>
		<programlisting>
		<![CDATA[
        UriComponents uriComponents = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/article/{category}")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();

        UriComponents expand = uriComponents.expand("story");

        log.info(expand.toUriString());
        # https://www.netkiller.cn:8080/article/story?id=9527
        
        UriComponents uriComponents = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/book/{chapter}/{section}")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();
        UriComponents expand = uriComponents.expand(Map.of("chapter", "chapter1", "section", "section2"));

        log.info(expand.toUriString());
        # https://www.netkiller.cn:8080/book/chapter1/section2?id=9527        
		]]>
		</programlisting>
		<para>fragment</para>
		<programlisting>
		<![CDATA[
import org.springframework.web.util.UriComponentsBuilder;

public class UriBuilderExample {

    public static void main(String[] args) {
        // Base URI
        String baseUri = "https://www.example.com";

        // 构建 URI
        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUri);

        // 添加路径变量: https://www.example.com/users/{userId}
        builder.path("/users/{userId}");

        // 添加查询参数: https://www.example.com/users/{userId}?name=John&age=30
        builder.queryParam("name", "John")
                .queryParam("age", 30);

        // 添加片段，https://www.example.com/users/{userId}?name=John&age=30#profile
        builder.fragment("profile");

        // 构建最终的 URI，替换 url 中的路径变量：https://www.example.com/users/123?name=John&age=30#profile
        String finalUri = builder.buildAndExpand("123").toUriString();

        System.out.println("Final URI: " + finalUri);
    }
}		
		]]>
		</programlisting>
	</section>
	<section id="ServletUriComponentsBuilder">
		<title>ServletUriComponentsBuilder</title>
		<programlisting>
		<![CDATA[
String locationUri = ServletUriComponentsBuilder
                  .fromCurrentRequest()
                  .path("/{id}")
                  .buildAndExpand(employeeId)
                  .toUriString();		
		]]>
		</programlisting>
	</section>

	<section id="PathPattern">
		<title>URL 路径相关</title>
		<para>过滤路径</para>
		<programlisting>
		<![CDATA[
        PathPattern pattern = new PathPatternParser().parse("/test/**");
        PathContainer pathContainer = exchange.getRequest().getPath().pathWithinApplication();
        if (pattern.matches(pathContainer)) {
            log.info("custom webFilter");
            return chain.filter(exchange);
        }
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
        PathPatternParser pathPatternParser = new PathPatternParser();

        List<String> paths = List.of("/token", "/verifier", "/mock/*");
        List<PathPattern> parsedPatterns = new ArrayList<>();

        for (String path : paths) {
            PathPattern pathPattern = pathPatternParser.parse(path);
            parsedPatterns.add(pathPattern);
        }

        PathContainer pathContainer = exchange.getRequest().getPath().pathWithinApplication();
        for (PathPattern pattern : parsedPatterns) {
            if (pattern.matches(pathContainer)) {
                System.out.println("Path " + pathContainer + " matches pattern " + pattern.getPatternString());
            }
        }

        return chain.filter(exchange);		
		]]>
		</programlisting>
	</section>
</chapter>
