<?xml version="1.0" encoding="UTF-8"?>
<section id="logging">
	<title>Spring boot with Logging</title>
	<section>
		<title>配置日志文件</title>
		<para>一般的日志需求可以通过配置 application.properties实现。</para>
		<para>Spring Boot中 日志默认是输出到控制台的，这样是为了方便开发人员，但是在生产环境中应该输出到日志文件中。</para>
		<itemizedlist>
			<title>配置如下</title>
			<listitem>logging.file.path：指定日志文件的路径	</listitem>
			<listitem>logging.file.name：日志的文件名(默认为spring.log)</listitem>
			<listitem>logging.pattern.console：控制台的输出格式</listitem>
			<listitem>logging.pattern.file：日志文件的输出格式</listitem>
		</itemizedlist>
		<tip>
			<para>注意：这两个属性不能同时配置，只需要配置一个即可。</para>
		</tip>
		<tip>
			<para>旧版本</para>
			<para>logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log</para>
			<para>logging.path，设置目录，如果 logging.file 没有设置，会在该目录下创建spring.log文件作为默认日志文件。</para>
			<screen>
		<![CDATA[
logging.file=target/spring.log
#logging.path=
		]]>
			</screen>
			<para>如果仍不能满足可以使用 logback.xml 配置日志。</para>
			<screen>
		<![CDATA[
logging.path=/tmp
logging.config=classpath:logback.xml
		]]>
			</screen>
		</tip>
		<section>
			<title>日志输出级别</title>
			<screen>
		<![CDATA[
几种常见的日志级别由低到高分为：TRACE < DEBUG < INFO < WARN < ERROR < FATAL
		]]>
			</screen>
			<para>显示所有DEBUG信息</para>
			<screen>
			<![CDATA[
logging.level.root=DEBUG			
			]]>
			</screen>
			<para>仅仅显示 springframework 调试信息</para>
			<screen>
			<![CDATA[
logging.level.org.springframework.web=DEBUG			
			]]>
			</screen>
			<para>仅仅显示 cn.netkiller.web.TestController 调试信息</para>
			<screen>
			<![CDATA[
private static final Logger log = LoggerFactory.getLogger(TestController.class);

log.debug(message);

logging.level.cn.netkiller.web.TestController=DEBUG			
			]]>

			</screen>
		</section>
		<section>
			<title>Spring boot 2.1 以后的版本不打印 Mapped 日志问题</title>
			<screen>
		<![CDATA[
logging.level.org.springframework.web=trace		
		]]>
			</screen>
		</section>
		<section>
			<title>禁止控制台输出日志</title>
			<para>禁止控制台日志输出，同时将日志写入日志文件.</para>
			<para>src/main/resources/application.properties</para>
			<screen>
			<![CDATA[
logging.file.path=/tmp
logging.file.name=/tmp/spring.log
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
			]]>
			</screen>
			<para>src/main/resources/logback.xml</para>
			<screen>
			<![CDATA[
$ cat src/main/resources/logback.xml
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <include resource="org/springframework/boot/logging/logback/defaults.xml" />
  <include resource="org/springframework/boot/logging/logback/file-appender.xml" />

  <root level="INFO">
    <appender-ref ref="FILE" />
  </root>
</configuration>
			]]>
			</screen>
			<para>使用 java -jar project-version-xxx.jar 启动后控制不会再输出日志</para>
		</section>
		<section>
			<title>定制日志格式</title>
			<itemizedlist>
				<title>定制日志格式有两个配置</title>
				<listitem>logging.pattern.console：控制台的输出格式	</listitem>
				<listitem>logging.pattern.file：日志文件的输出格式</listitem>
			</itemizedlist>
			<para>分别是控制台的输出格式和文件中的日志输出格式</para>
			<para>举例</para>
			<screen>
			<![CDATA[
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n			
			]]>
			</screen>
			<para>格式说明</para>
			<screen>
			<![CDATA[
%d{HH:mm:ss.SSS} 日志输出时间
%thread 	输出日志的进程名字，这在Web应用以及异步任务处理中很有用
%-5level 	日志级别，并且使用5个字符靠左对齐
%logger		日志输出者的名字
%msg		日志消息
%n			平台的换行符
			]]>
			</screen>
		</section>
		<section>
			<title>彩色输出</title>
			<programlisting>
			<![CDATA[
spring.main.banner-mode=off 
spring.output.ansi.enabled=ALWAYS
logging.pattern.console=%clr(%d{yy-MM-dd E HH:mm:ss.SSS}){blue} %clr(%-5p) %clr(${PID}){faint} %clr(---){faint} %clr([%8.15t]){cyan} %clr(%-40.40logger{0}){blue} %clr(:){red} %clr(%m){faint}%n			
			]]>
			</programlisting>
		</section>
	</section>

	<section>
		<title>打印日志</title>
		<para>日志的用法，首先开发中我们根据实际的需要打印不同级别的日志。</para>
		<programlisting>
			<![CDATA[
package cn.netkiller.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class TestController {

	private static final Logger log = LoggerFactory.getLogger(TestController.class);

	@RequestMapping("/test/log")
	@ResponseBody
	public String log() {
		String message = "Test";
		log.debug(message);
		log.info(message);
		log.warn(message);
		log.error(message);
		log.trace(message);
		return message;
	}
}
			]]>
		</programlisting>
		<para>然后通过application.properties配置那些需要显示，那些不需要，以及显示的级别是什么。 </para>
		<section>
			<title>lombok</title>
			<screen>
			<![CDATA[
		<dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
@Slf4j
class DemoApplicationTests {
  @Test
  public void test(){
    log.debug("输出DEBUG日志.......");
  }
}			
			]]>
			</programlisting>
		</section>
	</section>

	<section id="springboot.logback">
		<title>logback 配置详解</title>
		<para>配置文件名默认是：logback-spring.xml，使用其他文件名通过下面配置项指定即可。</para>
		<screen>
		<![CDATA[
logging.config=classpath:logback.xml		
		]]>
		</screen>
		<para>基本配置</para>
		<screen>
		<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yy-MMMM-dd HH:mm:ss:SSS} %5p %t %c{2}:%L - %m%n</pattern>
        </encoder>
    </appender>
    <root level="INFO">
        <appender-ref ref="stdout"/>
    </root>
</configuration>		
		]]>
		</screen>
		<section>
			<title>禁止 logback 日志输出</title>
			<screen>
			<![CDATA[
	<statusListener class="ch.qos.logback.core.status.NopStatusListener" />			
			]]>
			</screen>
		</section>
		<section>
			<title>指定Class过滤日志</title>
			<programlisting>
			<![CDATA[
    <logger name="cn.netkiller.controller"/>
    
    <logger name="cn.netkiller.controller.HomeController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>
			]]>
			</programlisting>
		</section>
		<section>
			<title>configuration 属性配置</title>
			<screen>
			<![CDATA[
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。			
			]]>
			</screen>
		</section>
		<section id="logback.contextName">
			<title>contextName 设置上下文名称</title>
			<screen>
			<![CDATA[

每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。设置后可以通过%contextName来打印日志上下文名称。
<contextName>logback</contextName>			
			]]>
			</screen>
		</section>
		<section id="logback.property">
			<title>property 设置变量</title>
			<screen>
			<![CDATA[
用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。

<property name="log.path" value="/tmp" />
			]]>
			</screen>
		</section>
		<section id="logback.encoder">
			<title>encoder 日志格式设置</title>
			<screen>
			<![CDATA[
<encoder>表示对日志进行编码：

%d{HH: mm:ss.SSS}——日志输出时间
%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
%-5level——日志级别，并且使用5个字符靠左对齐
%logger{36}——日志输出者的名字
%msg——日志消息
%n——平台的换行符			
			]]>
			</screen>
		</section>
		<section id="RollingFileAppender">
			<title>RollingFileAppender</title>
			<screen>
			<![CDATA[
上例中<fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中，同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。
<maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。
<totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。	
			]]>
			</screen>
			<section>
				<title>按日期分割日志</title>
				<screen>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback</contextName>
    <property name="log.path" value="target" />
    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/spring.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </root>
</configuration>
			]]>
				</screen>
			</section>
			<section>
				<title>按照文件尺寸分割日志</title>
				<para>按日期分割文件</para>
				<screen>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <include resource="org/springframework/boot/logging/logback/defaults.xml" />
  <include resource="org/springframework/boot/logging/logback/file-appender.xml" />

<appender name="dailyRollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
  <File>logs/spring.log</File>
  <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
    <!-- daily rollover -->
    <FileNamePattern>spring.%d{yyyy-MM-dd}.log</FileNamePattern>
    <!-- keep 30 days' worth of history -->
    <maxHistory>60</maxHistory>         
  </rollingPolicy>
  <encoder>
    <Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{35} - %msg %n</Pattern>
  </encoder>        
</appender>

  <root level="INFO">
    <appender-ref ref="FILE" />
	<appender-ref ref="dailyRollingFileAppender" />	
  </root>
</configuration>
			
			]]>
				</screen>
				<para>通过级别分割日志将 info, error, debug 分割到指定文件中。</para>
				<screen>
			<![CDATA[
<configuration scan="true" scanPeriod="10 seconds">
     <!-- 控制台日志输出-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- info日志输出-->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <File>${LOG_PATH}/www.netkiller.cn.info.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/www.netkiller.cn.info-%d{yyyyMMdd}.log.%i
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} -%msg%n
            </Pattern>
        </layout>
    </appender>
    <!-- debug 日志输出-->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <File>${LOG_PATH}/www.netkiller.cn.debug.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/www.netkiller.cn.debug-%d{yyyyMMdd}.log.%i
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} -%msg%n
            </Pattern>
        </layout>
    </appender>

      <!--error 日志输出配置 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <File>${LOG_PATH}/www.netkiller.cn.error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/www.netkiller.cn.error-%d{yyyyMMdd}.log.%i</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} -%msg%n</Pattern>
        </layout>
    </appender>

    <root level="DEBUG">
        <!--
        <appender-ref ref="STDOUT" />
        <appender-ref ref="INFO_FILE" />
        <appender-ref ref="ERROR_FILE" />
        <appender-ref ref="DEBUG_FILE" />
        -->
        <appender-ref ref="ERROR_FILE" />
        <appender-ref ref="INFO_FILE" />
        <appender-ref ref="DEBUG_FILE" />
    </root>

</configuration>			
			]]>
				</screen>
			</section>
		</section>
		<section>
			<title>日志过滤</title>
			<para>将特定日志输出保存到指定位置</para>
			<programlisting>
			<![CDATA[
package cn.netkiller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

public class Application {
	public static void main(String[] args) {
		final Logger logger = LoggerFactory.getLogger(Application.class);
		Marker notifyAdmin = MarkerFactory.getMarker("netkiller");
		logger.info("AAAAAAAAA");
		logger.info(notifyAdmin, "BBBBBBBBB");
		logger.error(notifyAdmin, "This is a serious an error requiring the admin's attention", new Exception("Just testing"));
	}
}			
			]]>
			</programlisting>
			<para>匹配到 marker 的日志才输出，通过 RollingFileAppender 可以保存到指定文件。</para>
			<programlisting>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
				<marker>netkiller</marker>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} : %msg %n</pattern>
		</encoder>
	</appender>
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>
</configuration>			
			]]>
			</programlisting>
		</section>
		<section id="stdout">
			<title>标准输出</title>
			<screen>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} : %msg %n</pattern>
		</encoder>
	</appender>
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>
</configuration>
			]]>
			</screen>
		</section>
		<section>
			<title>MDC</title>
			<para>每个 userId 生成一个日志文件</para>
			<programlisting>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />

	<property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss} - [%25.25(%thread)] - [%-5level] - %-30.30(%logger{30}) : %msg%n" />

	<appender name="siftingAppender" class="ch.qos.logback.classic.sift.SiftingAppender">
		<discriminator>
			<key>userId</key>
			<defaultValue>unknown</defaultValue>
		</discriminator>
		<sift>
			<appender name="${userId}" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${log.path}/${userId}.%d{yyyy-MM-dd}.log</fileNamePattern>
				</rollingPolicy>
				<encoder>
					<pattern>${log.pattern}</pattern>
				</encoder>
			</appender>
		</sift>
	</appender>

	<root level="INFO">
		<appender-ref ref="siftingAppender" />
	</root>
</configuration>			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
package cn.netkiller.log;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

public class LogTest {

	private static final Logger logger = LoggerFactory.getLogger(LogTest.class);

	public LogTest() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
	
		MDC.put("userId","0001");
		logger.info("0001用户");
        MDC.clear(); 

        MDC.put("userId","0002");
        logger.info("0002用户");
        MDC.clear();

	}

}
			
			]]>
			</programlisting>
		</section>
		<section id="logback.logstash">
			<title>日志发送给 logstash</title>
			<para>https://github.com/logfellow/logstash-logback-encoder/</para>
			<section>
				<title>logstash 配置</title>
				<para>配置 logstash 增加 tcp 接收输入端。</para>
				<screen>
				<![CDATA[
input {
    tcp {
	    mode => "server"
	    host => "127.0.0.1"
	    port => 4567
	    codec => json_lines
	}
}				
				]]>
				</screen>
			</section>
			<section>
				<title>Java 项目</title>
				<para>Maven 配置文件 pom.xml 中添加</para>
				<screen>
				<![CDATA[
<dependency>
    <groupId>net.logstash.logback</groupId>
    <artifactId>logstash-logback-encoder</artifactId>
    <version>7.2</version>
</dependency>
				]]>
				</screen>
				<para>然后再resources添加logback.xml文件</para>
				<screen>
				<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="true">
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<include resource="org/springframework/boot/logging/logback/console-appender.xml" />
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />

	<appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
		<destination>127.0.0.1:4567</destination>
		<encoder class="net.logstash.logback.encoder.LogstashEncoder">
			<providers>
				<timestamp />
				<logLevel />
				<threadName />
				<loggerName />
				<message />
			</providers>
		</encoder>
	</appender>
	<root level="info">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="logstash" />
	</root>
</configuration>				
				]]>
				</screen>
			</section>

		</section>
		<section id="logback.mongodb">
			<title>日志写入 MongoDB</title>
			<screen>
			<![CDATA[

			]]>
			</screen>
		</section>
	</section>
</section>