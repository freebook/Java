<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="mvc" ?>
	<title>Spring MVC</title>
	<para>Spring MVC 有两种启动模式，一种是传统Tomcat，需要配置很多XML文件。另一种方式是采用 Spring Boot 需要些一个Java程序，不需要写xml文件，这个程序会帮助你处理启动所需的一切，并且采用嵌入方式启动 Tomcat 或者 Jetty.</para>
	<para>两种方式各有优缺点，Tomcat 方式配置繁琐，但是可以使用虚拟机，同一个IP地址使用不同域名访问，出现不同的内容。而Spring Boot一个应用一个容器一个端口，比不得不通过端口来区分应用。</para>

	<section id="@EnableWebMvc">
		<title>@EnableWebMvc</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration
@EnableWebMvc
public class WebMvcConfig extends WebMvcConfigurerAdapter {

	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}

	@Bean
	public InternalResourceViewResolver viewResolver() {
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		resolver.setPrefix("WEB-INF/jsp/");
		resolver.setSuffix(".jsp");
		return resolver;
	}

}
		]]>
		</programlisting>
		<section id="cors">
			<title>CORS 跨域请求</title>
			<programlisting>
			<![CDATA[
@Configuration
public class CorsConfiguration
{
    @Bean
    public WebMvcConfigurer corsConfigurer()
    {
        return new WebMvcConfigurerAdapter() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**");
            }
        };
    }
}		
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
 	@Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurerAdapter() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("*");
            }
        };
    }			
			]]>
			</programlisting>
		</section>
		<section>
			<title>Spring MVC CORS with WebMvcConfigurerAdapter</title>
			<programlisting>
			<![CDATA[
@Configuration
@EnableWebMvc
public class CorsConfiguration extends WebMvcConfigurerAdapter
{
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedMethods("GET", "POST");
    }
}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
@Configuration
@EnableWebMvc
public class AppConfig extends WebMvcConfigurerAdapter {
	@Override
	public void addCorsMappings(CorsRegistry registry) {
	  registry.addMapping("/info/**")
	   	  .allowedOrigins("http://localhost:8080", "http://localhost:8000")
		  .allowedMethods("POST", "GET",  "PUT", "OPTIONS", "DELETE")
		  .allowedHeaders("X-Auth-Token", "Content-Type")
		  .exposedHeaders("custom-header1", "custom-header2")
		  .allowCredentials(false)
		  .maxAge(4800);
	}
}			
			]]>
			</programlisting>
		</section>

	</section>
	
	&section.mvc.controller.xml;	
	&section.mvc.view.xml;
	&section.mvc.service.xml;
	<section id="spring.mvc.i18n">
		<title>i18n 国际化</title>
		<section>
			<title>在 appliction.properties 中配置启用 i18n</title>
			<screen>
			<![CDATA[
spring.messages.basename=message
spring.messages.encoding=UTF-8
			]]>
			</screen>
		</section>
		<section>
			<title>创建语言包文件</title>
			<para>创建默认语言包文件 message.properties，当匹配不到语言时使用默认配置</para>
			<screen>
			<![CDATA[
member.name=Name
			]]>
			</screen>
			<para>message_en_US.properties</para>
			<screen>
			<![CDATA[
member.name=Name
			]]>
			</screen>
			<para>message_zh_CN.properties</para>
			<screen>
			<![CDATA[
member.name=姓名
			]]>
			</screen>
			<para>注意：Eclipse 需要安装 properties 编辑工具，否则中文会自动转换成UTF8编码，无法直接阅读。</para>
		</section>
		<section>
			<title>控制器重引用语言包</title>
			<para>RestController</para>
			<programlisting>
			<![CDATA[
@RestController
public class HomeController {
	@Autowired
	private MessageSource messageSource;

	@GetMapping("/lang")
	public String language() {
		String message = messageSource.getMessage("member.name", null, LocaleContextHolder.getLocale());
		return message;
	}
}
			]]>
			</programlisting>
			<para>Controller</para>
			<programlisting>
			<![CDATA[
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.MessageSource;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.Model;
import java.util.Locale;

@Controller
public class HomeController {

    @Autowired
    private MessageSource messageSource;

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String index(Locale locale, Model model){

        // add parametrized message from controller
        String welcome = messageSource.getMessage("welcome.message", new Object[]{"Neo Chan"}, locale);
        model.addAttribute("message", welcome);
        
        // obtain locale from LocaleContextHolder
        Locale currentLocale = LocaleContextHolder.getLocale();
        model.addAttribute("locale", currentLocale);
        model.addAttribute("startMeeting", "10:30");
        
        return "index";
    }

}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>参数传递</title>
			<para>有时定义语言包会出现一种情况，一个句子中可能存在变量。例如：</para>
			<para>恭喜你 XXXX 您已成为我们的会员</para>
			<para>这样的需求，如果丁一两个key处理起来会非常麻烦。这里可以定义一个变量，通过参数传递来修改一句话中间的部分。</para>
			<screen>
			<![CDATA[
welcome=Welcom to {0}
			]]>
			</screen>
			<screen>
			<![CDATA[
	@GetMapping("/lang/args")
	public String welcome() {
		String[] args = { "China" };
		String message = messageSource.getMessage("welcome", args, LocaleContextHolder.getLocale());

		return message;
	}
			]]>
			</screen>
			<para>参数以此类推 {0}, {1} ...... {n}</para>
			<screen>
			<![CDATA[
String welcome = messageSource.getMessage("welcome.message", new Object[]{"Neo chen"}, locale);			
			]]>
			</screen>
		</section>
	</section>
	&section.mvc.validation.xml;
	&section.mvc.interceptor.xml;
	<section id="faq">
		<title>FAQ</title>
		<section>
			<title>o.s.web.servlet.PageNotFound</title>
			<para>解决方法，加入下面代码到 dispatcher-servlet.xml 文件中</para>
			<screen>
			<![CDATA[
<mvc:annotation-driven />			
			]]>
			</screen>
			<para>dispatcher-servlet.xml</para>
			<screen>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="cn.netkiller.controller" />
	<mvc:annotation-driven />
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

</beans>
			]]>
			</screen>
		</section>
		<section>
			<title>HTTP Status 500 - Handler processing failed; nested exception
				is java.lang.NoClassDefFoundError:
				javax/servlet/jsp/jstl/core/Config
			</title>
			<para>pom.xml 文件中加入依赖包</para>
			<screen>
			<![CDATA[
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
			]]>
			</screen>
		</section>
		<section>
			<title>同时使用 Thymeleaf 与 JSP </title>
			<subtitle>Using both Thymeleaf and JSP</subtitle>
			<programlisting>
			<![CDATA[
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- <property name="suffix" value=".jsp" /> -->
		<property name="viewNames" value="*.jsp" />
	</bean>

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/templates/" />
		<!-- <property name="suffix" value=".html" /> -->
		<property name="templateMode" value="HTML5" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
	</bean>

	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<property name="viewNames" value="*.html" />
	</bean>	
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
@RequestMapping("/thymeleaf")
public String thymeleafView(){
    return "thymeleaf.html";
}

@RequestMapping("/jsp")
public String jspView(){
    return "jstl.jsp";
}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
			<property name="viewNames" value="*thymeleaf/*" />
			
@RequestMapping(value="/test")
public ModelAndView dboxPrint(Model model){
    ModelAndView modelAndView = new ModelAndView("thymeleaf/test");
    return modelAndView;
}
			]]>
			</programlisting>
		</section>
		<section>
			<title>排除静态内容</title>
			<para>方法一，排除静态内容如 images, css, js 等等</para>
			<programlisting>
			<![CDATA[
	<servlet>
        <servlet-name>springframework</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>/images/*</url-pattern>
	    <url-pattern>*.css</url-pattern>
	    <url-pattern>/js/*.js</url-pattern>
	</servlet-mapping>    
    <servlet-mapping>
        <servlet-name>springframework</servlet-name>
        <url-pattern>/welcome.jsp</url-pattern>
        <url-pattern>/welcome.html</url-pattern>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>			
			]]>
			</programlisting>
			<para>方法二</para>
			<programlisting>
			<![CDATA[
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/js/" mapping="/js/**" />			
			]]>
			</programlisting>
		</section>
		<section>
			<title>HTTP Status 406</title>
			<para>配置 url-pattern 增加需要传递给Spring的扩展名</para>
			<screen>
			<![CDATA[
	<servlet>
        <servlet-name>springframework</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
   
    <servlet-mapping>
        <servlet-name>springframework</servlet-name>
        <url-pattern>/welcome.jsp</url-pattern>
        <url-pattern>/welcome.html</url-pattern>
        <url-pattern>*.json</url-pattern>
        <url-pattern>*.xml</url-pattern>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>		
			]]>
			</screen>
		</section>
		<section>
			<title>Caused by: java.lang.IllegalArgumentException: Not a managed type: class common.domain.Article</title>
			<para>背景描述：Springboot 入口文件 Application.java 的包是 package api; 为了让 domain,pojo 共用，于是将 domain 放到Maven module下命令为 common。启动后出现这个故障。</para>
			<para>解决方案增加 @EntityScan("common.domain") 即可。</para>
			<programlisting>
			<![CDATA[
package api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
@EnableEurekaClient
@EntityScan("common.domain")
public class Application {

	public static void main(String[] args) {
		System.out.println( "Service Api Starting..." );
		SpringApplication.run(Application.class, args);
	}
}
			
			]]>
			</programlisting>
		</section>
		<section id="error.unauthorized">
			<title>{"error":"unauthorized","error_description":"Full authentication is required to access this resource"}</title>
			<para>Oauth @RestController 一切正常， @Controller 提示如下</para>
			<screen>
		<![CDATA[
{"error":"unauthorized","error_description":"Full authentication is required to access this resource"}		
		]]>
			</screen>
			<para>程序如下</para>
			<programlisting>
		<![CDATA[
package api.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/")
public class IndexController {

	public IndexController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/")
	public String index() {
		return "Helloworld!!!";

	}

	@GetMapping("/about")
	public String test() {
		return "Helloworld!!!";

	}
}				
		]]>
			</programlisting>
			<para>分析 @Controller 不允许直接返回字符串，必须使用 @ResponseBody 或者 ModelAndView，下改后问题解决。</para>
			<programlisting>
		<![CDATA[
package api.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/web")
public class IndexController {

	public IndexController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/")
	@ResponseBody
	public String index() {
		return "Helloworld!!!";

	}

	@GetMapping("/about")
	@ResponseBody
	public String test() {
		return "Helloworld!!!";

	}
}

		]]>
			</programlisting>
			<para>同时 @EnableWebSecurity 需要忽略 @Controller 的映射 URL</para>
			<programlisting>
			<![CDATA[
@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/**/json").antMatchers("/about", "/", "/css/**");
	}
}
			]]>
			</programlisting>
		</section>
	</section>

</chapter>