<?xml version="1.0" encoding="UTF-8"?>
<section id="service">
	<title>Service</title>
	<section id="service.ComponentScan">
		<title>Application</title>
		<para>@ComponentScan({ "web", "rest","service" }) 一定要包含 Service
			目录。否则无法实现 @Autowired自动装配。你可以直接@ComponentScan扫描所有目录。</para>
		<programlisting>
			<![CDATA[
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.authentication.UserCredentials;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

import com.mongodb.Mongo;

import pojo.ApplicationConfiguration;

@Configuration
@SpringBootApplication
@EnableConfigurationProperties(ApplicationConfiguration.class)
@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })
@ComponentScan({ "web", "rest","service" })
@EnableMongoRepositories
public class Application {
	
	@SuppressWarnings("deprecation")
	public @Bean MongoDbFactory mongoDbFactory() throws Exception {
		UserCredentials userCredentials = new UserCredentials("finance", "your_password");
		return new SimpleMongoDbFactory(new Mongo("mdb.netkiller.cn"), "finance", userCredentials);
	}

	public @Bean MongoTemplate mongoTemplate() throws Exception {
		return new MongoTemplate(mongoDbFactory());
	}

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}
			]]>
		</programlisting>
	</section>
	<section id="service.interface">
		<title>定义接口</title>
		<para>TestService 接口</para>
		<programlisting>
			<![CDATA[
package service;

public interface TestService {

	public String getName();
	public String toString();
	public String helloUser(String user);
}

			]]>
		</programlisting>
	</section>
	<section id="service.implements">
		<title>实现接口</title>
		<para>实现 TestService 接口</para>
		<programlisting>
			<![CDATA[
package service.impl;

import org.springframework.stereotype.Component;

import service.TestService;

@Component
public class TestServiceImpl implements TestService {

	public String name = "Test";

	public void TestService() {

	}

	@Override
	public String helloUser(String user) {
		return "hello " + user;
	}

	public String getName() {
		return this.name;
	}

	@Override
	public String toString() {
		return "TestServiceImpl [config=" + this.name + "]";
	}

}

			]]>
		</programlisting>
	</section>
	<section id="service.autowired">
		<title>调用 Service</title>
		<para>控制器中调用 Service</para>
		<programlisting>
			<![CDATA[
package web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import domain.City;
import pojo.ApplicationConfiguration;
import repository.CityRepository;
import service.TestService;

@Controller
public class IndexController {
	
	@Autowired
    private TestService testService;
	
	@RequestMapping("/service")
	@ResponseBody
	public String service() {
		return testService.helloUser("Neo");
	}

}
			]]>
		</programlisting>
	</section>
	<section id="service.context.getBean">
		<title>context.getBean 调用 Service</title>
		<programlisting>
		<![CDATA[
@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(DemoApplication.class, args);
        TestService bean = context.getBean(TestService.class);
        bean.test1();
        bean.test2("xsx");
        bean.test3("xsx`", 1);
        bean.test4("xsx2", 1, 2, 3, 4);
    }
}
		]]>
		</programlisting>
	</section>
	<section id="AopContext">
		<title>AopContext</title>
		<programlisting>
		<![CDATA[
@Servcie
public class UserService {

   public void save(User user) {
         ((UserService)AopContext.currentProxy()).save(user);
   }

   @Transactional(rollbackFor=Exception.class)
   public void save(User user) {
		...
		...
    }
 }		
		]]>
		</programlisting>
	</section>
	<section id="service.singleton">
		<title>Service 是单例模式</title>
		<para>Service 的变量是共享的，这是与 new Object 的区别。</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.service;

import cn.netkiller.domain.Chat;
import cn.netkiller.repository.ChatRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class TestService {

    private String test;

    @Async
    public void test1() {
        this.test = "Test 1";
    }

    @Async
    public void test2() {
        this.test = "Test 2";
    }

    @Async
    public void test() {
        log.info(this.test);
    }
}

		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
    @Autowired
    private TestService testService;
    		
    @GetMapping("test")
    private Mono<String> test() {
        chatService.test();
        return Mono.just("OK");
    }
    		
    @GetMapping("/test1")
    public Mono<String> test1() {
        String test = "测试";
        chatService.test1();
        return Mono.just(test);
    }

    @GetMapping("/test2")
    public Mono<String> test2() {
        chatService.test2();
        return Mono.just("OK");
    }

		]]>
		</programlisting>
		<para>我们可以看到 Service 是 singleton 单例模式</para>
		<section>
		<![CDATA[
neo@MacBook-Pro-M2 ~/w/watch (main)> curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq '.contexts.[].beans.testService'
{
  "aliases": [],
  "scope": "singleton",
  "type": "cn.netkiller.service.TestService$$SpringCGLIB$$0",
  "resource": "file [/Users/neo/workspace/watch/target/classes/cn/netkiller/service/TestService.class]",
  "dependencies": []
}		
		]]>
		</section>
		<programlisting>
		<![CDATA[
2024-01-01T14:09:10.022+08:00  INFO 59782 --- [watch-development] [         task-1] cn.netkiller.service.TestService           : null
2024-01-01T14:09:24.694+08:00  INFO 59782 --- [watch-development] [         task-3] cn.netkiller.service.TestService           : Test 1
2024-01-01T14:10:04.394+08:00  INFO 59782 --- [watch-development] [         task-8] cn.netkiller.service.TestService           : Test 2
		]]>
		</programlisting>
	</section>
</section>