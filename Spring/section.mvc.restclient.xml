<?xml version="1.0" encoding="UTF-8"?>
<section id="RestClient">
	<title>RestClient</title>
	<section>
		<title>创建 RestClient</title>
		<para>Bean 注入方式</para>
		<programlisting>
		<![CDATA[
@Value("${REMOTE_BASE_URI:http://localhost:3000}")
String baseURI;

@Bean
RestClient restClient() {
  return RestClient.create(baseURI);
}		
		]]>
		</programlisting>
		
		<programlisting>
		<![CDATA[
RestClient defaultClient = RestClient.create();

RestClient customClient = RestClient.builder()
  .requestFactory(new HttpComponentsClientHttpRequestFactory())
  .messageConverters(converters -> converters.add(new MyCustomMessageConverter()))
  .baseUrl("https://example.com")
  .defaultUriVariables(Map.of("variable", "foo"))
  .defaultHeader("My-Header", "Foo")
  .requestInterceptor(myCustomInterceptor)
  .requestInitializer(myCustomInitializer)
  .build();		
		]]>
		</programlisting>

	</section>
	<section>
		<title>Get 操作</title>
		<programlisting>
		<![CDATA[
restClient.get()
	.uri("/employees")
	//...

restClient.get()
	.uri("/employees/{id}", id)
	//...		
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
List<Employee> employeeList = restClient.get()
    .uri("/employees")
    .accept(MediaType.APPLICATION_JSON)
    .retrieve()
    .body(List.class);
    
ResponseEntity<List> responseEntity = restClient.get()
    .uri("/employees")
    .accept(MediaType.APPLICATION_JSON)
    .retrieve()
    .toEntity(List.class);    		
		]]>
		</programlisting>
	</section>
	<section>
		<title>Post Json</title>
		<programlisting>
		<![CDATA[
    @Cacheable(value = "translate", key = "#chinese", unless = "#result == null")
    public String translate(String chinese) {
        String english = null;
        RestClient restClient = RestClient.builder().baseUrl(url).build();
        String accessToken = this.getAccessToken();
        HashMap<String, String> data = new LinkedHashMap<String, String>() {{
            put("q", chinese);
            put("from", "zh");
            put("to", "en");
        }};
        ResponseEntity<Translate> response = restClient.post()
                .uri("/rpc/2.0/mt/texttrans/v1-?access_token={access_token}", Map.of("access_token", accessToken))
                .contentType(APPLICATION_JSON)
                .body(data)
                .retrieve()
                .toEntity(Translate.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            Translate translate = response.getBody();
            if (translate.getResult() != null) {
                english = translate.getResult().getTrans_result().get(0).get("dst");
            }
            log.info("Translate english: {}", english);
        } else {
            log.info("Translate: " + response);
        }
        return english;
    }		
		]]>
		</programlisting>
	</section>
	<section>
		<title>HTTP Authorization Basic</title>
		<programlisting>
		<![CDATA[
	@GetMapping("/{device}/test")
    public String get(@PathVariable String device) throws InterruptedException {

        String username = System.getProperty("username", "admin");
        String password = System.getProperty("password", "uPQKFe98IwZCzgVGjbWIQRyRyyecb2Ha");

        Base64.Encoder encoder = Base64.getEncoder();
        String authorization = encoder.encodeToString((username + ":" + password).getBytes(StandardCharsets.UTF_8));
        RestClient restClient = RestClient.builder()
                .baseUrl("http://gpt.netkiller.cn:8080")
                .defaultHeader("Authorization", "Basic " + authorization)
                .build();

        String question = "test";

        String result = restClient.get().uri(uriBuilder -> uriBuilder
                .path("/ask/cache_chatgpt")
                .queryParam("question", question)
                .build()).retrieve().body(String.class);

        return result;
    }		
		]]>
		</programlisting>
	</section>
	<section>
		<title></title>
		<programlisting>
		<![CDATA[
		ResponseEntity<JsonObject> responseEntity = restClient.get()
                .uri(uriBuilder -> uriBuilder
                        .path("/articles/1.html")
                        .queryParam("question", URLEncoder.encode(question, StandardCharsets.UTF_8))
                        .build())
                .retrieve()
                .onStatus(status -> status.value() == 404, (request, response) -> {
                	throw new ArticleNotFoundException(response)
                }).toEntity(JsonObject.class);
		]]>
		</programlisting>
	</section>
</section>
