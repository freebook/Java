<section id="spring-data-mongodb"><!-- <?dbhtml dir="mongodb" ?> -->
	<title>Spring Data MongoDB</title>

	<section id="SpringDataMongoDB">
		<title>Example Spring Data MongoDB</title>
		<section>
			<title>pom.xml</title>
			<para>注意Spring4 与 1.9.1.RELEASE有兼容性问题，日志提示 Error creating bean with name 'mongoTemplate' defined in ServletContext resource</para>
			<screen>
			<![CDATA[
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>1.8.1.RELEASE</version>
		</dependency>			
			]]>
			</screen>
		</section>
		<section>
			<title>springframework-servlet.xml</title>
			<screen>
			<![CDATA[
	<mongo:db-factory id="mongoDbFactory" host="${mongo.host}" port="${mongo.port}" dbname="${mongo.database}" />
	<!-- username="${mongo.username}" password="${mongo.password}" -->

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>
    
    <mongo:mapping-converter id="converter" db-factory-ref="mongoDbFactory"/>
    <bean id="gridFsTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
      <constructor-arg ref="mongoDbFactory"/>
      <constructor-arg ref="converter"/>
    </bean>
			]]>
			</screen>
			<example>
				<title>Spring Data MongoDB - springframework-servlet.xml</title>
				<screen>
				<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/mongo
		http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd        
        ">

	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/zt/" mapping="/zt/**" />
	<mvc:resources location="/sm/" mapping="/sm/**" />
	<mvc:resources location="/module/" mapping="/module/**" />

	<context:component-scan base-package="cn.netkiller.controller" />
	<!-- <context:property-placeholder location="classpath:resources/development.properties" /> -->
	<mvc:annotation-driven />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="configuracion" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resources/development.properties" />
	</bean>
	
	<!-- MongoDB Connection Factory -->
	<mongo:db-factory id="mongoDbFactory" host="${mongo.host}" port="${mongo.port}" dbname="${mongo.database}" />
	<!-- username="${mongo.username}" password="${mongo.password}" -->
	
	<!-- MongoDB template definition -->
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>
    
    <!-- MongoDB GridFS template definition -->
    <mongo:mapping-converter id="converter" db-factory-ref="mongoDbFactory"/>
    <bean id="gridFsTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
      <constructor-arg ref="mongoDbFactory"/>
      <constructor-arg ref="converter"/>
    </bean>
    
	<!-- Redis Connection Factory -->
	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:host-name="192.168.2.1" p:port="6379" p:use-pool="true" />

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnFactory" />
 
</beans>
				]]>
				</screen>
			</example>
			<para>development.properties 配置内容</para>
			<screen>
			<![CDATA[
mongo.host=192.168.4.1
mongo.port=27017
mongo.username=test
mongo.password=passw0rd
mongo.database=website
			]]>
			</screen>
		</section>
		<section>
			<title>POJO</title>
			<screen>
			<![CDATA[
package cn.netkiller.pojo;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "tracker")
public class Tracker {
	@Id
	private String id;
	private String name;
	private String unique;
	private String hostname;
	private String referrer;
	private String href;

	public Tracker() {
		// TODO Auto-generated constructor stub
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUnique() {
		return unique;
	}

	public void setUnique(String unique) {
		this.unique = unique;
	}

	public String getHostname() {
		return hostname;
	}

	public void setHostname(String hostname) {
		this.hostname = hostname;
	}

	public String getReferrer() {
		return referrer;
	}

	public void setReferrer(String referrer) {
		this.referrer = referrer;
	}

	public String getHref() {
		return href;
	}

	public void setHref(String href) {
		this.href = href;
	}

	@Override
	public String toString() {
		return "Tracker [id=" + id + ", name=" + name + ", unique=" + unique + ", hostname=" + hostname + ", referrer=" + referrer + ", href=" + href + "]";
	}

}		
			]]>
			</screen>
		</section>
		<section>
			<title>Controller</title>
			<screen>
			<![CDATA[
package cn.netkiller.controller;

import cn.netkiller.pojo.Tracker;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TrackerController {

	@Autowired
	private MongoTemplate mongoTemplate;

	public TrackerController() {

	}

	@RequestMapping("/tracker/test")
	@ResponseBody
	String hello() {
		return "Hello World!";
	}

	@RequestMapping("/tracker")
	@ResponseBody
	String execute() {
		Tracker tracker = new Tracker();
		tracker.setName("test");
		tracker.setUnique("111223456");
		tracker.setHostname("www.example.com");
		tracker.setHref("http://example.com/test.html");
		tracker.setReferrer("http://example.com/");
		this.mongoTemplate.insert(tracker);
		
		return tracker.toString();
	}

}
			]]>
			</screen>
		</section>
		<section>
			<title>查看测试结果</title>
			<screen>
			<![CDATA[
> db.tracker.find();
{ "_id" : ObjectId("5757c0b92c526a6bda5eea3a"), "_class" : "cn.netkiller.repositories.Tracker", "name" : "test", "unique" : "111223456", "hostname" : "www.example.com", "referrer" : "http://example.com/", "href" : "http://example.com/test.html" }

			]]>
			</screen>
		</section>
		<section>
			<title>条件查询</title>
			<screen>
			<![CDATA[
	@RequestMapping("/read/name/{name}")
	public ArrayList<Tracker> sort(@PathVariable String name) {
	
		Query query = new Query(Criteria.where("name").is(name)); 
		 
		ArrayList<Tracker> trackers =  (ArrayList<Tracker>) mongoTemplate.find(query, Tracker.class);
		return trackers;
	}			
			]]>
			</screen>
		</section>
	</section>
	<section id="document">
		<title>@Document</title>
		<para>复杂的 @Document 数据类型定义</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.domain;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class MultilevelDirectSellingTradingRebate {

	public enum Type {
		POINT, CASH, GIFT
	}

	public enum Rebate {
		DIRECT, INDIRECT
	}

	public enum Status {
		New, Rejected, Approved
	}

	@Id
	private String id;
	public String name;
	public Date beginDate;
	public Date endDate;
	public double lowAmount;
	public double highAmount;
	public Type type;
	public Status status = Status.New;
	public List<Map<String, Map<?, ?>>> product;

	@Override
	public String toString() {
		return "MultilevelDirectSellingTradingRebate [id=" + id + ", name=" + name + ", beginDate=" + beginDate
				+ ", endDate=" + endDate + ", lowAmount=" + lowAmount + ", highAmount=" + highAmount + ", type=" + type
				+ ", status=" + status + ", product=" + product + "]";
	}

}
		]]>
		</programlisting>
		<section id="@Document">
			<title>指定表名</title>
			<para>默认使用 class 作为表名</para>
			<programlisting>
			<![CDATA[
@Document
public class Multilevel {
	...
	...
}			
			]]>
			</programlisting>
			<para>指定特别表名</para>
			<programlisting>
			<![CDATA[
@Document(collection = "author")			
			]]>
			</programlisting>
		</section>
		<section>
			<title>@Id</title>
			<programlisting>
			<![CDATA[
	@Id
	private String id;		
			]]>
			</programlisting>
		</section>
		<section>
			<title>@Version</title>
			<programlisting>
			<![CDATA[
	@Version 
	private Long version;			
			]]>
			</programlisting>
		</section>
		<section>
			<title>@Field 定义字段名</title>
			<programlisting>
			<![CDATA[
@Field("url")
private String link;			
			]]>
			</programlisting>
		</section>
		<section id="index">
			<title>@Indexed</title>
			<para>索引</para>
			<section>
				<title>普通索引</title>
				<programlisting>
				<![CDATA[
@Indexed		
				]]>
				</programlisting>
			</section>
			<section>
				<title>唯一索引</title>
				<programlisting>
				<![CDATA[
@Indexed(unique=true)	
				]]>
				</programlisting>
			</section>
			<section>
				<title>索引排序方式</title>
				<programlisting>
				<![CDATA[
@Indexed(name = "first_name_index", direction = IndexDirection.DESCENDING)		
				]]>
				</programlisting>
			</section>
			<section>
				<title>索引过期时间设置</title>
				<programlisting>
				<![CDATA[
@Indexed(name = "expire_after_seconds_index", expireAfterSeconds = 10)
private LocalDateTime updateDate;				
				]]>
				</programlisting>
			</section>
		</section>
		<section id="@CompoundIndex">
			<title>@CompoundIndex 复合索引</title>
			<programlisting>
			<![CDATA[
@Document
@CompoundIndexes({
    @CompoundIndex(name = "email_age", def = "{'email.id' : 1, 'age': 1}")
})
public class User {
    //
}			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
@Document
@CompoundIndexes({
  @CompoundIndex(def = "{'firstName':1, 'salary':-1}", name = "compound_index_1"),
  @CompoundIndex(def = "{'secondName':1, 'profession':1}", name = "compound_index_2")
})
public class Person {
  @Id private String id;
  private String firstName;
  private String secondName;
  private LocalDateTime dateOfBirth;
  private Address address;
  private String profession;
  private int salary;
  // constructor
  // getters and setters
}			
			]]>
			</programlisting>
		</section>
		<section id="@Transient">
			<title>@Transient 丢弃数据，不存到 mongodb</title>
			<programlisting>
			<![CDATA[
public class User {
     
    @Transient
    private Integer age;

    // standard getter and setter
 
}	
			]]>
			</programlisting>
		</section>
		<section id="@DBRef">
			<title>@DBRef 做外外键引用</title>
			<section>
				<title>Article 类</title>
				<programlisting>
				<![CDATA[
package cn.netkiller.api.domain;

import java.util.List;

import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Article {

	private String title; // 名称
	private String description; // 描述
	private String tag; // 类型
	@DBRef
	private List<Hypermedia> hypermedia; // 图片，视频

	public Article() {
		// TODO Auto-generated constructor stub
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getTag() {
		return tag;
	}

	public void setTag(String tag) {
		this.tag = tag;
	}

	public List<Hypermedia> getHypermedia() {
		return hypermedia;
	}

	public void setHypermedia(List<Hypermedia> hypermedia) {
		this.hypermedia = hypermedia;
	}

	@Override
	public String toString() {
		return "Article [title=" + title + ", description=" + description + ", tag=" + tag + ", hypermedia=" + hypermedia + "]";
	}

}
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>Hypermedia 类</title>
				<programlisting>
				<![CDATA[
package cn.netkiller.api.domain;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Hypermedia {

	@Id
	private String id;
	private String hash;
	private String name;
	private String size;

	public Hypermedia() {
		// TODO Auto-generated constructor stub
	}

	public Hypermedia(String hash, String name, String size) {
		this.hash = hash;
		this.name = name;
		this.size = size;
	}

	public String getHash() {
		return hash;
	}

	public void setHash(String hash) {
		this.hash = hash;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	@Override
	public String toString() {
		return "Hypermedia [hash=" + hash + ", name=" + name + ", size=" + size + "]";
	}

}

				]]>
				</programlisting>
			</section>
			<section>
				<title>MongoRepository</title>
				<programlisting>
				<![CDATA[
package cn.netkiller.api.repository;

import org.springframework.data.mongodb.repository.MongoRepository;

import api.domain.Article;

public interface ArticleRepository extends MongoRepository<Article, String> {

}

				]]>
				</programlisting>
				<programlisting>
				<![CDATA[
package cn.netkiller.api.repository;

import org.springframework.data.mongodb.repository.MongoRepository;

import api.domain.Hypermedia;

public interface HypermediaRepository extends MongoRepository<Hypermedia, String> {

}
				]]>
				</programlisting>
			</section>
			<section>
				<title>RestController</title>
				<programlisting>
				<![CDATA[
package cn.netkiller.api.restful;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import api.domain.Article;
import api.domain.Hypermedia;
import api.repository.ArticleRepository;
import api.repository.HypermediaRepository;

@RestController
@RequestMapping("/article")
public class ArticleRestController {

	@Autowired
	private ArticleRepository articleRepository;

	@Autowired
	private HypermediaRepository hypermediaRepository;

	public ArticleRestController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/save")
	public Article save() {

		Article article = new Article();
		article.setTitle("标题");
		article.setDescription("摘要");
		article.setTag("标签");

		Hypermedia hypermedia = new Hypermedia("AAA", "BBB", "CCC");
		hypermediaRepository.save(hypermedia);

		List<Hypermedia> hypermedias = new ArrayList<Hypermedia>();
		hypermedias.add(hypermedia);

		article.setHypermedia(hypermedias);

		articleRepository.save(article);

		System.out.println(article);

		return article;
	}

}
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>运行结果</title>
				<programlisting>
				<![CDATA[
neo@MacBook-Pro ~ % curl -s -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" -X GET ${URL}/article/save | jq
{
  "title": "标题",
  "description": "摘要",
  "tag": "标签",
  "hypermedia": [
    {
      "hash": "AAA",
      "name": "BBB",
      "size": "CCC"
    }
  ]
}
				]]>
				</programlisting>
				<para>MongoDB 结果</para>
				<para>db.getCollection('article').find({})</para>
				<screen>
				<![CDATA[
/* 1 */
{
    "_id" : ObjectId("5bab66f8c92782395817cb05"),
    "title" : "标题",
    "description" : "摘要",
    "tag" : "标签",
    "hypermedia" : [ 
        {
            "$ref" : "hypermedia",
            "$id" : ObjectId("5bab66f8c92782395817cb04")
        }
    ],
    "_class" : "cn.netkiller.api.domain.Article"
}				
				]]>
				</screen>
				<para>db.getCollection('hypermedia').find({})</para>
				<screen>
				<![CDATA[
/* 1 */
{
    "_id" : ObjectId("5bab66b9c927823951f4f5fe"),
    "hash" : "AAA",
    "name" : "BBB",
    "size" : "CCC",
    "_class" : "api.domain.Hypermedia"
}				
				]]>
				</screen>
			</section>
		</section>
		<section id="DateTimeFormat">
			<title>@DateTimeFormat</title>
			<programlisting>
			<![CDATA[
@DateTimeFormat( pattern = "yyyy-MM-dd" )
private Date birthday

@DateTimeFormat(iso = DateTimeFormat.ISO.NONE)
private final Calendar datetime;

@DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")
private Date date;

@DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
private Date createdDate = new Date();			
			]]>
			</programlisting>
		</section>
		<section id="@JsonFormat 日期格式化">
			<title>@JsonFormat 格式化 json 时间格式</title>
			<para>默认 json 中的时间格式是这样的</para>
			<screen>
			<![CDATA[
"createDate":"2018-09-11T07:34:20.106+0000","updateDate":"2018-09-11T07:34:20.106+0000"			
			]]>
			</screen>
			<para>@JsonFormat 可以格式化 json 返回的时间格式。</para>
			<programlisting>
			<![CDATA[
@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")			
			]]>
			</programlisting>
			<para>格式化后</para>
			<programlisting>
			<![CDATA[
"createDate":"2018-09-11 07:42:44","updateDate":"2018-09-11 07:42:44"			
			]]>
			</programlisting>
			<para>解决时区问题，MongoDb 默认使用UTC,显示时间相差8小时</para>
			<programlisting>
			<![CDATA[
@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	
private Date createdDate = new Date();			
			]]>
			</programlisting>
		</section>
		<section id="NumberFormat">
			<title>@NumberFormat</title>
			<programlisting>
				@NumberFormat(style=Style.CURRENCY)
				private double money;
			</programlisting>
		</section>
		<section id="Enum">
			<title>在 @Document 中使用 Enum 类型</title>
			<programlisting>
			<![CDATA[
	public enum Type {
		POINT, CASH, GIFT
	}

	public enum Rebate {
		DIRECT, INDIRECT
	}

	public enum Status {
		New, Rejected, Approved
	}
			]]>
			</programlisting>
			<para>枚举类型的赋值方法</para>
			<programlisting>
			<![CDATA[
		MultilevelDirectSellingTradingRebate multilevelDirectSellingTradingRebate = new MultilevelDirectSellingTradingRebate();
		multilevelDirectSellingTradingRebate.name = "TEST";
		multilevelDirectSellingTradingRebate.beginDate = new Date();
		multilevelDirectSellingTradingRebate.endDate = new Date();
		multilevelDirectSellingTradingRebate.lowAmount = 1.5d;
		multilevelDirectSellingTradingRebate.highAmount = 100d;
		multilevelDirectSellingTradingRebate.type = Type.CASH;			
			]]>
			</programlisting>
		</section>
		<section id="document.list">
			<title>在 @Document 中定义数据结构 List/Map</title>
			<programlisting>
			<![CDATA[
	public List<Map<String, Map<?, ?>>> product;
			]]>
			</programlisting>
			<para>下面是数据集结构的赋值例子</para>
			<programlisting>
			<![CDATA[
	Map<Enum<Rebate>, Double> rebate = new HashMap<Enum<Rebate>, Double>();

	rebate.put(Rebate.DIRECT, 10.05d);
	rebate.put(Rebate.INDIRECT, 6.05d);

	Map<String, Map<?, ?>> prod1 = new HashMap<String, Map<?, ?>>();
	prod1.put("USDRMB", rebate);

	List<Map<String, Map<?, ?>>> products = new ArrayList<Map<String, Map<?, ?>>>();
	products.add(prod1);
	multilevelDirectSellingTradingRebate.product = products;
			]]>
			</programlisting>
		</section>
	</section>
	<section id="MongoRepository">
		<title>MongoRepository</title>
		<section id="findAll">
			<title>findAll()</title>
			<programlisting>
			<![CDATA[
	@RequestMapping(value = "read", method = RequestMethod.GET, produces = { "application/xml", "application/json" })
	@ResponseStatus(HttpStatus.OK)
	public List<Withdraw> read() {
		return repository.findAll();
	}
			]]>
			</programlisting>
		</section>
		<section id="deleteAll">
			<title>deleteAll()</title>
			<programlisting>
			<![CDATA[
repository.deleteAll();
			]]>
			</programlisting>
		</section>
		<section id="save">
			<title>save()</title>
			<programlisting>
			<![CDATA[
repository.save(new City("Shenzhen", "China"));
			]]>
			</programlisting>
		</section>
		<section id="count">
			<title>count()</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("count")
	public long count() {
		return repository.count();
	}
			]]>
			</programlisting>
		</section>
		<section id="findByXXXX">
			<title>findByXXXX</title>
			<programlisting>
			<![CDATA[
List<User> findByName(String name);

List<User> users = userRepository.findByName("Eric");
			]]>
			</programlisting>
		</section>
		<section id="StartingWith">
			<title>StartingWith 和 EndingWith</title>
			<programlisting>
			<![CDATA[
List<User> findByNameStartingWith(String regexp);
List<User> findByNameEndingWith(String regexp);

List<User> users = userRepository.findByNameStartingWith("N");
List<User> users = userRepository.findByNameEndingWith("o");
			]]>
			</programlisting>
		</section>
		<section id="Between">
			<title>Between</title>
			<programlisting>
			<![CDATA[
List<User> findByAgeBetween(int ageGT, int ageLT);

List<User> users = userRepository.findByAgeBetween(20, 50);
			]]>
			</programlisting>
		</section>
		<section id="PageRequest">
			<title>PageRequest</title>
			<programlisting>
			<![CDATA[
Page<User> findByLastname(String lastname, Pageable pageable);			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
	@RequestMapping(value = "read/{size}/{page}", method = RequestMethod.GET, produces = { "application/xml", "application/json" })
	@ResponseStatus(HttpStatus.OK)
	public List<Withdraw> readPage(@PathVariable int size, @PathVariable int page){
		PageRequest pageRequest = new PageRequest(page-1,size);
		return repository.findAll(pageRequest).getContent();
	}
			]]>
			</programlisting>
			<para>URL翻页参数，每次返回10条记录</para>
			<screen>
				第一页 http://localhost:8080/v1/withdraw/read/10/1.json
				第二页 http://localhost:8080/v1/withdraw/read/10/2.json
				...
				第五页 http://localhost:8080/v1/withdraw/read/10/5.json
			</screen>
		</section>
		<section id="@Query">
			<title>@Query</title>
			<programlisting>
			<![CDATA[
public interface PersonRepository extends MongoRepository<Person, String> {
	@Query("{ 'name' : ?0 }")
	List<Person> findWithQuery(String userId);
}
			]]>
			</programlisting>
		</section>
	</section>


	<section id="mongoTemplate">
		<title>mongoTemplate</title>
		<section id="mongoTemplate.insert">
			<title>Insert</title>
			<programlisting>
			<![CDATA[
BSONObject personBsonObj = BasicDBObjectBuilder.start()
                .add("name","Neo Chen")
                .add("age",27)
                .add("address",null).get();

mongoTemplate.insert(personBsonObj,"personCollection");
			]]>
			</programlisting>
			<para>document in the db:</para>
			<screen>
			<![CDATA[
db.personCollection.findOne().pretty();
{"age":21,"name":"John Doe";"address":null}*			
			]]>
			</screen>
		</section>
		<section id="mongoTemplate.query">
			<title>Query</title>

			<section id="is">
				<title>is</title>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Neo"));
List<User> users = mongoTemplate.find(query, User.class);		
			]]>
				</programlisting>
			</section>
			<section id="regex">
				<title>Regex 正则表达式搜索</title>
				<para>查询以N开头的名字</para>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.addCriteria(Criteria.where("name").regex("^N"));
List<User> users = mongoTemplate.find(query,User.class);	
			]]>
				</programlisting>
				<para>查询以o结尾的名字</para>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.addCriteria(Criteria.where("name").regex("o$"));
List<User> users = mongoTemplate.find(query, User.class);
			]]>
				</programlisting>
			</section>
			<section id="ltgt">
				<title>lt 和 gt</title>
				<para>查询年龄小于 &lt; 30 并 &gt; 20 的用户</para>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.addCriteria(Criteria.where("age").lt(30).gt(20));
List<User> users = mongoTemplate.find(query,User.class);
			]]>
				</programlisting>
				<para>查找日期范围</para>
				<programlisting>
			<![CDATA[
Date start = DateUtil.convertStringToDateTime("2014-02-10 20:38:44");
Date end = DateUtil.convertStringToDateTime("2014-02-10 20:38:50");
					
Query query = new Query();
Criteria criteria = Criteria.where("delflag").is(false);
criteria.and("modifyDate").gte(start).lte(end);
query.addCriteria(criteria);
query.limit(10);
			
			]]>
				</programlisting>
			</section>
			<section id="between">
				<title>between</title>
				<para>实现一个区间条件 new Criteria("createdDate").gte(beginDate).lte(endDate)</para>
				<programlisting>
			<![CDATA[
	public boolean AccountDeposit(Date beginDate, Date endDate) {

		MatchOperation matchOperation = match(new Criteria("createdDate").gte(beginDate).lte(endDate));
		GroupOperation groupOperation = group("loginname").sum("amount").as("amount");
		SortOperation sortOperation = sort(new Sort(Direction.ASC, "loginname"));

		Aggregation aggregation = newAggregation(matchOperation, groupOperation, sortOperation);
		AggregationResults<AccountSettlementDetails> results = mongoTemplate.aggregate(aggregation, AccountSettlementDetails.class, AccountSettlementDetails.class);

		if (results.getMappedResults() != null) {
			log.info(results.getRawResults().get("result").toString());
			for (AccountSettlementDetails settlementDetails : results.getMappedResults()) {
							
				log.info("{}", settlementDetails.toString());
				
			}
		}
		return true;
	}
			]]>
				</programlisting>
			</section>
			<section id="Criteria">
				<title>Criteria</title>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.addCriteria(
    new Criteria().andOperator(
        Criteria.where("field1").exists(true),
        Criteria.where("field1").ne(false)
    )
);

List<Foo> result = mongoTemplate.find(query, Foo.class);
System.out.println("query - " + query.toString());

for (Foo foo : result) {
    System.out.println("result - " + foo);
}			
			]]>
				</programlisting>
			</section>
			<section id="sort">
				<title>Sort</title>
				<para>按照年龄排序</para>
				<programlisting>
			<![CDATA[
Query query = new Query();
query.with(new Sort(Sort.Direction.ASC, "age"));
List<User> users = mongoTemplate.find(query,User.class);
			]]>
				</programlisting>
			</section>
			<section id="PageRequest">
				<title>Query + PageRequest</title>
				<programlisting>
			<![CDATA[
final Pageable pageableRequest = new PageRequest(0, 2);
Query query = new Query();
query.with(pageableRequest);
			]]>
				</programlisting>
			</section>
			<section id="newAggregation">
				<title>newAggregation</title>

				<programlisting>
			<![CDATA[
		MultilevelDirectSellingAccountRewardsSettlementDetails multilevelDirectSellingAccountRewardsSettlementDetails = new MultilevelDirectSellingAccountRewardsSettlementDetails();
		multilevelDirectSellingAccountRewardsSettlementDetails.setLoginname("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setPhone("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderLoginname("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderPhone("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderName("Neo");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderType("客户");
		multilevelDirectSellingAccountRewardsSettlementDetails.setAmount(5.02);
		multilevelDirectSellingAccountRewardsSettlementDetails.setCreatedDate(new Date());
		multilevelDirectSellingAccountRewardsSettlementDetailsRepository.save(multilevelDirectSellingAccountRewardsSettlementDetails);
		
		Date beginDate = this.getToday("00:00:00");
		Date endDate = this.getToday("23:59:59");
		log.info(beginDate.toString() + " ~ " + endDate.toString());
		
		GroupOperation groupOperation = group("loginname").sum("amount").as("amount");
		MatchOperation matchOperation = match(new Criteria("createdDate").gte(beginDate).lte(endDate));
		SortOperation sortOperation = sort(new Sort(Direction.ASC, "loginname"));

		Aggregation aggregation = newAggregation(matchOperation, groupOperation, sortOperation);
		AggregationResults<MultilevelDirectSellingAccountRewardsSettlementDetails> results = mongoTemplate.aggregate(aggregation, MultilevelDirectSellingAccountRewardsSettlementDetails.class, MultilevelDirectSellingAccountRewardsSettlementDetails.class);		
		System.out.println(results.getRawResults().get("result").toString());
			]]>
				</programlisting>
			</section>
		</section>
		<section id="indexOps">
			<title>indexOps</title>
			<programlisting>
			<![CDATA[
mongoOps.indexOps(User.class).ensureIndex(new Index().on("name", Direction.ASC));			
			]]>
			</programlisting>
		</section>
	</section>


</section>