<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="faq" ?>
	<title>FAQ</title>

	<section id="faq.Oracle10gDialect">
		<title>org.hibernate.dialect.Oracle10gDialect does not support
			identity key generation
		</title>
		<screen>
			<![CDATA[
@GeneratedValue(strategy=GenerationType.IDENTITY)
换成
@GeneratedValue(strategy=GenerationType.AUTO)

or

@Id
@Column(name = "ID")
@GeneratedValue(strategy=GenerationType.SEQUENCE, generator = "id_Sequence")
@SequenceGenerator(name = "id_Sequence", sequenceName = "ID_SEQ")
private int id;			
			]]>
		</screen>
	</section>
	<section id="No identifier specified for entity">
		<title>No identifier specified for entity</title>
		<para>在实体中使用</para>
		<screen>
		<![CDATA[
import javax.persistence.Id;
替换
import org.springframework.data.annotation.Id;		
		]]>
		</screen>
	</section>

	<section id="Could not read document: Invalid UTF-8 middle byte 0xd0">
		<title>Could not read document: Invalid UTF-8 middle byte 0xd0</title>
		<para>Spring 默认不支持 UTF-8</para>
		<screen>
		<![CDATA[
2016-08-17 16:04:53.148 WARN 7700 --- [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to read HTTP message:	org.springframework.http.converter.HttpMessageNotReadableException:Could not read document: Invalid UTF-8 middle byte 0xd0 at [Source: java.io.PushbackInputStream@33aa54cc; line: 1, column: 38](through reference chain: api.domain.oracle.Withdraw["bankname"]); nested exception is 	com.fasterxml.jackson.databind.JsonMappingException: Invalid UTF-8 middle byte 0xd0 at [Source: java.io.PushbackInputStream@33aa54cc; line: 1, column: 38]
			(through reference chain: api.domain.oracle.Withdraw["bankname"])
		]]>
		</screen>
		<para>解决方案 application.properties 配置文件中加入如下配置：</para>
		<screen>
			spring.messages.encoding=UTF-8
			server.tomcat.uri-encoding=UTF-8
			spring.http.encoding.charset=UTF-8
			spring.http.encoding.enabled=true
			spring.http.encoding.force=true
		</screen>
	</section>
	<section id="java.sql.SQLRecoverableException: IO Error: The Network Adapter
			could not establish the connection">
		<title>java.sql.SQLRecoverableException: IO Error: The Network Adapter
			could not establish the connection
		</title>
		<para>分析，Oracle 数据库无法连接，确认用户密码正确，日志提示 The Network Adapter could not
			establish the connection 看上去更像网络故障，同事还有下面两条日志。
		</para>
		<screen>
			Caused by: oracle.net.ns.NetException: The Network Adapter could not
			establish the connection
			Caused by: java.net.SocketTimeoutException: connect timed out
		</screen>
		<para>通过 ss 命令可以看到有tcp操作，可以排除不是网络故障。</para>
		<screen>
			[root@iZ62m7362hwZ ~]# ss -ant | grep 1521
			TIME-WAIT 0 0 47.90.18.24:45780 15.84.21.59:1521
		</screen>
		<para>检查你的用户名与密码是否含有特殊字符，特殊字符需要使用转义字符"\".</para>
		<screen>
			spring.datasource.url=jdbc:oracle:thin:neo/\[y7\$ghM\~3b@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=215.184.211.50)(PORT=1521))(LOAD_BALANCE=YES)(FAILOVER=ON)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=orcl)(FAILOVER_MODE=(TYPE=SESSION)(METHOD=BASIC))))
			#spring.datasource.username=neo
			#spring.datasource.password=[y7$ghM~3b
		</screen>
		<para>将用户名写入spring.datasource.url中，格式jdbc:oracle:thin:用户名/密码@(......)，禁用spring.datasource.username和spring.datasource.password两个配置项。
		</para>
	</section>
	<section>
		<title>Field javaMailSender in cn.netkiller.rest.EmailRestController
			required a bean of type
			'org.springframework.mail.javamail.JavaMailSender' that could not be
			found.
		</title>
		<para>启动提示 'org.springframework.mail.javamail.JavaMailSender' that
			could not be found 这句话很误导人。实际上是 (spring.mail.host) did not find
			property 'host'
		</para>
		<screen>
			***************************
			APPLICATION FAILED TO START
			***************************

			Description:

			Field javaMailSender in cn.netkiller.rest.EmailRestController required a
			bean of type 'org.springframework.mail.javamail.JavaMailSender' that
			could not be found.
			- Bean method 'mailSender' not loaded because AnyNestedCondition 0
			matched 2 did not; NestedCondition on
			MailSenderAutoConfiguration.MailSenderCondition.JndiNameProperty
			@ConditionalOnProperty (spring.mail.jndi-name) did not find property
			'jndi-name';
			NestedCondition on
			MailSenderAutoConfiguration.MailSenderCondition.HostProperty
			@ConditionalOnProperty (spring.mail.host) did not find property
			'host'


			Action:

			Consider revisiting the conditions above or defining a bean of type
			'org.springframework.mail.javamail.JavaMailSender' in your
			configuration.
		</screen>
		<para>解决方案，application.properties 增加 spring.mail.host=localhost</para>
	</section>
	<section>
		<title>org.postgresql.util.PSQLException: FATAL: no pg_hba.conf entry
			for host "172.16.0.3", user "test", database "test ", SSL off
		</title>
		<para>确认 pg_hba.conf 配置正确，并且 psql 可以正常链接，spring仍然报错</para>
		<screen>
			spring.datasource.url=jdbc:postgresql://47.90.18.244:5432/test
			spring.datasource.username=test
			spring.datasource.password=test
			spring.jpa.show-sql=true
			spring.jpa.hibernate.ddl-auto=create-drop
			spring.jpa.generate-ddl=true
		</screen>
		<para>请检查 jdbc:postgresql://47.90.18.244:5432/test
			后面test是否多了一个空格或者有特殊字符。删除test后面的空格可以解决
		</para>
	</section>
	<section>
		<title>Spring boot 怎样显示执行的SQL语句</title>
		<programlisting>
			<![CDATA[
spring.jpa.show-sql=true
			]]>
		</programlisting>
	</section>
	<section>
		<title>Cannot determine embedded database driver class for database
			type NONE
		</title>
		<para>错误如下</para>
		<screen>
			<![CDATA[
***************************
APPLICATION FAILED TO START
***************************

Description:

Cannot determine embedded database driver class for database type NONE

Action:

If you want an embedded database please put a supported one on the classpath. If you have database settings to be loaded from a particular profile you may need to active it (no profiles are currently active).
			
			]]>
		</screen>
		<para>背景：Maven 项目中并不包含任何与数据库有关的依赖。问题出在另一个公共包中如： common-version.jar
		</para>
		<para>解决方案：排除不需要的包</para>
		<screen>
			<![CDATA[
		<dependency>
			<groupId>cn.netkiller</groupId>
			<artifactId>common</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<exclusions>
				<exclusion>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-jpa</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jdbc</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
			]]>
		</screen>

	</section>
	<section>
		<title>Spring boot / Spring cloud 时区差8个小时</title>
		<para>经过检查：操作系统时区 CST，数据库是 SYSTEM，Spring boot 获取时间相差8个小时。</para>
		<para>分析：认为是 @JsonFormat 格式化造成的。</para>
		<para>解决方案：在 @JsonFormat 中增加时区设置。</para>
		<programlisting>
			<![CDATA[
	@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "Asia/Shanghai")
	public Date ctime;			
			]]>
		</programlisting>
		<para>期间尝试多种方式无效:</para>
		<literallayout>
			<![CDATA[
# 下面例子无效			
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.mvc.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8			

# 下面方法无效
spring.datasource.url=jdbc:mysql://119.29.241.95:3306/5kwords?useSSL=false&serverTimezone=UTC

# 下面配置仍然无效
spring.jpa.properties.jadira.usertype.autoRegisterUserTypes = true
spring.jpa.properties.jadira.usertype.javaZone=Asia/Shanghai
spring.jpa.properties.jadira.usertype.databaseZone=Asia/Shanghai
			]]>
		</literallayout>
		<para>根源在 Json 转化。</para>
		<para>完成的例子</para>
		<programlisting>
			<![CDATA[
package common.domain;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonFormat;

@Entity
@Table(name = "article", catalog = "cms")
public class Article implements Serializable {
	private static final long serialVersionUID = 7603772682950271321L;

	@Id
	public int id;
	public String title;
	@Column(name = "short")
	public String shortTitle;
	public String description;
	public String author;
	public String star;
	public String tags;
	public boolean status;
	public String content;
	public int typeId;
	public int siteId;

	@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "Asia/Shanghai")
	public Date ctime;

	@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "America/Phoenix")
	public Date mtime;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Date getCtime() {
		return ctime;
	}

	public void setCtime(Date ctime) {
		this.ctime = ctime;
	}

	public String getShortTitle() {
		return shortTitle;
	}

	public void setShortTitle(String shortTitle) {
		this.shortTitle = shortTitle;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public String getStar() {
		return star;
	}

	public void setStar(String star) {
		this.star = star;
	}

	public String getTags() {
		return tags;
	}

	public void setTags(String tags) {
		this.tags = tags;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public int getTypeId() {
		return typeId;
	}

	public void setTypeId(int typeId) {
		this.typeId = typeId;
	}

	public int getSiteId() {
		return siteId;
	}

	public void setSiteId(int siteId) {
		this.siteId = siteId;
	}

	public Date getMtime() {
		return mtime;
	}

	public void setMtime(Date mtime) {
		this.mtime = mtime;
	}

	@Override
	public String toString() {
		return "Article [id=" + id + ", title=" + title + ", shortTitle=" + shortTitle + ", description=" + description + ", author=" + author + ", star=" + star + ", tags=" + tags + ", status=" + status + ", content=" + content + ", typeId=" + typeId + ", siteId=" + siteId + ", ctime=" + ctime + ", mtime=" + mtime + "]";
	}

}

			]]>
		</programlisting>
	</section>
	<section>
		<title>@Value 取不到值</title>
		<para>在构造方法中引用@value为null，由于spring实例化顺序为先执行构造方法，再注入成员变量，所以取值为null。</para>
		<para>调用spring组件时使用new对象，而不是@Autowired。</para>
	</section>
	<section id="faq.springboot.2.1.0">
		<title>Spring boot 2.1.0</title>
		<para>application.properties 需要加入下面参数，否则 @Bean 不允许。</para>
		<screen>
		<![CDATA[
spring.main.allow-bean-definition-overriding=true		
		]]>
		</screen>
		<para>另外 MySQL驱动必须使用最新的 com.mysql.cj.jdbc.Driver</para>
	</section>
	<section>
		<title>Field authenticationManager in cn.netkiller.oauth2.config.AuthorizationServerConfigurer required a bean of type 'org.springframework.security.authentication.AuthenticationManager' that could not be found.</title>
		<screen>
		<![CDATA[
***************************
APPLICATION FAILED TO START
***************************

Description:

Field authenticationManager in cn.netkiller.oauth2.config.AuthorizationServerConfigurer required a bean of type 'org.springframework.security.authentication.AuthenticationManager' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'org.springframework.security.authentication.AuthenticationManager' in your configuration.		
		]]>
		</screen>
		<para>注入 @Bean @Override public AuthenticationManager authenticationManagerBean() 即可解决</para>
		<screen>
		<![CDATA[
package cn.netkiller.oauth2.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@EnableGlobalMethodSecurity(prePostEnabled = true)
@Configuration
@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {

	public WebSecurityConfigurer() {
		// TODO Auto-generated constructor stub
	}

	// 此处必须声明这个bean类，否则无法注入AuthenticationManager
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}

	protected void configure(HttpSecurity http) throws Exception {
		http.formLogin().and().authorizeRequests().anyRequest().authenticated().and().logout().permitAll().and().csrf().disable();
	}
}
		
		]]>
		</screen>
	</section>
	<section>
		<title>打印 Bean 信息</title>
		<programlisting>
		<![CDATA[
import java.util.Arrays;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
        return args -> {

            System.out.println("Let's inspect the beans provided by Spring Boot:");

            String[] beanNames = ctx.getBeanDefinitionNames();
            Arrays.sort(beanNames);
            for (String beanName : beanNames) {
                System.out.println(beanName);
            }

        };
    }

}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>The dependencies of some of the beans in the application context form a cycle</title>
		<para>@Service 中的 @Autowired 出现了相互注入，引起循环。</para>
		<screen>
			<![CDATA[
api    | ***************************
api    | APPLICATION FAILED TO START
api    | ***************************
api    | 
api    | Description:
api    | 
api    | The dependencies of some of the beans in the application context form a cycle:
api    | 
api    | ┌─────┐
api    | |  incarOrderFlowServiceImpl defined in URL [jar:file:/app/api.netkiller.cn.jar!/BOOT-INF/lib/api.netkiller.cn-1.0.0.jar!/com/zito/incar/service/impl/IncarOrderFlowServiceImpl.class]
api    | ↑     ↓
api    | |  incarOrderServiceImpl (field private cn.netkiller.service.IIncarAttachService cn.netkiller.service.impl.IncarOrderServiceImpl.iIncarAttachService)
api    | ↑     ↓
api    | |  incarAttachServiceImpl (field private cn.netkiller.service.IIncarOrderFlowService cn.netkiller.service.impl.IncarAttachServiceImpl.iIncarOrderFlowService)
api    | └─────┘
			]]>
		</screen>
		<para>解决方案</para>
		<para>增加 @Lazy 注解</para>
		<screen>
			<![CDATA[
@Slf4j
@Service
@Lazy
public class IncarOrderFlowServiceImpl implements IIncarOrderFlowService {

	@Autowired
	private ISysRoleService iSysRoleService;

	@Autowired
	private  IIncarOrderService iIncarOrderService;	
	...
	...
	...
}	
			]]>
		</screen>
	</section>
	<section>
		<title>no main manifest attribute, in /srv/job-admin.jar</title>
		<para></para>
		<screen>
		<![CDATA[
[root@localhost cloud.netkiller.cn]# java -jar job-admin.jar 
no main manifest attribute, in job-admin.jar		
		]]>
		</screen>
		<para>解压 jar 包，查看 META-INF/MANIFEST.MF 文件</para>
		<screen>
		<![CDATA[
[root@localhost ~]# unzip job-admin.jar		
[root@localhost ~]# cat META-INF/MANIFEST.MF 
Manifest-Version: 1.0
Archiver-Version: Plexus Archiver
Built-By: gitlab-runner
Created-By: Apache Maven 3.8.4
Build-Jdk: 1.8.0_312		
		]]>
		</screen>
		<para>解决方法，pom.xml 中增加 repackage 配置项</para>
		<screen>
		<![CDATA[
		<plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
		]]>
		</screen>
		<para>重新打包，再解压开查看 MANIFEST.MF 文件</para>
		<screen>
		<![CDATA[
[root@localhost ~]# cat META-INF/MANIFEST.MF 
Manifest-Version: 1.0
Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx
Archiver-Version: Plexus Archiver
Built-By: gitlab-runner
Spring-Boot-Layers-Index: BOOT-INF/layers.idx
Start-Class: cn.netkiller.admin.Application
Spring-Boot-Classes: BOOT-INF/classes/
Spring-Boot-Lib: BOOT-INF/lib/
Spring-Boot-Version: 2.6.2
Created-By: Apache Maven 3.8.4
Build-Jdk: 1.8.0_312
Main-Class: org.springframework.boot.loader.JarLauncher		
		]]>
		</screen>
	</section>
</chapter>