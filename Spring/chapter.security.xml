<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="security" ?>
	<title>Spring Security</title>
	<section>
		<title>配置 Spring Security</title>
		<section>
			<title>默认配置</title>
			<para>如果在 maven 中引入了 spring security当你启动 springboot 的时候会提示</para>
			<screen>
			<![CDATA[
Using generated security password: 1cd27b90-1208-4be2-ae8e-0f564ee427b8			
			]]>
			</screen>
			<para>默认用户名是 user 可以这样访问</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % curl -s http://user:1cd27b90-1208-4be2-ae8e-0f564ee427b8@localhost:8080/member/json
{"status":false,"reason":"","code":0,"data":{}} 			
			]]>
			</screen>
		</section>
		<section>
			<title>设置用户名和密码</title>
			<programlisting>
			<![CDATA[
spring.security.user.name=test
spring.security.user.password=test
spring.security.user.role=USER		
			]]>
			</programlisting>
			<para>注意 Springboot 1.x</para>
			<programlisting>
			<![CDATA[
security.user.name=test
security.user.password=passw0rdf
security.user.role=USER
			]]>
			</programlisting>
		</section>
		<section>
			<title>禁用 Security</title>
			<para>方法一</para>
			<screen>
			<![CDATA[
@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })
public class Application {
	public static void main(String[] args) {
		System.out.println("Web Starting...");
		SpringApplication.run(Application.class, args);
	}
}
			]]>
			</screen>
			<para>Springboot 1.x 可以在 appliction.properties 中加入</para>
			<programlisting>
			<![CDATA[
security.basic.enabled=false			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="EnableWebSecurity">
		<title>EnableWebSecurity</title>
		<programlisting>
			<![CDATA[
package cn.netkiller.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	public WebSecurityConfig() {
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http
	        .authorizeRequests()
	            .antMatchers("/", "/about.html", "/doc/**").permitAll()
	            .anyRequest().authenticated()
	            .and()
	        .formLogin()
	            .loginPage("/login.html")
	            .permitAll()
	            .and()
	        .logout()
	            .permitAll();
           
	}
	
	@Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .inMemoryAuthentication()
                .withUser("user").password("password").roles("USER")
                .and()
                .withUser("admin").password("admin").roles("ADMIN");

    }
}
			]]>
		</programlisting>
	</section>
	<section id="HttpSecurity">
		<title>访问控制列表（Access Control List，ACL）</title>

		<section id="antMatchers">
			<title>antMatchers</title>
			<para>/** 表示放行所有请求URL</para>
			<programlisting>
			<![CDATA[
http.authorizeRequests().antMatchers("/**" ).permitAll();		
			]]>
			</programlisting>
			<para>匹配精确的URL地址 "/","/products","/product/show/*","/css/**" </para>
			<programlisting>
			<![CDATA[
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
    httpSecurity
            .authorizeRequests().antMatchers("/","/products","/product/show/*","/css/**").permitAll()
            .anyRequest().authenticated()
            .and()
            .formLogin().loginPage("/login").permitAll()
            .and()
            .logout().permitAll();
 
   httpSecurity.csrf().disable();
   httpSecurity.headers().frameOptions().disable();
}			
			]]>
			</programlisting>
		</section>
		<section id="httpBasic">
			<title>HTTP Auth</title>
			<programlisting>
			<![CDATA[
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/ping","/v1/*/ping","/v1/public/**" ).permitAll()
		.anyRequest().authenticated()
		.and().rememberMe().and().httpBasic()
		.and().csrf().disable();
	}
			]]>
			</programlisting>
		</section>
		<section id="HttpMethod">
			<title>Rest</title>
			<programlisting>
			<![CDATA[
protected void configure(HttpSecurity http) throws Exception {
    http
      .csrf().disable()
      .authorizeRequests()
        .antMatchers(HttpMethod.POST, "/api/**").authenticated()
        .antMatchers(HttpMethod.PUT, "/api/**").authenticated()
        .antMatchers(HttpMethod.DELETE, "/api/**").authenticated()
        .anyRequest().permitAll()
        .and()
      .httpBasic().and()
      .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
}
			]]>
			</programlisting>
		</section>
		<section id="hasRole">
			<title>hasRole</title>
			<programlisting>
			<![CDATA[
		
    @Override
    protected void configure(HttpSecurity http) throws Exception {
       
      http.authorizeRequests()
        .antMatchers("/", "/member").access("hasRole('USER') or hasRole('ADMIN') or hasRole('DBA')")
        .and().formLogin().loginPage("/login")
        .usernameParameter("sso").passwordParameter("password")
        .and().exceptionHandling().accessDeniedPage("/403");
    }
			]]>
			</programlisting>
		</section>
		<section id="hasAnyRole">
			<title>hasAnyRole()</title>
			<programlisting>
			<![CDATA[
 	@Autowired
    private AccessDeniedHandler accessDeniedHandler;
    			
	@Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable()
                .authorizeRequests()
					.antMatchers("/", "/home", "/about").permitAll()
					.antMatchers("/admin/**").hasAnyRole("ADMIN")
					.antMatchers("/user/**").hasAnyRole("USER")
					.anyRequest().authenticated()
                .and()
                .formLogin()
					.loginPage("/login")
					.permitAll()
					.and()
                .logout()
					.permitAll()
					.and()
                .exceptionHandling().accessDeniedHandler(accessDeniedHandler);
    }			
			]]>
			</programlisting>
		</section>
		<section id="frameOptions">
			<title>X-Frame-Options 安全</title>
			<para>X-Frame-Options: SAMEORIGIN</para>
			<programlisting>
		<![CDATA[
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
			// ...
			.headers()
				.frameOptions().sameOrigin()
				.httpStrictTransportSecurity().disable();
	}
}		
		]]>
			</programlisting>

			<para>安全配置 X-FRAME-OPTIONS 指定允许iframe访问的域名</para>
			<programlisting>
		<![CDATA[
package cn.netkiller.api.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.header.writers.StaticHeadersWriter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.headers().frameOptions().disable().addHeaderWriter(new StaticHeadersWriter("X-FRAME-OPTIONS", "ALLOW-FROM netkiller.cn")).and().
			csrf().disable()
			.authorizeRequests()
			.antMatchers("/","/ping","/v1/*/ping","/public/**","/your/**" ).permitAll()
			.antMatchers("/v1/**").authenticated().
			anyRequest().permitAll().and().
			httpBasic();
	}

}
		]]>
			</programlisting>
		</section>

	</section>

	<section id="WebSecurity">
		<title>WebSecurity</title>
		<para>用于Web静态资源的权限控制</para>
		<programlisting>
			<![CDATA[
package com.example.api.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {

	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/static/**", "/**/*.jsp");
	}

	protected void registerAuthentication(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("user1").password("secret1").roles("USER").and().withUser("user2").password("secret2").roles("USER").and().withUser("admin").password("secret").roles("ADMIN");
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().anyRequest().fullyAuthenticated();
		http.httpBasic();
		http.csrf().disable();
	}

}
			]]>
		</programlisting>
		<para>启动 Springboot 可以看到类似日志</para>
		<screen>
		<![CDATA[
2018-10-12 18:01:40.692  INFO 4722 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: Ant [pattern='/**/json'], []
2018-10-12 18:01:40.692  INFO 4722 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: Ant [pattern='/about'], []
2018-10-12 18:01:40.692  INFO 4722 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: Ant [pattern='/test/hello'], []
2018-10-12 18:01:40.693  INFO 4722 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: Ant [pattern='/web/**'], []		
		]]>
		</screen>
		<section>
			<title>正则匹配</title>
			<programlisting>
			<![CDATA[
@Override
public void configure(WebSecurity web) throws Exception {
    web.ignoring().regexMatchers(XXXXX);
}			
			]]>
			</programlisting>
		</section>
	</section>

	<section id="AuthenticationManagerBuilder">
		<title>AuthenticationManagerBuilder</title>
		<section>
			<title>添加用户</title>
			<programlisting>
			<![CDATA[
	@Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .inMemoryAuthentication()
                .withUser("user").password("password").roles("USER");

    }
			]]>
			</programlisting>

		</section>

		<section id="withUser">
			<title>添加多个用户，并指定角色</title>

			<para>添加多个用户</para>

			<programlisting>
			<![CDATA[
	@Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {

        auth.inMemoryAuthentication()
                .withUser("user").password("password").roles("USER")
                .and()
                .withUser("admin").password("password").roles("ADMIN");
    }		
			]]>
			</programlisting>

			<programlisting>
			<![CDATA[
	
	@Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .inMemoryAuthentication()
                .withUser("user").password("password").roles("USER")
                .and()
                .withUser("admin").password("admin").roles("ADMIN")
                .and()
                .withUser("admin").password("super").roles("ADMIN","SYS","DBA")
                ;
    }
			]]>
			</programlisting>
		</section>
	</section>

	<section id="getAuthentication">
		<title>获取当前用户</title>
		<programlisting>
		<![CDATA[
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
String currentPrincipalName = authentication.getName();
		]]>
		</programlisting>
	</section>
	
</chapter>	