<?xml version="1.0" encoding="UTF-8"?>
<section id="webflux.webclient">
	<title>WebClient</title>
	<screen>
	<![CDATA[
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-webflux</artifactId>
</dependency>	
	]]>
	</screen>
	<section>
		<title>配置 WebClient</title>
		<programlisting>
			<![CDATA[
@Configuration
public class WebConfig {

  @Bean
  public WebClient webClient() {

    WebClient webClient = WebClient.builder()
      .baseUrl("http://localhost:8080")
      .defaultCookie("cookie-name", "cookie-value")
      .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
      .build();
  }
}			
			]]>
		</programlisting>
		<para>超时设置</para>
		<programlisting>
		<![CDATA[
HttpClient httpClient = HttpClient.create()
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 60000)
                .responseTimeout(Duration.ofSeconds(60))
                .doOnConnected(conn -> conn
                        .addHandler(new ReadTimeoutHandler(60, TimeUnit.SECONDS))
                        .addHandler(new WriteTimeoutHandler(60, TimeUnit.SECONDS))
                );
        WebClient client = WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .baseUrl(url)
                .build();
		]]>
		</programlisting>
	</section>
	<section>
		<title>@Controller/@RestController 实例</title>

		<programlisting>
		<![CDATA[
    @GetMapping("webclient")
    public Mono<String> webclient() {
        WebClient webClient = WebClient.create("http://localhost:8080");
        Mono<String> response = webClient
                .get().uri("/mock/mono")
                .retrieve()
                .bodyToMono(String.class);
        response.subscribe(System.out::println);
        return response;
    }
		]]>
		</programlisting>
		<para>会返结果</para>
		<programlisting>
			<![CDATA[
public Mono<ResponseEntity<Employee>> createEmployee(Employee newEmployee) {

  return webClient.post()
    .uri("/employees")
    .contentType(MediaType.APPLICATION_JSON)
    .bodyValue(newEmployee)
    .retrieve()
    .toEntity(Employee.class);
}



@PostMapping("/create")
public Mono<ResponseEntity<?>> createEmployee(@RequestBody Employee newEmployee) {

  return employeeService.createEmployee(newEmployee)
    .map(responseEntity -> {
      if (responseEntity.getStatusCode().is2xxSuccessful()) {
        return ResponseEntity.ok(responseEntity.getBody());
      } else {
        return ResponseEntity.status(responseEntity.getStatusCode())
          .body("Failed to create employee");
      }
    })
    .onErrorResume(exception -> {
      return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
        .body("Internal Server Error: " + exception.getMessage()));
    });
}			
			]]>
		</programlisting>
	</section>
	<section id="webclient.get">
		<title>Get 请求实例</title>
		<programlisting>
		<![CDATA[
WebClient.create("http://localhost:8080")
    .get()
    .uri("/students")
    .retrieve()
    .bodyToFlux(Student.class);		
			]]>
		</programlisting>
	</section>
	<section id="webclient.uri">
		<title>URI 参数</title>
		<para>字符串拼接方式</para>
		<programlisting>
			<![CDATA[
WebClient.create("http://localhost:8080")
    .get()
    .uri("/students/" + studentId)
    .retrieve()
    .bodyToMono(Student.class);
			]]>
		</programlisting>
		<para>通过 uriBuilder 组装 Uri 参数</para>
		<programlisting>
			<![CDATA[
String endpoint = "/employees";
        
UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromPath(endpoint)
    .queryParam("param1", "value1")
    .queryParam("param2", "value2");

webClient.post()
        .uri(uriBuilder.build().toUri())
        .bodyValue(new Employee(...))
        .retrieve()
        .bodyToMono(Employee.class);
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -> uriBuilder
        .path("/student/{studentId}")
        .build(studentId))
    .retrieve()
    .bodyToMono(Student.class);		
    
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -> uriBuilder
        .path("/student/{studentId}/assignments/{assignmentId}")
        .build(studentId, assignmentId))
    .retrieve()
    .bodyToMono(Student.class);
			]]>
		</programlisting>
		<para>uriTemplate 组装 Uri 参数</para>
		<programlisting>
			<![CDATA[
UriTemplate uriTemplate = new UriTemplate(
    "/student/{studentId}/assignments/{assignmentId}");

WebClient.create("http://localhost:8080")
    .get()
    .uri(uriTemplate.expand(studentId, assignmentId))
    .retrieve()
    .bodyToMono(Student.class);			
			]]>
		</programlisting>
	</section>
	<section id="webclient.query">
		<title>查询参数</title>
		<para>http://localhost:8080/students?firstName=Jon&amp;year=1996
		</para>
		<programlisting>
			<![CDATA[
String firstName = "Jon";
String year = "1996";

WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -> uriBuilder.path("/students")
        .queryParam("firstName", firstName)
        .queryParam("year", year)
        .build())
    .retrieve()
    .bodyToMono(Student.class);			
			]]>
		</programlisting>
		<para>http://localhost:8080/students?year=1995,1996,1997</para>
		<programlisting>
			<![CDATA[
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -> uriBuilder.path("/students")
        .queryParam("year", String.join(",", "1995", "1996", "1997"))
        .build())
    .retrieve()
    .bodyToMono(Student.class);			
			]]>
		</programlisting>
		<para><![CDATA["/products/?category=Phones&category=Tablets"]]></para>
		<programlisting>
			<![CDATA[
webClient.get()
  .uri(uriBuilder - > uriBuilder
    .path("/products/")
    .queryParam("category", "Phones", "Tablets")
    .build())
  .retrieve()
  .bodyToMono(String.class)
  .onErrorResume(e -> Mono.empty())
  .block();			
			]]>
		</programlisting>
	</section>
	<section id="webclient.post">
		<title>Post 操作演示</title>
		<programlisting>
			<![CDATA[
Employee newEmployee = ...;  //Create a new employee object
			
webClient.post()
  .uri("/employees")
  .bodyValue(BodyInserters.fromValue(newEmployee))
  .retrieve()
  .toEntity(Employee.class)   //Change here
  .subscribe(
    responseEntity -> {
      // Handle success response here
      HttpStatusCode status = responseEntity.getStatusCode();
      URI location = responseEntity.getHeaders().getLocation();
      Employee createdEmployee = responseEntity.getBody();    // Response body
      // handle response as necessary
    },
    error -> {
      // Handle the error here
      if (error instanceof WebClientResponseException) {
        WebClientResponseException ex = (WebClientResponseException) error;
        HttpStatusCode status = ex.getStatusCode();
        System.out.println("Error Status Code: " + status.value());
        //...
      } else {
        // Handle other types of errors
        System.err.println("An unexpected error occurred: " + error.getMessage());
      }
    }
  );			
			]]>
		</programlisting>
	</section>
	<section id="webclient.post.form">
		<title>Post 表单数据</title>
		<programlisting>
			<![CDATA[
@Service
public class EmployeeService {

  private final WebClient webClient;

  @Autowired
  public EmployeeService(WebClient webClient) {
      this.webClient = webClient;
  }

  public Mono<Employee> createEmployee(Map<String, String> formParams) {
    return webClient.post()
      .uri("/employees")
      .body(BodyInserters.fromFormData("id", formParams.get("id"))
        .with("name", formParams.get("name"))
        .with("status", formParams.get("status")))
      .retrieve()
      .onStatus(HttpStatus::is4xxClientError, clientResponse -> {
          // Handle 4xx client errors here
      })
      .onStatus(HttpStatus::is5xxServerError, clientResponse -> {
          // Handle 5xx server errors here
      })
      .toEntity(Employee.class)
      .flatMap(responseEntity -> Mono.justOrEmpty(responseEntity.getBody()));
  }
}			
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[
        WebClient client = WebClient.create("https://www.netkiller.cn");
        FormInserter formInserter = fromMultipartData("name","neo")
                .with("age",19)
                .with("map",ImmutableMap.of("sex","F"))
                .with("file",new File("/tmp/netkiler.doc"));
        Mono<String> result = client.post()
                .uri("/article/index/{id}.html", 256)
                .contentType(MediaType.APPLICATION_JSON)
                .body(formInserter)
                //.bodyValue(ImmutableMap.of("name","neo"))
                .retrieve()
                .bodyToMono(String.class);
        result.subscribe(System.err::println);			
			]]>
		</programlisting>
		<programlisting>
		<![CDATA[
@RestController
public class HelloController {
 
    // 创建 WebClient 对象
    private WebClient webClient = WebClient.builder()
            .baseUrl("https://www.netkiller.cn/article")
            .build();
 
    @GetMapping("/test")
    public void test() {
        //提交参数设置
        MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
        map.add("title", "linux 手札");
        map.add("body", "测试");
 
        // 发送请求
        Mono<String> mono = webClient
                .post() // POST 请求
                .uri("/posts")  // 请求路径
                .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                .body(BodyInserters.fromFormData(map))
                .retrieve() // 获取响应体
                .bodyToMono(String.class); //响应数据类型转换
 
        // 输出结果
        System.out.println(mono.block());
        return;
    }
}
		]]>
		</programlisting>
	</section>
	<section id="webclient.post.multipart">
		<title>上传文件</title>
		<programlisting>
			<![CDATA[
MultipartBodyBuilder builder = new MultipartBodyBuilder();

builder.part("file", new FileSystemResource("/tmp/file.txt"));
builder.part("id", "190001", MediaType.TEXT_PLAIN);
builder.part("name", "Lokesh", MediaType.TEXT_PLAIN);
builder.part("status", "active", MediaType.TEXT_PLAIN);

Then we can submit the multipart form data by using the method BodyInserters.fromMultipartData(builder.build()) and send a normal request as in the previous examples.

webClient.post()
    .uri("/employees")
    .contentType(MediaType.MULTIPART_FORM_DATA)
    .body(BodyInserters.fromMultipartData(builder.build()))
    .retrieve()
    .toEntity(Employee.class)
    .doOnError(WriteTimeoutException.class, ex -> {
      System.err.println("WriteTimeout");
    })
    .subscribe(responseEntity -> {
      System.out.println("Status: " + responseEntity.getStatusCode().value());
      System.out.println("Location URI: " + responseEntity.getHeaders().getLocation().toString());
      System.out.println("Created New Employee : " + responseEntity.getBody());
    });			
			]]>
		</programlisting>
	</section>
	<section id="webclient.header">
		<title>设置 HTTP 头</title>
		<programlisting>
			<![CDATA[
webClient.get()
    .uri("/employees")
    .bodyValue(new Employee(...))
    .header("Authorization", "Bearer auth-token")
    .header("User-Agent", "Mobile App 1.0")
    .retrieve()			
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[
	WebClient.builder()
        .defaultCookie("session","f1d83210-0fc9-4689-82ab-05df70da3367")
        .defaultUriVariables(ImmutableMap.of("name","kl"))
        .defaultHeader("header","neo")
        .defaultHeaders(httpHeaders -> {
            httpHeaders.add("header1","neo");
            httpHeaders.add("header2","chen");
        })
        .defaultCookies(cookie ->{
            cookie.add("cookie1","neo");
            cookie.add("cookie2","netkiller");
        })
        .baseUrl("https://www.netkiller.cn")
        .build();			
			]]>
		</programlisting>
		<para>If-None-Match、If-Modified-Since</para>
		<programlisting>
		<![CDATA[
            Mono<String> mono = webClient
                    .get() // GET 请求
                    .uri("/")  // 请求路径
                    .header("Authorization", "Basic ".concat(authorization))
                    .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    .accept(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)
                    .acceptCharset(StandardCharsets.UTF_8)
                    .ifNoneMatch("*")
                    .ifModifiedSince(ZonedDateTime.now())
                    .retrieve() // 获取响应体
                    .bodyToMono(String.class); //响应数据类型转换		
		]]>
		</programlisting>
	</section>
	<section id="webclient.block">
		<title>同步阻塞等待返回结果</title>
		<programlisting>
		<![CDATA[
        WebClient webClient = WebClient.create("https://www.netkiller.cn");

        Mono<String> mono = webClient
                .get() // GET 请求
                .uri("/spring/index.html")  // 请求路径
                .retrieve() // 获取响应体
                .bodyToMono(String.class); //响应数据类型转换

        System.out.println(mono.block());		
		]]>
		</programlisting>
		<section id="block">
			<title>同步阻塞等待结果</title>
			<para>在同步模式下使用WebClient</para>
			<programlisting>
			<![CDATA[
 WebClient client =  WebClient.create("http://www.netkiller.cn");
      String result = client .get()
                .uri("/article/index/arcid/{id}.html", 256)
                .retrieve()
                .bodyToMono(String.class)
                .block();
        System.err.println(result);			
			]]>
			</programlisting>

			<programlisting>
		<![CDATA[

Person person = client.get().uri("/person/{id}", i).retrieve()
    .bodyToMono(Person.class)
    .block();

List<Person> persons = client.get().uri("/persons").retrieve()
    .bodyToFlux(Person.class)
    .collectList()
    .block();
		
		]]>
			</programlisting>
			<para>避免单独阻塞每个同步响应</para>
			<programlisting>
			<![CDATA[
      WebClient client =  WebClient.create("http://www.netkiller.cn");
        Mono<String> result1Mono = client .get()
                .uri("/article/index/arcid/{id}.html", 255)
                .retrieve()
                .bodyToMono(String.class);
        Mono<String> result2Mono = client .get()
                .uri("/article/index/arcid/{id}.html", 254)
                .retrieve()
                .bodyToMono(String.class);
        Map<String,String>  map = Mono.zip(result1Mono, result2Mono, (result1, result2) -> {
            Map<String, String> map = new HashMap<>();
            arrayList.put("result1", result1);
            arrayList.put("result2", result2);
            return map;
        }).block();
        System.err.println(map.toString());		
        
		Mono<Person> personMono = client.get().uri("/person/{id}", personId)
		        .retrieve().bodyToMono(Person.class);
		
		Mono<List<Hobby>> hobbiesMono = client.get().uri("/person/{id}/hobbies", personId)
		        .retrieve().bodyToFlux(Hobby.class).collectList();
		
		Map<String, Object> data = Mono.zip(personMono, hobbiesMono, (person, hobbies) -> {
		            Map<String, String> map = new LinkedHashMap<>();
		            map.put("person", person);
		            map.put("hobbies", hobbies);
		            return map;
		        })
		        .block();

			]]>
			</programlisting>
		</section>
	</section>
	<section id="webclient.websocket">
		<title>websocket</title>
		<programlisting>
			<![CDATA[
WebSocketClient client = new ReactorNettyWebSocketClient();
URI url = new URI("ws://localhost:8080/path");
client.execute(url, session ->
        session.receive()
                .doOnNext(System.out::println)
                .then());			
			]]>
		</programlisting>
	</section>

	<section id="webclient.httpstatus">
		<title>获取 HTTP 链接状态</title>
		<programlisting>
		<![CDATA[
			WebClient webClient = WebClient.create("https://www.netkiller.cn");
            Mono<ClientResponse> mono = webClient
                    .get() 
                    .uri("/spring/index.html")
                    .acceptCharset(StandardCharsets.UTF_8)
                    .exchange();

            // 获取完整的响应对象
            ClientResponse response = mono.block();
            
            HttpStatus statusCode = (HttpStatus) response.statusCode(); // 获取响应码
            MultiValueMap<String, ResponseCookie> cookies = response.cookies();
            ClientResponse.Headers headers = response.headers(); // 获取响应头

            // 获取响应体
            Mono<String> resultMono = response.bodyToMono(String.class);
            String body = resultMono.block();

            // 输出结果
            System.out.println("HttpStatus：" + statusCode);
            System.out.println("Cookie：" + cookies.toString());
            System.out.println("Headers：" + headers.asHttpHeaders());
            System.out.println("body：" + body);		
		]]>
		</programlisting>
	</section>
	<section id="webclient.auth">
		<title>Http Base Authentication - 401 Unauthorized</title>
		<para></para>
		<programlisting>
		<![CDATA[
			WebClient client = WebClient.builder()
                    .baseUrl("https://www.netkiller.cn")
                    .defaultHeaders(httpHeaders -> httpHeaders.setBasicAuth("admin", "uPQKFe98bIwZCzgVGjbIQRyRyyecW2Ha"))
//                    .defaultHeaders(httpHeaders -> httpHeaders.setBearerAuth("<bearer token>"))
                    .build();

            Mono<String> response = client.get().uri("/")
                    .retrieve().bodyToMono(String.class);

            log.info(response.block());		
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
            WebClient webClient = WebClient.create("https://www.netkiller.cn");
            final String flux = webClient.get()
                    .uri("/")
                    .headers(httpHeaders -> httpHeaders.setBasicAuth("admin", "uPQKFyRyyecbIwZCzgVGjbW2e98IQRHa"))
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();
            System.out.println(flux);		
		]]>
		</programlisting>

		<para>ExchangeFilterFunctions 方案</para>
		<programlisting>
		<![CDATA[
 		WebClient client = WebClient.builder()
                    .baseUrl("https://www.netkiller.cn")
                    .filter(ExchangeFilterFunctions.basicAuthentication("admin", "uPQcbIwZKFe98IGjbW2QRyRyyeCzgVHa"))
                    .build();

            Mono<String> response = client.get().uri("/")
                    .retrieve().bodyToMono(String.class);
            log.info(response.block());		
		]]>
		</programlisting>
	</section>
	<section id="webclient.sse">
		<title>SSE（Server-Sent Events）</title>
		<section>
			<title>订阅 SSE</title>
		<programlisting>
		<![CDATA[
public void consumeServerSentEvent() {
    WebClient client = WebClient.create("https://www.netkiller.cn:8080/sse/server");
    ParameterizedTypeReference<ServerSentEvent<String>> type
     = new ParameterizedTypeReference<ServerSentEvent<String>>() {};

    Flux<ServerSentEvent<String>> eventStream = client.get()
      .uri("/stream")
      .retrieve()
      .bodyToFlux(type);

    eventStream.subscribe(
      content -> logger.info("Time: {} - event: name[{}], id [{}], content[{}] ",
        LocalTime.now(), content.event(), content.id(), content.data()),
      error -> logger.error("Error receiving SSE: {}", error),
      () -> logger.info("Completed!!!"));
}		
		]]>
		</programlisting>
		<para>同步阻塞等待 SSE 执行完成</para>
		<programlisting>
		<![CDATA[
        List<String> posts = eventStream.collectList().block();
        log.info("结果数：{}, {}" , posts.size(),posts.toString());		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
public Flux<String> stream(String prompt) {
        String format = "请帮我写一篇《%s》故事。";
        String content = String.format(format, prompt);
        WebClient client = WebClient.create(url);
        Flux<String> flux = client.get()
                .uri("/chatgpt/stream?content={content}", content)
                .headers(httpHeaders -> httpHeaders.setBasicAuth(username, password))
                .retrieve()
                .bodyToFlux(String.class);
//                .map(content -> {
//                    log.info("data: {}", content);
//                    return content;
//                });
        return flux;
    }

    public Flux<String> streamSentence(String prompt, Callback1 callback) {
        //        Set<String> symbol = Set.of(",", ".", "!", "?", "，", "。", "！", "？");
        Set<String> symbol = Set.of(".", "!", "?", "。", "！", "？");

        return Flux.create(sink -> {
            StringBuffer word = new StringBuffer();
            List<String> sentence = new ArrayList<String>();
            Flux<String> flux = this.stream(prompt);
//            ParallelFlux<String> flux = stream.parallel(5).runOn(Schedulers.parallel());
            flux.subscribe(
                    content -> {
                        word.append(content);
                        boolean contains = symbol.stream().anyMatch(content::contains);
                        if (contains) {
                            sentence.add(word.toString());
//                            new Thread(() -> {
                            sink.next(word.toString());
//                            }).start();
                            log.debug("sentence: {}", sentence.get(sentence.size() - 1));
                            word.setLength(0);
                        }
//                    log.info("word: {}", content);
                    },
                    error -> log.error("Error receiving SSE: {}", error),
                    () -> {
                        sink.complete();
                        sentence.add(word.toString());
                        String segment = String.join("", sentence);
                        log.info("Story: {}", segment);
                        if (callback != null) {
                            callback.onCallback(segment);
                        }
                    });
        });
    }		
		]]>
		</programlisting>
		
		</section>
		<section>
			<title>SSE（Server-Sent Events） 传输空格和回车问题</title>
			<para>服务端</para>
			<programlisting>
			<![CDATA[
public Flux<String> deepseek(String device, String taskId, String speakId, List<Map<String, String>> messages) {

        WebClient webClient = WebClient.builder()
                .baseUrl(url)
                .defaultHeader("Content-Type", "application/json")
                .defaultHeader("Authorization", "Bearer " + authorization)
                .build();

//        List<Map<String, String>> messages = new ArrayList<Map<String, String>>();
//        messages.add(Map.of("role", "user", "content", content));

        log.debug(messages.toString());

        Map<String, Object> requestBody = Map.of(
                "model", model,
                "messages", messages,
                "stream", true
        );

        return webClient.post()
                .uri("/chat/completions")
                .bodyValue(requestBody)
                .accept(MediaType.TEXT_EVENT_STREAM)
                .retrieve()
                .bodyToFlux(String.class)
//                .filter(chunk -> !chunk.trim().isEmpty())
                .map(chunk -> {
//                    if (chunk.trim().equals("data: [DONE]")) {
//                        return "[END]";
//                    }
                    try {
//                        log.debug("chunk: " + chunk);
                        String jsonString = chunk.replaceFirst("^data: ", "");
                        JsonNode jsonNode = new ObjectMapper().readTree(jsonString);
                        String result = jsonNode.path("choices").path(0).path("delta").path("content").asText();
                        result = result.replace(" ", "\\x20").replace("\n", "\\x0A");
//                        return result != null ? result : "";
                        log.debug("[" + result + "]");
                        return result;
                    } catch (JsonProcessingException e) {
                        return "";
                    }
                })
//                .filter(text -> text != null && !text.equals("null") && !text.isEmpty())
                .onErrorResume(e -> {
                    log.error("Error processing stream", e);
                    return Flux.just("[ERROR]");
                });
    }			
			]]>
			</programlisting>
			<para>解决方案</para>
			<programlisting>
			<![CDATA[
# 传输前
result = result.replace(" ", "\\x20").replace("\n", "\\x0A");

# 接收端

String text = data.replace("\\x20", " ").replace("\\x0A", "\n"); 			
			]]>
			</programlisting>
			<para>客户端</para>
			<programlisting>
			<![CDATA[
    public void summary(Map<String, String> messages, BiConsumer<String, String> biConsumer) throws InterruptedException {

        String jsonString = gson.toJson(messages);

        httpRestful.postStream("meeting/" + Config.Cloud.appId + "/" + Config.Android.androidId + "/summary", null, jsonString, new EventSourceListener() {
            @Override
            public void onClosed(@NonNull EventSource eventSource) {
                super.onClosed(eventSource);
                biConsumer.accept("onClosed", "");
            }

            @Override
            public void onEvent(@NonNull EventSource eventSource, @Nullable String id, @Nullable String type, @NonNull String data) {
                super.onEvent(eventSource, id, type, data);
                Log.d(TAG, "Stream Id: " + id + " Type: " + type + " Data: [" + data + "]");   // 请求到的数据
                String text = data.replace("\\x20", " ").replace("\\x0A", "\n");
                biConsumer.accept(type, text);
            }

            @Override
            public void onFailure(@NonNull EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {
                super.onFailure(eventSource, t, response);
                networkFailure();
                Log.w(TAG, "Throwable: " + t + " Response: " + response);
            }

            @Override
            public void onOpen(@NonNull EventSource eventSource, @NonNull Response response) {
                super.onOpen(eventSource, response);
                biConsumer.accept("onOpen", "");
            }
        });

    }			
			]]>
			</programlisting>
		</section>	
	</section>

	<section id="webclient.timeout">
		<title>超时时间</title>
		<programlisting>
		<![CDATA[
webClient.get()
  .uri("https://www.netkiller.cn/index.html")
  .retrieve()
  .bodyToFlux(JsonNode.class)
  .timeout(Duration.ofSeconds(5));
		]]>
		</programlisting>
	</section>
	<section id="webclient.share">
		<title>share() 共享订阅数据</title>
		<para>WebClient 只能被订阅一次，如果你尝试多次订阅，就是重复请求</para>
		<programlisting>
		<![CDATA[
		WebClient client = WebClient.create(url);
        Flux<String> flux = client.get()
                .uri("/chatgpt/stream/sentence?content={content}&symbol=。", content)
                .headers(httpHeaders -> httpHeaders.setBasicAuth(username, password))
                .retrieve()
                .bodyToFlux(String.class)
        flux.subscribe(
                value -> {
                    log.warn(value);
                });
        flux.subscribe(System.out::println);
        flux.subscribe(System.out::println);
		]]>
		</programlisting>
		<para>解决方案是加入 .share() 共享订阅数据</para>
		<programlisting>
		<![CDATA[
		WebClient client = WebClient.create(url);
        Flux<String> flux = client.get()
                .uri("/chatgpt/stream/sentence?content={content}&symbol=。", content)
                .headers(httpHeaders -> httpHeaders.setBasicAuth(username, password))
                .retrieve()
                .bodyToFlux(String.class)
                .share();		
		]]>
		</programlisting>
	</section>
	<section id="webclient.log">
		<title>打印调试日志</title>
		<para>.log() 会打印运行期间的所有信息</para>
		<programlisting>
		<![CDATA[
        Flux<String> flux = client.get()
                .uri("/chatgpt/stream?content={content}", prompt)
                .headers(httpHeaders -> httpHeaders.setBasicAuth(username, password))
                .retrieve()
                .bodyToFlux(String.class).log();
		]]>
		</programlisting>
	</section>
	<section>
		<title>org.springframework.web.context.request.async.AsyncRequestNotUsableException:
			ServletOutputStream failed to flush: java.io.IOException: Broken pipe
		</title>
		<programlisting>
		<![CDATA[

		]]>
		</programlisting>
	</section>
</section>