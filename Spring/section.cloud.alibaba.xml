<?xml version="1.0" encoding="UTF-8"?>
<section id="SpringCloudAlibaba">
	<title>Spring Cloud Alibaba</title>
	<section>
		<title>安装 Nacos</title>
		<section>
			<title>Docker 安装 Nacos</title>
			<para>安装 netkiller-devops 库</para>
			<screen>
		<![CDATA[
pip install netkiller-devops		
		]]>
			</screen>
			<para>创建 docker.py 编排文件</para>
			<screen>
		<![CDATA[
#!/usr/bin/env python3
from netkiller.docker import *

volume = Volumes()
volume.create('mysql')

mysql = Services('mysql')
mysql.image('mysql:5.7').container_name('mysql').restart('always').hostname('db.netkiller.cn').env_file(os.getcwd()+'/nacos/env/mysql.env')
mysql.ports(['3306:3306']).volumes([
	'mysql:/var/lib/mysql'
]).command([
	'--socket=/var/lib/mysql/mysql.sock',
	'--default-authentication-plugin=mysql_native_password',
    '--character-set-server=utf8mb4',
    '--collation-server=utf8mb4_general_ci',
    '--explicit_defaults_for_timestamp=true',
    '--lower_case_table_names=1',
    '--max_execution_time=0'
])

nacos = Services('nacos')
nacos.container_name('nacos').env_file(os.getcwd()+'/nacos/env/nacos-mysql.env')
# .environment([
# 	'PREFER_HOST_MODE=hostname',
# 	'MODE=standalone'
# ])
nacos.image('nacos/nacos-server').volumes([
	'../nacos/logs/:/home/nacos/logs',
	'../nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties'
]).ports([
	"8848:8848",
    "9848:9848",
	'9555:9555'
]).depends_on('mysql').restart('on-failure')

experiment = Composes('experiment')
experiment.version('3.9')
experiment.volumes(volume)
experiment.services(mysql)
experiment.services(nacos)

if __name__ == '__main__':
	try:
		docker = Docker()
		docker.sysctl([{'vm.max_map_count':'262144'}])
		docker.environment(experiment)
		docker.main()
	except KeyboardInterrupt:
		print ("Crtl+C Pressed. Shutting down.")
		]]>
			</screen>
			<para>查看帮助信息</para>
			<screen>
		<![CDATA[
[root@localhost ~]# python3 docker.py 
Python controls the docker manager.
Usage: docker.py [options] up|rm|start|stop|restart|logs|top|images|exec <service>

Options:
  -h, --help            show this help message and exit
  --debug               debug mode
  -e development|testing|production, --environment=development|testing|production
                        environment
  -d, --daemon          run as daemon
  --logfile=LOGFILE     logs file.
  -l, --list            print service of environment
  -f, --follow          following logging
  -c, --compose         show docker compose
  --export              export docker compose

Homepage: http://www.netkiller.cn	Author: Neo <netkiller@msn.com>		
		]]>
			</screen>
			<para>启动 nacos</para>
			<screen>
		<![CDATA[
[root@localhost ~]# python3 docker.py -e experiment up nacos
mysql is up-to-date
Starting nacos ... done

[root@localhost ~]# python3 docker.py -e experiment ps 
    Name                   Command               State                                                         Ports                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------                            
mysql           docker-entrypoint.sh --soc ...   Up      0.0.0.0:3306->3306/tcp,:::3306->3306/tcp, 33060/tcp                                                              
nacos           bin/docker-startup.sh            Up      0.0.0.0:8848->8848/tcp,:::8848->8848/tcp, 0.0.0.0:9555->9555/tcp,:::9555->9555/tcp,                              
                                                         0.0.0.0:9848->9848/tcp,:::9848->9848/tcp   		
		]]>
			</screen>
			<para>查看启动端口</para>
			<screen>
		<![CDATA[
[root@localhost ~]# ss -lnt | grep -E "(8848|9848)"
LISTEN 0      1024         0.0.0.0:8848       0.0.0.0:*          
LISTEN 0      1024         0.0.0.0:9848       0.0.0.0:*          
LISTEN 0      1024            [::]:8848          [::]:*          
LISTEN 0      1024            [::]:9848          [::]:*   		
		]]>
			</screen>
			<para>测试配置中心</para>
			<screen>
		<![CDATA[
[root@localhost ~]# curl -X POST "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=helloWorld"
true

[root@localhost ~]# curl -X GET "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test"
helloWorld
		]]>
			</screen>
			<para>登陆 Web 界面 http://192.168.30.12:8848/nacos/ 默认的账号密码是：nacos/nacos </para>
		</section>
		<section>
			<title>Kubernetes 安装 Nacos</title>
			<para></para>
			<programlisting>
			<![CDATA[
			
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
CREATE USER 'nacos'@'%' IDENTIFIED BY 'nacos';

GRANT ALL PRIVILEGES ON nacos.* TO 'nacos'@'%';

SHOW GRANTS FOR 'nacos'@'%';
			]]>
			</programlisting>
			<screen>
			<![CDATA[]]>
			</screen>
		</section>
	</section>
	<section>
		<title>Kubernetes 部署微服务</title>
		<section>
			<title>pom.xml 中加入 docker 插件</title>
			<programlisting>
			<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.3</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<sonar.projectKey>netkiller.cn_java_AX0HsoVkT19KeT2iVgUT</sonar.projectKey>
		<sonar.qualitygate.wait>true</sonar.qualitygate.wait>

		<docker.registry>registry.netkiller.cn/netkiller.cn</docker.registry>

	</properties>

	<repositories>
		<repository>
			<id>gitlab-maven</id>
			<url>${env.CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
		</repository>
	</repositories>
	<distributionManagement>
		<repository>
			<id>gitlab-maven</id>
			<url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
		</repository>
		<snapshotRepository>
			<id>gitlab-maven</id>
			<url>${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- <version>4.13.2</version> -->
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.2</version>
				<configuration>
					<imageName>${docker.registry}/${project.artifactId}</imageName>
					<baseImage>openjdk:8-alpine</baseImage>
					<maintainer>netkiller@msn.com</maintainer>
					<volumes>/srv</volumes>
					<workdir>/srv</workdir>
					<env>
						<JAVA_OPTS>-server -Xms512m -Xmx4096m -Djava.security.egd=file:/dev/./urandom</JAVA_OPTS>
					</env>
					<exposes>8080</exposes>
					<entryPoint>["sh", "-c", "/srv/docker-entrypoint.sh"]</entryPoint>
					<resources>
						<resource>
							<targetPath>/srv</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
						<resource>
							<targetPath>/srv</targetPath>
							<directory>.</directory>
							<include>docker-entrypoint.sh</include>
						</resource>
					</resources>
					<registryUrl>http://${docker.registry}/v2/</registryUrl>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>			
			]]>
			</programlisting>
		</section>
		<section>
			<title>容器启动脚本</title>
			<para>在项目目录创建 docker-entrypoint.sh 文件</para>
			<programlisting>
			<![CDATA[
#!/bin/sh

if [ ! -z $1 ]; then
    MODULE=$1
    shift
fi

if [ -z $JAVA_OPTS ]; then
    JAVA_OPTS='-Xms1024m -Xmx4096m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+8 -Dfile.encoding=utf-8'
fi

if [ -z $MODULE ]; then
    echo "MODULE environment is not set"
    exit 127
else
    PACKAGE=/srv/$MODULE.jar
fi

DEBUG='-Xdebug -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=5555'
SKYWALKING="-javaagent:/srv/skywalking/agent/skywalking-agent.jar -Dskywalking.collector.backend_service=oap.netkiller.cn:11800 -Dskywalking.agent.service_name=${MODULE}"

exec java ${JAVA_OPTS}  -jar ${PACKAGE} $@			
			]]>
			</programlisting>
			<para>暂时 DEBUG，SKYWALKING 没有使用，放在一遍不碍事。脚本的用法</para>
			<screen>
			<![CDATA[
./docker-entrypoint.sh your_module --server.port=8080
			]]>
			</screen>
		</section>
		<section>
			<title>构建 docker 镜像</title>
			<para>运行 mvn 命令构建 docker 镜像</para>
			<screen>
			<![CDATA[
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)> mvn package docker:build docker:push			
			]]>
			</screen>
			<para>不出预料，你会看到下面输出</para>
			<screen>
			<![CDATA[
[INFO] Building image registry.netkiller.cn/netkiller.cn/demo
Step 1/9 : FROM openjdk:8-alpine

 ---> a3562aa0b991
Step 2/9 : MAINTAINER netkiller@msn.com

 ---> Using cache
 ---> b4a79be602ae
Step 3/9 : ENV JAVA_OPTS -server -Xms512m -Xmx4096m -Djava.security.egd=file:/dev/./urandom

 ---> Using cache
 ---> 9d685ea4a0d3
Step 4/9 : WORKDIR /srv

 ---> Using cache
 ---> e2feea451bb1
Step 5/9 : ADD /srv/demo-0.0.1-SNAPSHOT.jar /srv/

 ---> 7ad53fb991b8
Step 6/9 : ADD /srv/docker-entrypoint.sh /srv/

 ---> 39def6507064
Step 7/9 : EXPOSE 8080

 ---> Running in 338a99e6ec36
Removing intermediate container 338a99e6ec36
 ---> f192b73ab3b9
Step 8/9 : ENTRYPOINT ["sh", "-c", "/srv/docker-entrypoint.sh"]

 ---> Running in 5bda82acd305
Removing intermediate container 5bda82acd305
 ---> 85c1b2615a97
Step 9/9 : VOLUME /srv

 ---> Running in 27d71c55bf7e
Removing intermediate container 27d71c55bf7e
 ---> 64e0d8992fdd
ProgressMessage{id=null, status=null, stream=null, error=null, progress=null, progressDetail=null}
Successfully built 64e0d8992fdd
Successfully tagged registry.netkiller.cn/netkiller.cn/demo:latest
[INFO] Built registry.netkiller.cn/netkiller.cn/demo
[INFO] Tagging registry.netkiller.cn/netkiller.cn/demo with 0.0.1-SNAPSHOT
[INFO] Tagging registry.netkiller.cn/netkiller.cn/demo with latest
			]]>
			</screen>
			<para>查看镜像</para>
			<screen>
			<![CDATA[
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)> docker image ls | grep netkiller
registry.netkiller.cn/netkiller.cn/demo                       0.0.1-SNAPSHOT   64e0d8992fdd   3 minutes ago    122MB
registry.netkiller.cn/netkiller.cn/demo                       latest           64e0d8992fdd   3 minutes ago    122MB			
			]]>
			</screen>
		</section>
		
		<section>
			<title>编排 kubernetes 容器</title>
			<programlisting>
			<![CDATA[
from netkiller.kubernetes import *
namespace = 'default'

compose = Compose('development')

module = 'demo'
# version = '0.0.1-SNAPSHOT'
version = 'latest'

deployment = Deployment()
deployment.apiVersion('apps/v1')

deployment.metadata().name(module).labels({'app': module}).namespace(namespace)
deployment.spec().replicas(1)
deployment.spec().selector({'matchLabels': {'app': module}})
deployment.spec().template().metadata().labels({'app': module})
deployment.spec().template().spec().containers().name(module).image(
    'registry.netkiller.cn/netkiller.cn/cloud.netkiller.cn:%s' % version).ports([{
        'containerPort': 8080
    }]).env([
        {'name': 'TZ', 'value': 'Asia/Shanghai'},
        {'name': 'LANG', 'value': 'en_US.UTF-8'},
    ]).args([module,'--server.port=8080'])

# deployment.debug()
# deployment.json()

service = Service()
service.metadata().name(module)
service.metadata().namespace(namespace)
service.spec().selector({'app': module})
service.spec().type('NodePort')
service.spec().ports([{
    'name': 'http',
    'protocol': 'TCP',
    'port': 8080,
    'targetPort': 8080
}])

compose.add(deployment)
compose.add(service)

print("=" * 40, "Compose", "=" * 40)
compose.debug()
compose.delete()
compose.create()⏎  			
			]]>
			</programlisting>
			<para>查看容器运行状态</para>
			<screen>
			<![CDATA[
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)> kubectl get pods
NAME                       READY   STATUS             RESTARTS   AGE
nginx-88c84c4d8-8pmzp      1/1     Running            1          3d20h
demo-76b7598b76-5hstp      1/1     Running            0          5h43m
busybox                    0/1     CrashLoopBackOff   52         4h44m			
			]]>
			</screen>
		</section>
	</section>
	
	<section>
		<title>FAQ</title>
		<section>
			<title>禁用 Nacos</title>
			<para>当 Maven 引入了 nacos 依赖，启动就会要求配置 Nacos，可以通过下面方法禁用 Nacos</para>
			<screen>
			<![CDATA[
spring.cloud.nacos.config.enabled=false  
spring.cloud.nacos.discovery.enabled=false 
spring.cloud.nacos.config.refresh-enabled=false
spring.cloud.nacos.discovery.instance-enabled=false			
			]]>
			</screen>
		</section>
	</section>

</section>