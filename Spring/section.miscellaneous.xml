<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="miscellaneous" ?>
	<title>杂项 Miscellaneous</title>
	<section>
		<title>URL 拼装/解析</title>
		<programlisting>
		<![CDATA[
        UriComponents https = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/article")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();

        log.info(https.toUriString());		
		]]>
		</programlisting>
		<para>URL 解析</para>
		<programlisting>
		<![CDATA[
String httpUrl = "https://www.netkiller.cn:8080/article?id=9527";		
UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(httpUrl).build();

提取协议头
String scheme = uriComponents.getScheme();
// scheme = https
System.out.println("scheme = " + scheme);

获取host操作。
String host = uriComponents.getHost();
// host = felord.cn
System.out.println("host = " + host);

提取 Port 端口。

int port = uriComponents.getPort();
// port = -1
System.out.println("port = " + port);
但是很奇怪的是上面的是 -1,很多人误以为会是80。其实 Http 协议确实是80，但是java.net.URL#getPort()规定，若 URL 的实例未申明（省略）端口号，则返回值为-1。所以当返回了-1就等同于80，但是 URL 中不直接体现它们。

提取 Path 路径
String path = uriComponents.getPath();
// path = /spring-security/{article}
System.out.println("path = " + path);

提取 Query 参数

String query = uriComponents.getQuery();
// query = version=1&timestamp=123123325
System.out.println("query = " + query);
更加合理的提取方式：

MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();
// queryParams = {version=[1], timestamp=[123123325]}
System.out.println("queryParams = " + queryParams);
		]]>
		</programlisting>
		<para>替换变量</para>
		<programlisting>
		<![CDATA[
        UriComponents uriComponents = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/article/{category}")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();

        UriComponents expand = uriComponents.expand("story");

        log.info(expand.toUriString());
        # https://www.netkiller.cn:8080/article/story?id=9527
        
        UriComponents uriComponents = UriComponentsBuilder.newInstance()
                .scheme("https")
                .host("www.netkiller.cn")
                .port("8080")
                .path("/book/{chapter}/{section}")
                .queryParam("id", "9527")
                .encode(StandardCharsets.UTF_8)
                .build();
        UriComponents expand = uriComponents.expand(Map.of("chapter", "chapter1", "section", "section2"));

        log.info(expand.toUriString());
        # https://www.netkiller.cn:8080/book/chapter1/section2?id=9527        
		]]>
		</programlisting>
	</section>

	<section>
		<title>阿里云 OSS - STS进行临时授权访问获取 HTTPS 地址</title>
		<para>默认获取URL是 HTTP，我们的需求是需要获取HTTPS地址，当然你可以使用字符串替换操作，将 http 替换成 https，但这并不是最有解决方案。</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.aliyun;

import java.net.URL;
import java.util.Date;

import com.aliyun.oss.ClientBuilderConfiguration;
import com.aliyun.oss.OSS;
import com.aliyun.oss.OSSClientBuilder;
import com.aliyun.oss.common.comm.Protocol;

public class App {
	public static void main(String[] args) {
		System.out.println("Hello World!");

		// yourEndpoint填写Bucket所在地域对应的Endpoint。以华东1（杭州）为例，Endpoint填写为https://oss-cn-hangzhou.aliyuncs.com。
		String endpoint = "oss-cn-shanghai.aliyuncs.com";
		// 从STS服务获取的临时访问密钥（AccessKey ID和AccessKey Secret）。
		String accessKeyId = "DYmJeLTAI5tm1ZaCEB9nUxAP";
		String accessKeySecret = "QkXusBiLMoMIsW3JJhG0D5NOFBEh5a";
		// 从STS服务获取的安全令牌（SecurityToken）。
		String securityToken = "yourSecurityToken";
		// 填写Bucket名称，例如examplebucket。
		String bucketName = "production";
		// 填写Object完整路径，例如exampleobject.txt。Object完整路径中不能包含Bucket名称。
		String objectName = "exampleobject.txt";

		ClientBuilderConfiguration clientBuilderConfiguration = new ClientBuilderConfiguration();
		clientBuilderConfiguration.setProtocol(Protocol.HTTPS);
		// 创建OSSClient实例。
		OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret, securityToken, clientBuilderConfiguration);
		// 设置签名URL过期时间为3600秒（1小时）。
		Date expiration = new Date(new Date().getTime() + 3600 * 1000);
		// 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。
		URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);
		System.out.println(url);
		System.out.println(url.toString().replace(bucketName + "." + endpoint, "oss.netkiller.cn"));
		// 关闭OSSClient。
		ossClient.shutdown();
	}
}
		
		]]>
		</programlisting>
	</section>
	
</chapter>
