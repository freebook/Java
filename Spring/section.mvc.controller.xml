<?xml version="1.0" encoding="UTF-8"?>
<section id="Controller">
	<title>@Controller</title>
	<programlisting>
	<![CDATA[
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Welcome {

	@RequestMapping("/welcome")
	public ModelAndView helloWorld() {
		String message = "Helloworld!!!";
		return new ModelAndView("welcome", "message", message);
	}
}
		]]>
	</programlisting>

	<section id="@RequestMapping">
		<title>@RequestMapping</title>
		<programlisting>
		<![CDATA[
@RequestMapping("/welcome")		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
@RequestMapping(value = "/list", method =
RequestMethod.GET)		
		]]>
		</programlisting>

		<section>
			<title>@RequestMapping("/")</title>
			<programlisting>
			<![CDATA[
package com.cf88.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/")
public class HelloController {

	@RequestMapping(value = "/{name}", method = RequestMethod.GET)
	public String getMovie(@PathVariable String name, ModelMap model) {
		model.addAttribute("name", name);
		return "hello";
	}

}		
			]]>
			</programlisting>
			<para>同时支持多种操作方法</para>
			<programlisting>
			<![CDATA[
	@RequestMapping(value = "/name", method = { RequestMethod.GET, RequestMethod.POST })			
			]]>
			</programlisting>
		</section>

		<section>
			<title>映射多个URL</title>
			<programlisting>
			<![CDATA[
@RequestMapping({ "/news/zh-cn", "/news/zh-tw" })
@ResponseBody
public String getNewsByPath() {
	return "Hello";
}			
			]]>

			</programlisting>
		</section>
		<section>
			<title>匹配通配符</title>
			<programlisting>
			<![CDATA[
@Controller
@RequestMapping("/test/*")

public class TestController {

	@RequestMapping
	public String default() {
		return "OK";
	}
}
			]]>
			</programlisting>
		</section>

		<section>
			<title>headers</title>
			<programlisting>
			<![CDATA[
@RequestMapping(value = "/news/json", method = GET, headers = "Accept=application/json")
@ResponseBody
public String getFoosAsJsonFromBrowser() {
    return "{...}";
}
			]]>
			</programlisting>
			<screen>
			<![CDATA[
curl -H "Accept:application/json,text/html"
http://localhost:8080/spring/news/json.html			
			]]>
			</screen>
		</section>
	</section>
	<section id="@GetMapping">
		<title>@GetMapping</title>
		<para>@GetMapping 等效与 @RequestMapping</para>
		<programlisting>
			<![CDATA[
@RequestMapping(value = "/news/list", method = GET)			
			]]>
		</programlisting>
		<para>范例</para>
		<programlisting>
			<![CDATA[
import org.springframework.web.bind.annotation.GetMapping;

	@GetMapping("/finance/list")
	public String financeList() {
		return financeService.financeList();
	}
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[
@GetMapping(value = "/user",produces = MediaType.APPLICATION_JSON_UTF8_VALUE)			
			]]>
		</programlisting>
	</section>
	<section id="@PostMapping">
		<title>@PostMapping</title>
		<para>@GetMapping 等效与 @RequestMapping</para>
		<programlisting>
			<![CDATA[
@RequestMapping(value = "/news/list", method = RequestMethod.POST)			
			]]>
		</programlisting>
		<para>范例</para>
		<programlisting>
			<![CDATA[
import org.springframework.web.bind.annotation.PostMapping;

	@PostMapping("/finance/list")
	public String financeList() {
		return financeService.financeList();
	}			
			]]>
		</programlisting>
		<para>Content-Type: multipart/form-data</para>
		<programlisting>
			<![CDATA[
@PostMapping(path = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)			
			]]>
		</programlisting>
	</section>
	<section id="@RequestBody">
		<title>@RequestBody</title>
		<section>
			<title>原始数据</title>

			<para>处理 raw 原始数据，例如提交的时 application/json, application/xml等</para>
			<programlisting>
		<![CDATA[
@RequestMapping(value = "/something", method = RequestMethod.PUT)  
public void handle(@RequestBody String body, Writer writer) throws IOException {  
	writer.write(body);  
} 
		]]>
			</programlisting>
		</section>
		<section id="@RequestBody.List">
			<title>@RequestBody 传递 List</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.api.restful;

import java.util.List;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestRestController {

	@RequestMapping(value = "/test/list/{siteId}", method = RequestMethod.POST)
	public List<String> ping(@PathVariable("siteId") int siteId, @RequestBody List<String> tags) {
		System.out.println(String.format("%d, %s", siteId, tags));
		return (tags);
	}

}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
$ curl -H "Content-Type: application/json" -X POST -d '["Neo","Netkiller"]' http://localhost:8440/test/list/22.json 

["Neo","Netkiller"]	
			]]>
			</programlisting>
		</section>
		<section id="RequestBody.Map">
			<title>传递 Map 数据</title>
			<programlisting>
			<![CDATA[
	@PostMapping("/finance/list")
	public String financeList(@RequestBody Map<String,String> map) {
		return financeService.financeList(map);
	}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
% curl -H "Content-Type: application/json" -X POST -d '{"date":"2017-11-08"}' http://localhost:8440/finance/list.json			
			]]>
			</programlisting>
		</section>
		<section>
			<title>获取 JSONObject 数据</title>
			<programlisting>
				<![CDATA[
    @PostMapping(value = "/{device}/post")
    public Mono<String> post(@PathVariable String device, @RequestBody JSONObject jsonObject) {
        log.info(jsonObject.toString());
        return Mono.just(jsonObject.toString());
    }				
				]]>
			</programlisting>
		</section>
	</section>
	<section id="@RequestParam">
		<title>RequestMapping with Request Parameters - @RequestParam</title>
		<para>@RequestParam 用来处理 HTTP GET/POST 请求的变量</para>
		<programlisting>
			import
			org.springframework.web.bind.annotation.RequestParam;
		</programlisting>
		<section>
			<title>HTTP GET</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/request/param")
	@ResponseBody
	public String getBarBySimplePathWithRequestParam(@RequestParam("id") long id) {
	    return "Get a specific Bar with id=" + id;
	}
			]]>
			</programlisting>
			<para></para>
			<screen>
				<![CDATA[
http://localhost:8080/Spring/request/param.html?id=100				
				]]>
			</screen>
		</section>

		<section>
			<title>HTTP POST</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Http {

	@RequestMapping("/http/form")
	public ModelAndView createCustomer(){
		ModelMap model = new ModelMap();

		model.addAttribute("email", "netkiller@msn.com");
		model.addAttribute("phone", "13113668890");

	    return new ModelAndView("http/form", model);
	}

	@RequestMapping(value= "/http/post", method = RequestMethod.POST)
	public ModelAndView saveCustomer(HttpServletRequest request,
	        @RequestParam(value="Email", required=false) String email,
	        @RequestParam(value="Password", required=false) String password,
	        @RequestParam(value="Phone", required=false) String phone){

		ModelMap model = new ModelMap();

		model.addAttribute("email", email);
		model.addAttribute("password", password);
		model.addAttribute("phone", phone);

	    return new ModelAndView("http/post", model);
	}

}
			]]>
			</programlisting>
			<para>http/form.jsp</para>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>

	<form method="POST"
		action="http://localhost:8080/Spring/http/post.html" id="Register"
		name="Register">
		Email: <input class="register" type="text" id="Email" name="Email" value="${email}" /> <br />
		Password： <input class="register" type="password" id="Password" name="Password" value="" /><br />
		Phone： <input class="register" type="text" id="Phone" name="Phone" value="${phone}" /> <br />
		<input type="submit" id="btnRegister" name="btnRegister" value="Register" style="cursor: pointer" />
	</form>

</body>
</html>
			]]>
			</programlisting>
			<para>http/post.jsp</para>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	${email}<br>
	${password}	<br>
	${phone} <br>
</body>
</html>
			]]>
			</programlisting>
		</section>
		<section>
			<title>@RequestParam 传递特殊字符串</title>
			<para>URL 中 “+” 有特殊意义，表示空格。</para>
			<para>如果 @RequestParam 传递参数含有空格可以这样处理。</para>
			<programlisting>
			<![CDATA[
	@RequestMapping("/RequestParam")
	@ResponseBody
	public String query(@RequestParam("code") String code) {

		return code.replace(" ", "+");

	}
			]]>
			</programlisting>
		</section>
		<section>
			<title>传递日期参数</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/range")
	public ModelAndView range(@RequestParam("beginDate") @DateTimeFormat(pattern = "yyyy-MM-dd") Date beginDate, @RequestParam("endDate") @DateTimeFormat(pattern = "yyyy-MM-dd") Date endDate) {
		log.info("===== Begin ===== {}", beginDate);

		// 你的逻辑

		log.info("===== End ===== {}", endDate);
		return new ModelAndView("activity/index", "message", "操作成功");
	}
			]]>
			</programlisting>
		</section>
		<section>
			<title>上传文件</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.restful;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/upload")
public class UploadRestController {

	private static final Logger logger = LoggerFactory.getLogger(UploadRestController.class);

	public UploadRestController() {
		// TODO Auto-generated constructor stub
	}

	@PostMapping("/add")
	public String fileUpload(@RequestParam("file") MultipartFile multipartFile) throws IOException {

		String name = multipartFile.getOriginalFilename();
		System.out.println("File name: " + name);
		// todo save to a file via multipartFile.getInputStream()
		byte[] bytes = multipartFile.getBytes();
		System.out.println("File uploaded content:\n" + new String(bytes));
		return "file uploaded";
	}

}
			]]>
			</programlisting>
			<para>操作演示，首先创建一个文件</para>
			<screen>
			<![CDATA[
echo "Helloworld!!!" > hello.txt
			]]>
			</screen>
			<para>上传该文件</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro /tmp % curl "http://localhost:8080/upload/add" \                           
    -X POST \
    -H "Content-Type: multipart/form-data" \
    -F file=@"hello.txt"

file uploaded
			]]>
			</screen>
		</section>

		<section>
			<title>@RequestParam - POST 数组</title>
			<para>HTTP 头</para>
			<screen>
			<![CDATA[
picture[]: gather/293a93baa02cb18a840631bac1f9eeb20b7d436f.jpeg
picture[]: gather/be7572e4df527b4389d605766ea65aafcf2d822a.jpg			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
	@PostMapping("/save")
	public String save(@RequestParam(value = "picture[]", required = true) String[] picture) {
		return String.join(",", picture);
	}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>默认值</title>
			<programlisting>
			<![CDATA[
@RequestParam(name = "name", defaultValue = "xxx") String name			
			]]>
			</programlisting>
		</section>
		<section>
			<title>是否非必须</title>
			<para>使用 required = false 标注参数是非必须的</para>
			<programlisting>
			<![CDATA[
@RequestParam(name = "age", required = false) Integer age			
			]]>
			</programlisting>
		</section>
		<section>
			<title>用 Map 接收 From 数据</title>
			<programlisting>
			<![CDATA[
    @PostMapping("/token")
    @ResponseBody
    public String token(@RequestParam Map<String, String> params) {
        log.debug(params.toString());
        String token = jwtTokeComponent.getTestToken(params.get("appId"), params.get("appKey"), params.get("subject"), params.get("audience"));
        return token;
    }			
			]]>
			</programlisting>
		</section>
		
		
	</section>

	<section id="@RequestHeader">
		<title>@RequestHeader - 获取 HTTP Header 信息</title>
		<programlisting>
		<![CDATA[
@RequestMapping("/displayHeaderInfo")  
public void displayHeaderInfo(@RequestHeader("Accept-Encoding") String encoding,  
                              @RequestHeader("Keep-Alive") long keepAlive)  {  
  
  //...  
  
} 
		]]>
		</programlisting>
		<para>获取用户当前语言</para>
		<programlisting>
		<![CDATA[
	@GetMapping("/lang")
	public String language(@RequestHeader("Accept-Language") String locale ) {
		System.out.println(locale);
		return locale;
	}				
		]]>
		</programlisting>
		<para>下面代码可以获得相同效果</para>
		<programlisting>
		<![CDATA[
	@GetMapping("/lang")
	public String language(Locale locale) {
		System.out.println(locale);
		return locale;
	}	
	
	@GetMapping("/lang")
	public String language() {
		String locale = LocaleContextHolder.getLocale().toString();
		System.out.println(locale);
		return locale;
	}
		]]>
		</programlisting>
		<section>
			<title>@RequestHeader 从 Http 头中获取变量</title>
			<programlisting>
			<![CDATA[
	@PostMapping(value = "/token")
	public TokenResponse token(@RequestParam String symbol, @RequestHeader String token) {
	
			TokenResponse tokenResponse = walletService.getTokenBySymbol(symbol);

			return tokenResponse;
	}
			]]>
			</programlisting>
		</section>
	</section>
	<section id="@PathVariable">
		<title>RequestMapping with Path Variables - @PathVariable</title>
		<para>PATHINFO 变量可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</para>
		<section>
			<title>URL 参数传递</title>
			<para>需求，我们需要通过URL传递参数，所传递的值是分类ID与文章ID，例如 /news/1.html,
				/news/1/1.html。
			</para>
			<programlisting>
			<![CDATA[
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Pathinfo {
	@RequestMapping("/pathinfo/{id}")
	public ModelAndView urlTestId(@PathVariable String id) {

		return new ModelAndView("pathinfo/param", "id", id);
	}

	@RequestMapping("/pathinfo/{cid}/{id}")
	public ModelAndView urlTestId(@PathVariable String cid, @PathVariable String id) {

		ModelMap model = new ModelMap();

		model.addAttribute("cid", cid);
		model.addAttribute("id", id);

		return new ModelAndView("pathinfo/param", model);
	}
}
			]]>
			</programlisting>
			<para>jsp测试文件</para>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
${ cid } <br>
${ id } <br>
</body>
</html>
			]]>
			</programlisting>

		</section>
		<section>
			<title>默认值</title>
			<para>required 设置参数不是必须的</para>
			<programlisting>
			<![CDATA[
@PathVariable(required = false) String id			
			]]>
			</programlisting>
			<para>设置多个映射</para>
			<programlisting>
			<![CDATA[
@RequestMapping(value = {"/organization/{pageNumber}", "/organization"} , method = RequestMethod.GET)
public String list(@PathVariable(required = false) Integer pageNumber, ModelMap modelMap){
...
}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>URL 传递 Date 类型</title>
			<para>http://localhost:7000/history/2016-09-28%2000:00:00/</para>
			<programlisting>
			<![CDATA[
	@RequestMapping("/history/{datetime}")
	public String history(@PathVariable @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date datetime) throws Exception {

		System.out.println(datetime)

		return null;
	}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>处理特殊字符</title>
			<para>http://www.netkiller.cn/release/1.0.1</para>
			<programlisting>
			<![CDATA[
@RequestMapping(value =	"/release/{version:[a-zA-Z0-9\\.]+}", method = RequestMethod.GET)
public @ResponseBody
	String release(@PathVariable String version) {
	log.debug("version: ", version);
	return version;
}			
			]]>
			</programlisting>
			<para>http://www.netkiller.cn/release/1.0.1/other</para>
			<programlisting>
			<![CDATA[
@RequestMapping(value="/release/{version:.+}",method=RequestMethod.GET)
public void download(HttpSession
	session,@PathVariable("version")String version){
	return version;
}			
			]]>

			</programlisting>
		</section>
		<section>
			<title>@PathVariable 注意事项</title>
			<para>@PathVariable 参数传统需要注意，参数中不能携带 “/”,斜杠会被视为目录。</para>
			<programlisting>
			<![CDATA[
	@RequestMapping("/PathVariable/{code}.html")
	@ResponseBody
	public String urlTestId(@PathVariable String code) {
		return code;
	}
			]]>
			</programlisting>
		</section>
	</section>

	<section id="@ModelAttribute">
		<title>@ModelAttribute</title>
		<para>@ModelAttribute 处理 HTML FORM POST 提交</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.pojo;

import java.util.List;

public class Deploy {

	private String group;
	private String envionment;
	private String project;
	private List<String> arguments;
	public Deploy() {
		// TODO Auto-generated constructor stub
	}
	// Getters & Setters
}
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
	@RequestMapping(value="/deploy/post",  method = RequestMethod.POST)
	public ModelAndView post(@ModelAttribute("deploy")Deploy deploy, BindingResult result) {
		if (result.hasErrors()) {
			System.out.println(result.toString());
        }
		System.out.println(deploy.toString());
		return new ModelAndView("output").addObject("output", deploy.toString());
	}		
		]]>
		</programlisting>
	</section>

	<section id="@ResponseBody">
		<title>@ResponseBody</title>
		<programlisting>
		<![CDATA[
import org.springframework.web.bind.annotation.ResponseBody;		
		]]>
		</programlisting>
		<section>
			<title>直接返回HTML</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Pathinfo {

	@RequestMapping(value = "/news/shenzhen/{numericId:[\\d]+}")
	@ResponseBody
	public String getNewsWithPathVariable(@PathVariable final long numericId) {
		return "Get a specific Bar with id=" + numericId;
	}

}

			]]>
			</programlisting>
		</section>
	</section>
	<section id="@ResponseStatus">
		<title>@ResponseStatus 设置 HTTP 状态</title>
		<programlisting>
		<![CDATA[
	@RequestMapping(value = "/", method = RequestMethod.POST)
    @ResponseStatus(HttpStatus.CREATED)
    public String create(@RequestBody MultiValueMap<String, String> map) {
        return "OK";
    }		
		]]>
		</programlisting>
	</section>
	<section id="@CrossOrigin">
		<title>@CrossOrigin</title>
		<programlisting>
		<![CDATA[
	@CrossOrigin(origins = "http://localhost:9000")
	@GetMapping("/greeting")
	public Greeting	greeting(@RequestParam(required=false, defaultValue="World") String name) {
		System.out.println("==== in greeting ====");
		return new Greeting(counter.incrementAndGet(), String.format(template,name));
	}		
		]]>
		</programlisting>

		<programlisting>
		<![CDATA[
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
public class HomeController
{
    @GetMapping(path="/")
    public String home() {
        return "home";
    }
}		
		]]>
		</programlisting>
		<para>全局放行所有轻松，方法权限单独控制</para>
		<programlisting>
		<![CDATA[
@RestController
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class HomeController
{
    @CrossOrigin(origins = "http://example.com")
    @GetMapping(path="/")
    public String home() {
        return "home";
    }
}		
		]]>
		</programlisting>
		<section>
			<title>maxAge</title>
			<programlisting>
			<![CDATA[
@CrossOrigin(origins = {"http://localhost:8585"}, maxAge = 4800, allowCredentials = "false")
@RestController
@RequestMapping("/info")
public class PersonController {
	@Autowired
	private PersonService service;
	@CrossOrigin(origins = {"http://localhost:8080"}, maxAge = 6000)
	@RequestMapping("home")
	public List<Person> show() {
		List<Person> list = service.getAllPerson();
		return list;
 	}
} 
			]]>
			</programlisting>
		</section>
	</section>
	<section id="@CookieValue">
		<title>@CookieValue - 获取 Cookie 值</title>
		<programlisting>
		<![CDATA[
@RequestMapping("/sessionInfo")  
public void sessionInfo(@CookieValue("JSESSIONID") String cookie)  {

  //...  

}
		]]>
		</programlisting>
	</section>
	<section id="@SessionAttributes">
		<title>@SessionAttributes</title>
		<para>@SessionAttributes:
			该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。
			该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；
		</para>
		<programlisting>
		<![CDATA[
@Controller  
@RequestMapping("/editProfile")  
@SessionAttributes("profile")  
public class ProfileForm {  
    // ...  
}  
		]]>
		</programlisting>

		<programlisting>
		<![CDATA[
@Controller
@SessionAttributes("myRequestObject")
public class MyController {
  ...
}
		]]>
		</programlisting>

	</section>

	<section id="ModelAndView">
		<title>ModelAndView</title>
		<section>
			<title>变量传递</title>
			<programlisting>
			<![CDATA[
@RequestMapping("/testString")
public ModelAndView	helloWorld() {
	String message = "Helloworld!!!";
	return new
	ModelAndView("welcome", "message", message);
}			
			]]>
			</programlisting>

			<programlisting>
			<![CDATA[
public ModelAndView handleRequestInternal() {

	ModelAndView mav = new ModelAndView("test");//
	实例化一个VIew的ModelAndView实例
	mav.addObject("variable", "Hello World!");//
	添加一个带名的model对象
	return mav;
}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>ModelMap 传递多个变量</title>
			<para>传递多个字符串</para>
			<programlisting>
			<![CDATA[
@RequestMapping("/testModelMap")
public ModelAndView	testModelMap() {
	ModelMap model = new ModelMap();

	model.addAttribute("username", "Neo");
	model.addAttribute("password", "Netkiller");

	return new ModelAndView("test/modelmap", model);
}			
			]]>
			</programlisting>
			<para>推荐使用ModelMap</para>
			<programlisting>
			<![CDATA[
	@RequestMapping("/testMapString")
	public ModelAndView testMapString() {

		Map<String,String> data = new HashMap<String,String>();
		data.put("username","Neo");
		data.put("password","Netkiller");
	    return new ModelAndView("test/modelmap",data);

	}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
${username}<br>
${password}<br>
</body>
</html>
			]]>
			</programlisting>
		</section>
		<section>
			<title>redirect</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/testRedirect")
	public ModelAndView testRedirect(){
		   RedirectView view = new RedirectView("testMapString.html");
		   return new ModelAndView(view);
	}
			]]>
			</programlisting>
		</section>
		<section>
			<title>ArrayList</title>
			<programlisting>
			<![CDATA[
	@RequestMapping(value = "testList")
	public ModelAndView testList() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("/test/list");

		// List
		List<String> list = new ArrayList<String>();
		list.add("java");
		list.add("c++");
		list.add("oracle");
		mav.addObject("bookList", list);

		return mav;
	}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	${bookList}
	<br>

	<c:forEach items="${bookList}" var="node">
		<c:out value="${node}"></c:out><br>
	</c:forEach>

</body>
</html>
			]]>
			</programlisting>
		</section>
		<section>
			<title>HashMap</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/testMap")
	public ModelAndView testMap() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("test/map"); // 返回的文件名

		// Map
		Map<String, String> map = new HashMap<String, String>();
		map.put("Java", "http://www.netkiller.cn/java");
		map.put("PHP", "http://www.netkiller.cn/php");
		map.put("Home", "http://www.netkiller.cn");
		mav.addObject("channel", map);

		return mav;
	}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<c:forEach items="${channel}" var="node">
		<a href="<c:out value="${node.value}"></c:out>"><c:out value="${node.key}"></c:out></a>
        <br/>
	</c:forEach>
</body>
</html>
			]]>
			</programlisting>
		</section>
		<section>
			<title>传递对象</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/testObject")
	public ModelAndView testObject() {
		ModelMap model = new ModelMap();

		User user = new User("neo", "passw0rd");
		model.addAttribute("user", user);
		return new ModelAndView("test/object", model);

	}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
package cn.netkiller;

public class User {
	public String username;
	public String password;
	public User(String username, String password){
		this.username = username;
		this.password = password;
	}
	public String getUsername(){
		return this.username;
	}
	public String getPassword(){
		return this.password;
	}
}
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
Username: ${user.username}<br>
Password: ${user.password}<br>
</body>
</html>
			]]>
			</programlisting>
		</section>

	</section>


	<section id="http">
		<title>HttpServletRequest / HttpServletResponse </title>
		<section>
			<title>HttpServletResponse</title>
			<para>HttpServletResponse 实例</para>
			<programlisting>
			<![CDATA[
package cn.netkiller.api.rest;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import api.util.MatrixToImageWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Hashtable;

@Controller
@RequestMapping("/public/QRCode")
public class QRCodeController {
    private static final Logger log = LoggerFactory.getLogger(QRCodeController.class);
	
    @RequestMapping("/create/{code}" )
    @ResponseBody
    public void create(@PathVariable String code, HttpServletResponse httpServletResponse) throws WriterException, IOException {
        log.info(code);
        if (code != null && !"".equals(code)){
            ServletOutputStream stream = null;
            try {
                String text = code; 	// 二维码内容
                int width = 300; 		// 二维码图片宽度
                int height = 300; 		// 二维码图片高度
                String format = "gif";	// 二维码的图片格式

                Hashtable<EncodeHintType, String> hints = new Hashtable<EncodeHintType, String>();
                hints.put(EncodeHintType.CHARACTER_SET, "utf-8");   // 内容所使用字符集编码

                BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.QR_CODE, width, height, hints);
                // 生成二维码
                stream = httpServletResponse.getOutputStream();
                MatrixToImageWriter.writeToStream(bitMatrix, format, stream);

            }catch (WriterException e) {
                e.printStackTrace();
            } finally {
                if (stream != null) {
                    stream.flush();
                    stream.close();
                }
            }
        }
    }

    @RequestMapping("show")
    @ResponseBody
    public ModelAndView show(){

        return new ModelAndView("/qrcode/qrcode");
    }
}		
			]]>
			</programlisting>
		</section>
		<section>
			<title>HttpServletRequest</title>
			<programlisting>
			<![CDATA[
package com.example.demo.controller;

import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/test")
public class TestController {

	public TestController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/get")
	public String get(@RequestHeader String lang) throws IOException {
		System.out.println(lang);
		return lang;
	}

	@PostMapping("/post")
	public String post(@RequestHeader String lang) throws IOException {
		System.out.println(lang);
		return lang;
	}

	@GetMapping("/list")
	public Map<String, String> x(HttpServletRequest request) throws IOException {

		return getHeadersInfo(request);
	}

	private Map<String, String> getHeadersInfo(HttpServletRequest request) {

		Map<String, String> map = new HashMap<String, String>();

		Enumeration<?> headerNames = request.getHeaderNames();
		while (headerNames.hasMoreElements()) {
			String key = (String) headerNames.nextElement();
			String value = request.getHeader(key);
			map.put(key, value);
		}

		return map;
	}

}

			]]>
			</programlisting>
		</section>
	</section>
</section>
<section id="RestController">
	<title>@RestController</title>
	<para></para>
	<section>
		<title>上传文件</title>
		<programlisting>
		<![CDATA[
    @PostMapping("/{device}/question/voice")
    public String questionVoice(@PathVariable String device, @RequestParam("file") MultipartFile file, @RequestParam("session") String session) {

        if (file.isEmpty()) {
            logger.error("上传失败，请选择文件");
        }

        String fileName = file.getOriginalFilename();
        String filePath = "/tmp/".concat(session.concat(".mp3"));
        File saveAs = new File(filePath);
        try {
            file.transferTo(saveAs);
            logger.info("上传成功 " + fileName);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            return "上传失败";
        }
        return "上传成功";
    }		
		]]>
		</programlisting>
	</section>
	<section>
		<title>返回实体</title>
		<programlisting>
		<![CDATA[
	@RequestMapping("/get/{id}")
	public Member getStatistics(@PathVariable long id) {
		Member statistics = memberRepostitory.findOne(id);
		if (statistics == null) {
			statistics = new Member();
		}
		return statistics;
	}
		]]>
		</programlisting>
	</section>
	<section>
		<title>JSON</title>
		<para>MediaType.APPLICATION_JSON_VALUE 执行结果反馈json数据</para>
		<programlisting>
		<![CDATA[
@RestController
@RequestMapping("/api/persons")
public class MainController {

    @RequestMapping(
            value = "/detail/{id}", 
            method = RequestMethod.GET, 
            produces = MediaType.APPLICATION_JSON_VALUE
            )
    public ResponseEntity<Persons> getUserDetail(@PathVariable Long id) {

        Persons user = personsRepository.findById(id);

        return new ResponseEntity<>(user, HttpStatus.OK);
    }

}
		]]>
		</programlisting>
	</section>
	<section id="restfull.raw.json">
		<title>处理原始 RAW JSON 数据</title>
		<programlisting>
		<![CDATA[
	@RequestMapping(value = "/create", method = RequestMethod.POST, produces = { "application/xml", "application/json" })
	public ResponseEntity<Member> create(@RequestBody Member member) {
		memberRepository.save(member);
		return new ResponseEntity<Member>(member, HttpStatus.OK);
	}		
		]]>
		</programlisting>
	</section>
	<section id="json.null">
		<title>返回 JSON 对象 NULL 专为 "" 字符串</title>
		<programlisting>
		<![CDATA[
package api.config;

import java.io.IOException;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;

@Configuration
public class JacksonConfig {
    @Bean
    @Primary
    @ConditionalOnMissingBean(ObjectMapper.class)
    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {
        ObjectMapper objectMapper = builder.createXmlMapper(false).build();
        objectMapper.getSerializerProvider().setNullValueSerializer(new JsonSerializer<Object>() {
            @Override
            public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
                jsonGenerator.writeString("");
            }
        });
        return objectMapper;
    }
}

		]]>
		</programlisting>

	</section>
	<section id="restful.xml">
		<title>XML</title>
		<para>restful 将同时支持 json 和 xml 数据传递</para>
		<programlisting>
		<![CDATA[
package com.example.api.restful;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.api.domain.RecentRead;
import com.example.api.repository.RecentReadRepostitory;

@RestController
@RequestMapping("/restful/article")
public class ArticleRestController {

	@Autowired
	private RecentReadRepostitory recentReadRepostitory;

	@RequestMapping(value = "/recent/read/add/{memberId}/{articleId}", method = RequestMethod.GET, produces = { "application/xml", "application/json" })
	public ResponseEntity<RecentRead> recentAdd(@PathVariable long memberId, @PathVariable long articleId) {
		RecentRead recentRead = new RecentRead();
		recentRead.setMemberId(memberId);
		recentRead.setArticleId(articleId);
		recentReadRepostitory.save(recentRead);
		return new ResponseEntity<RecentRead>(recentRead, HttpStatus.OK);
	}

	@RequestMapping(value="/recent/read/list/{id}", produces = { "application/xml", "application/json" })
	public List<RecentRead> recentList(@PathVariable long id) {
		int page = 0;
		int limit = 20;
		List<RecentRead> recentRead = recentReadRepostitory.findByMemberId(id, new PageRequest(page, limit));
		return recentRead;
	}
}
		]]>
		</programlisting>
	</section>
	<section id="restful.json">
		<title>兼容传统 json 接口</title>
		<para>开发中发现很多人不适应新的接口方式，有时候只能妥协，这些顽固不化的人需要这样的数据库格式</para>
		<programlisting>
		<![CDATA[
{  
   "status":true,
   "reason":"登录成功",
   "code":1,
   "data":{
      "id":2,
      "name":null,
      "sex":null,
      "age":0,
      "wechat":null,
      "mobile":"13113668890",
      "picture":null,
      "ipAddress":"0:0:0:0:0:0:0:1"
   }
}
		]]>
		</programlisting>
		<para>返回数据必须放在 data 字典中, 而我通常是采用 http status code
			来返回状态，返回结果是对象。实现上面的需求我们需要加入一个data成员变量，因为我们不清楚最终要返回什么对象。所以声明为
			java.lang.Object
		</para>
		<programlisting>
		<![CDATA[
package com.example.api.pojo;

import java.io.Serializable;

public class RestfulResponse implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -4045645995352698349L;

	private boolean status;
	private String reason;
	private int code;
	private Object data;

	public RestfulResponse(boolean status, int code, String reason, Object data) {
		this.status = status;
		this.code = code;
		this.reason = reason;
		this.data = data;

	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public String getReason() {
		return reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	public int getCode() {
		return code;
	}

	public void setCode(int code) {
		this.code = code;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}

	@Override
	public String toString() {
		return "RestfulResponse [status=" + status + ", reason=" + reason + ", code=" + code + ", data=" + data + "]";
	}

}
		]]>
		</programlisting>
		<para>Service</para>
		<programlisting>
		<![CDATA[
	public RestfulResponse bindWechat(String mobile, String wechat) {
		Member member = memberRepository.findByMobile(mobile);
		member.setWechat(wechat);
		memberRepository.save(member);
		return new RestfulResponse(true, 1, "微信绑定成功", member);
	}
		]]>
		</programlisting>
		<para>Controller</para>
		<programlisting>
		<![CDATA[
	@RequestMapping("/login/sms/{mobile}/{code}")
	public RestfulResponse sms(@PathVariable String mobile, @PathVariable String wechat) {
		return memberService.bindWechat(mobile, wechat);
	}
		]]>
		</programlisting>
	</section>

	<section id="restful.upload">
		<title>上传文件</title>
		<para></para>
		<screen>
		<![CDATA[
spring.servlet.multipart.max-file-size=128KB
spring.servlet.multipart.max-request-size=128KB
spring.http.multipart.enabled=false
		]]>
		</screen>
		<para>RestController</para>
		<programlisting>
		<![CDATA[
package api.restful;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import api.pojo.RestfulResponse;

@RestController
@RequestMapping("/upload")
public class UploadRestController {

	private final static String FOLDER = "/tmp";

	public UploadRestController() {
		
	}

	@PostMapping("/single")
	public RestfulResponse upload(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes) {

		if (file.isEmpty()) {
			return new RestfulResponse(false, 0, "Please select a file to upload", "");
		}
		try {
			byte[] bytes = file.getBytes();
			Path path = Paths.get(FOLDER + "/" + file.getOriginalFilename());
			Files.write(path, bytes);

			return new RestfulResponse(true, 0, "", path.toString());
		} catch (Exception e) {
			return new RestfulResponse(false, 0, e.getMessage(), null);
		}
	}

	@PostMapping(value = "/group")
	public RestfulResponse group(@RequestParam("files") MultipartFile[] files) {
		List<String> filelist = new ArrayList<String>();
		try {

			for (MultipartFile file : files) {
				File tmpfile = new File(FOLDER + "/" + file.getOriginalFilename());
				file.transferTo(tmpfile);
				filelist.add(tmpfile.getPath());
			}
			return new RestfulResponse(true, 0, null, filelist);
		} catch (Exception e) {
			return new RestfulResponse(false, 0, e.getMessage(), null);
		}
	}
}
		]]>
		</programlisting>
		<para>由于上传文件名可能存在空格等特殊字符，这里使用UUID替代文件名</para>
		<programlisting>
		<![CDATA[
	@PostMapping(value = "/file")
	public RestfulResponse file(@RequestParam("file") MultipartFile[] files) {
		List<Object> filelist = new ArrayList<Object>();
		try {

			for (MultipartFile file : files) {
			
				UUID uuid = UUID.randomUUID();
				String filename = String.format("%s/%s.%s", folder, uuid.toString(), this.getExtensionName(filename));

				File tmpfile = new File(filename);
				String filepath = tmpfile.getPath();
				System.out.println(filepath);
				file.transferTo(tmpfile);
				filelist.add(tmpfile.toString());
			}
			return new RestfulResponse(true, 0, null, filelist);
		} catch (Exception e) {
			return new RestfulResponse(false, 0, e.getMessage(), null);
		}
	}

	private String getExtensionName(String filename) {
		if ((filename != null) && (filename.length() > 0)) {
			int dot = filename.lastIndexOf('.');
			if ((dot > -1) && (dot < (filename.length() - 1))) {
				return filename.substring(dot + 1);
			}
		}
		return filename;
	}
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
获取文件名及后缀信息

MultipartFile file = new MultipartFile();
String file = file.getOriginalFilename()

获取文件名

MultipartFile file = new MultipartFile();
String fileName = file.getOriginalFilename().substring(0,file.getOriginalFilename().lastIndexOf("."))


获取文件后缀

MultipartFile file = new MultipartFile();
String fileSuffix = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."))


获取文件类型

MultipartFile file = new MultipartFile();
String fileType = file.getContentType()


获取文件大小

MultipartFile file = new MultipartFile();
String fileSize = file.getSize()
		
		]]>
		</programlisting>
	</section>
	<section id="export.csv">
		<title>Spring boot with csv</title>
		<para>下面是一个导出 CSV 文件的例子</para>
		<programlisting>
		<![CDATA[
	@GetMapping("/export")
	public void export(HttpServletResponse response) throws IOException {
		response.setContentType("application/csv");
		// response.setContentType("application/csv;charset=gb18030");
		response.setHeader("Content-Disposition", "attachment; filename=\"file.csv\"");

		BufferedWriter writer = new BufferedWriter(response.getWriter());

		// 需要写入 utf8bom 头否则会出现中文乱码
		// byte[] uft8bom = { (byte) 0xef, (byte) 0xbb, (byte) 0xbf };
		String bom = new String(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF });
		writer.write(bom);
		writer.write("A,B,C");
		writer.newLine();
		tableRepository.findAll().forEach(table -> {
			try {
				String tmp = String.format("%s,%s,%s", table.getId(), table.getMethod(), table.getMoney());
				writer.write(tmp);
				writer.newLine();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		});

		writer.flush();
		writer.close();
	}		
		]]>
		</programlisting>
	</section>
	&section.mvc.jackson.xml;
	<section id="rest.synchronized">
		<title>synchronized</title>
		<para>避免接口无序执行，被同时多次执行，同一时间只能有一个请求，请求完毕之后才能进行下一次请求。</para>
		<programlisting>
		<![CDATA[
   @GetMapping("/lock/{id}")
    public String lock1(@PathVariable("id") String id) throws InterruptedException {
        synchronized (id.intern()) {
            log.info(Thread.currentThread().getName() + " 上锁");
            Thread.sleep(10000);
            log.info(Thread.currentThread().getName() + " 解锁");
        }
        return Thread.currentThread().getName();
    }		
		]]>
		</programlisting>
		<para>使用 ConcurrentHashMap 数据共享</para>
		<programlisting>
		<![CDATA[
	private final Map<String, Object> share = new ConcurrentHashMap<>();

    @GetMapping("/share/{id}")
    public Map<String, Object> shareTest(@PathVariable("id") String id) throws InterruptedException {

//        share.computeIfAbsent(id, k -> new Object());
        share.computeIfAbsent(id, key -> {
            return new Date();
        });

        synchronized (share) {
            log.info(Thread.currentThread().getName() + " 上锁");
            Thread.sleep(1000);
            log.info(Thread.currentThread().getName() + " 解锁");
        }
        return share;
    }
		]]>
		</programlisting>
	</section>
	<section>
		<title>SSE</title>
		<programlisting>
		<![CDATA[
@GetMapping("/mvc/sse")
public SseEmitter streamSseMvc() {
    SseEmitter emitter = new SseEmitter();
    ExecutorService sseMvcExecutor = Executors.newSingleThreadExecutor();
    sseMvcExecutor.execute(() -> {
        try {
            for (int i = 0; true; i++) {
                SseEventBuilder event = SseEmitter.event()
                  .data("SSE MVC - " + LocalTime.now().toString())
                  .id(String.valueOf(i))
                  .name("sse event - mvc");
                emitter.send(event);
                Thread.sleep(1000);
            }
        } catch (Exception ex) {
            emitter.completeWithError(ex);
        }
    });
    return emitter;
}		
		]]>
		</programlisting>
	</section>
</section>