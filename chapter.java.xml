<?xml version="1.0" encoding="UTF-8"?>
<chapter id="java">
	<title>Java</title>
	&chapter.jvm.xml;
<section id="system">
	<title>System</title>
	<screen>
Java.version 运行时环境版本

java.vendor 运行时环境供应商

java.vendor.url 供应商的 URL

java.home 安装目录

java.vm.specification.version 虚拟机规范版本

java.vm.specification.vendor 虚拟机规范供应商

java.vm.specification.name 虚拟机规范名称

java.vm.version 虚拟机实现版本

java.vm.vendor 虚拟机实现供应商

java.vm.name 虚拟机实现名称

java.specification.version 运行时环境规范版本

java.specification.vendor Java 运行时环境规范供应商

java.specification.name Java 运行时环境规范名称

java.class.version Java 类格式版本号

java.class.path Java 类路径

java.library.path 加载库时搜索的路径列表

java.io.tmpdir 默认的临时文件路径

java.compiler 要使用的 JIT 编译器的名称

java.ext.dirs 一个或多个扩展目录的路径

os.name 操作系统的名称

os.arch 操作系统的架构

os.version 操作系统的版本

file.separator 文件分隔符（在 UNIX 系统中是“/”）

path.separator 路径分隔符（在 UNIX 系统中是“:”）

line.separator 行分隔符（在 UNIX 系统中是“/n”）

user.name 用户的账户名称

user.home 用户的主目录

user.dir 用户的当前工作目录	
	</screen>
	<section id="System">
		<title>user.dir</title>
		<programlisting>
		<![CDATA[
public class Test {

	public static void main(String[] args) {
		System.out.println("Working Directory = " + System.getProperty("user.dir"));
	}
}
		]]>
		</programlisting>
	</section>
	<section>
		<title>java.io.tmpdir</title>
		<para>改变java.io.tmpdir的默认值</para>
		<programlisting>
System.setProperty("java.io.tmpdir", "/vat/tmp");
System.out.println(System.getProperty("java.io.tmpdir"));
		</programlisting>
		<para>如果你希望从外部修改这个系统属性的话，你可以使用-D这个参数，例如 java -Djava.io.tmpdir=/path/to/tmpdir</para>
		<programlisting>
System.out.println(System.getProperty("java.io.tmpdir"));
		</programlisting>
	</section>
	<section>
		<title>自定义</title>
		<programlisting>
		<![CDATA[
	public static void main(String[] args) {
		try {
			Oracle oracle = new Oracle();
			if(System.getProperty("config") == null){
				System.exit(1);
			}
			oracle.openConfig(System.getProperty("config"));
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

	}
		]]>
		</programlisting>
		<para>上面程序编译打包后运行</para>
		<screen>
		<![CDATA[
neo@netkiller:~/project/Oracle$ java -jar -Dconfig=jdbc.properties target/oracle-0.0.1-SNAPSHOT.jar
		]]>		
		</screen>
	</section>
</section>

	<section id="Runtime">
		<title>exec 运行shell</title>
		<screen>
exec(String[] cmdarray, String[] envp, File dir)
Executes the specified command and arguments in a separate process with the specified environment and working directory.

那个dir就是调用的程序的工作目录，这句其实还是很有用的。

Windows下调用程序
Process proc =Runtime.getRuntime().exec("file.exe");

Linux下调用程序就要改成下面的格式
Process proc =Runtime.getRuntime().exec("./file");

Windows下调用系统命令
String [] cmd={"cmd","/C","copy file1.txt file2.txt"};
Process proc =Runtime.getRuntime().exec(cmd);

Linux下调用系统命令就要改成下面的格式
String [] cmd={"/bin/sh","-c","ln -s file1 file2"};
Process proc =Runtime.getRuntime().exec(cmd);

Windows下调用系统命令并弹出命令行窗口
String [] cmd={"cmd","/C","start copy file1.txt file2.txt"};
Process proc =Runtime.getRuntime().exec(cmd);

Linux下调用系统命令并弹出终端窗口就要改成下面的格式
String [] cmd={"/bin/sh","-c","xterm -e ln -s file1 file2"};
Process proc =Runtime.getRuntime().exec(cmd);

还有要设置调用程序的工作目录就要
Process proc =Runtime.getRuntime().exec("ls",null, new File("/bin"));
		</screen>
	</section>
	&chapter.java.type.xml;
	&chapter.java.net.xml;
	&chapter.java.sql.xml;
	&chapter.java.util.xml;
	&chapter.java.reflect.xml;
</chapter>