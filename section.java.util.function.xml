<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="function" ?>
	<!-- java.util.function -->
	<title>函数式编程</title>
	<section id="Supplier">
		<title>Supplier 供应型的接口</title>
		<programlisting>
		<![CDATA[
Supplier<String> supplier = () -> "hello, world";
String result = supplier.get();
System.out.println(result);

Supplier stringSupplier = () -> new String("Hi Neo");
String string = stringSupplier.get();
System.out.println(string);

Supplier<LocalDateTime> currentTime = () -> LocalDateTime.now();  
LocalDateTime now = currentTime.get(); // 计算当前时间

Optional<String> optional = Optional.ofNullable("hello"); 
String orElseGet = optional.orElseGet(() -> "world");

Supplier userSupplier= () -> new User(1,"netkiller");  
User user=userSupplier.get();  
System.out.println(user.getName());  
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.function.Supplier;

public class TestSupplier {
    private final int age = 24;

    TestSupplier() {
        System.out.println(age);
    }

    public static void main(String[] args) {
        Supplier<TestSupplier> supplier = TestSupplier::new;
        //调用get()方法，此时会调用对象的构造方法，即获得到真正对象
        supplier.get();
        System.out.println(supplier.get().test());

        TestSupplier test = supplier.get();
        System.out.println(test.test());
    }

    private String test() {
        return "Helloworld!!!";
    }
}		
		]]>
		</programlisting>
		<programlisting>
			<![CDATA[
package cn.netkiller.test;

import java.util.function.Supplier;

public class TestSupplier {
    private final int age = 24;
    private final String name;

    TestSupplier(String name) {
        this.name = name;
//        System.out.println(name);
    }

    public static void main(String[] args) {
        Supplier<String> stringSupplier = () -> {
            return "test1";
        };
        System.out.println(stringSupplier.get());

        Supplier<String> stringSupplier1 = () -> "test2";
        System.out.println(stringSupplier1.get());

        Supplier<TestSupplier> testSupplier = () -> new TestSupplier("Neo");
        System.out.println(testSupplier.get().name);

//        String name = "Netkiller";
//        Supplier<TestSupplier> testSupplier1 = (name) -> {new TestSupplier(name)};
//        System.out.println(testSupplier1.get().name);
//        System.out.println(test.test());
    }

    private String test() {
        return "Helloworld!!!";
    }
}
			]]>
		</programlisting>
		<section>
			<title>Supplier 作为方法参数使用</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.test;

import java.util.concurrent.ExecutionException;
import java.util.function.Supplier;

public class Test {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        System.out.println(Thread.currentThread());
        process(() -> {
            System.out.println(Thread.currentThread().getName() + " Process...");
            return "Test";
        });

        Supplier<String> stringSupplier1 = () -> "netkiller";
        process(stringSupplier1);

    }

    public static <T> void process(Supplier<T> supplier) {
//        System.out.println(Thread.currentThread().getName() + " Process...");

//        CompletableFuture<T> runAsync = CompletableFuture.supplyAsync(supplier);
//        runAsync.join();
//        System.out.println(variable.get());

        T value = supplier.get();
        System.out.println(value);
    }
}			
			]]>
			</programlisting>
		</section>
		<section id="IntSupplier">
			<title>IntSupplier</title>
			<para>IntSupplier - 有getAsInt()方法</para>
			<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.function.IntSupplier;
import java.util.stream.IntStream;

public class Test {
    public static void main(String[] args) {

        IntSupplier naturalGenerator = new IntSupplier() {
            int currentValue = 0;

            public int getAsInt() {
                return currentValue++;
            }
        };

        IntStream.range(0, 10).forEach((n) -> {
            System.out.println(naturalGenerator.getAsInt());
        });

    }
}
		]]>
			</programlisting>
			<para>自定义 getAsInt 抽象方法，可以定制步进值</para>
			<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.function.IntSupplier;
import java.util.stream.IntStream;

public class Test {
    public static void main(String[] args) {
        System.out.println(Thread.currentThread());

        IntSupplier naturalGenerator = new IntSupplier() {
            int currentValue = 1;

            public int getAsInt() {
                return currentValue *= 2;
            }
        };

        IntStream.range(0, 10).forEach((n) -> {
            System.out.println(naturalGenerator.getAsInt());
        });

    }

}		
		]]>
			</programlisting>
		</section>
		<section id="LongSupplier">
			<title>LongSupplier</title>
			<para>LongSupplier - 有getAsLong()方法</para>
			<programlisting>
			<![CDATA[
 	LongSupplier longSupplier1 = () -> LocalDate.now().toEpochDay();
    System.out.println(longSupplier1.getAsLong());

    LongSupplier longSupplier2 = () ->  Long.parseLong("1024");
    System.out.println(longSupplier2.getAsLong());      
      
	LongSupplier longSupplier3 = () -> {
		long num1 = 30L;
		long num2 = 50L;
		return num1 * num2;
	};
	System.out.println(longSupplier3.getAsLong());
	
	LongSupplier time = new Date()::getTime;
	System.out.println(time.getAsLong());		
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
	public static void main(String[] args) {
		String id = test(() -> new Random().nextLong());
		System.out.println(id);
	}

	public static String test(LongSupplier ls) {
		return "no. " + ls.getAsLong();
	}
			]]>
			</programlisting>
		</section>
		<section id="DoubleSupplier">
			<title>DoubleSupplier</title>
			<para>DoubleSupplier - 有getAsDouble()方法</para>
			<programlisting>
			<![CDATA[
	DoubleSupplier random = () -> new Random().nextDouble();
	System.out.println(random.getAsDouble());

	DoubleSupplier doubleSupplier = () ->  Double.parseDouble("123.0987");
      System.out.println(doubleSupplier.getAsDouble());      
      
      DoubleSupplier doubleSupplier1 = () -> {
    	double val1 = 35.30;
    	double val2 = 45.97;
    	return val1 * val2;
      };
      System.out.println(doubleSupplier1.getAsDouble());  

	DoubleSupplier random1 = new Random()::nextDouble;
	System.out.println(random1.getAsDouble());		
			]]>
			</programlisting>
		</section>
		<section id="BooleanSupplier">
			<title>BooleanSupplier</title>
			<para>BooleanSupplier - 有getAsBoolean()方法。</para>
			<programlisting>
			<![CDATA[
 	BooleanSupplier booleanSupplier1 = () -> LocalDate.now().isLeapYear();
      System.out.println(booleanSupplier1.getAsBoolean());

      BooleanSupplier booleanSupplier2 = () ->  "netkiller".length() > 5;
      System.out.println(booleanSupplier2.getAsBoolean());      
      
      BooleanSupplier booleanSupplier3 = () -> {
    	int num = 16;
    	if (num % 2 == 0) {
    	  return true;
    	}
    	return false;
      };
      System.out.println(booleanSupplier3.getAsBoolean());
			]]>
			</programlisting>
		</section>

	</section>
	
	<section id="Consumer">
		<title>Consumer 消费型的接口</title>
		<programlisting>
			<![CDATA[
        Consumer<String> printer = (s) -> System.out.println(s);
        // 使用 accept 方法执行操作
        printer.accept("Hello, World!");			
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[
        Consumer<String> upperCasePrinter = (s) -> System.out.println(s.toUpperCase());
        Consumer<String> lowerCasePrinter = (s) -> System.out.println(s.toLowerCase());

        // 使用 andThen 方法连接两个 Consumer
        Consumer<String> combinedPrinter = upperCasePrinter.andThen(lowerCasePrinter);
        combinedPrinter.accept("Hello world!!!");			
			]]>
		</programlisting>
		<programlisting>
			<![CDATA[

package cn.netkiller;

import java.util.function.Consumer;

import lombok.Data;

/**
 * TestConsumer
 */
@Data
public class TestConsumer {
    private String name;
    private String nickname;
    private int age;

    public void init(Consumer<TestConsumer> configurator) {
        configurator.accept(this);
    }

    public static void main(String[] args) {
        System.out.println("Hello world!");

        TestConsumer test = new TestConsumer();

        // 使用 Consumer 配置 Person 对象
        test.init(p -> {
            p.setName("Neo");
            p.setNickname("netkiller");
            p.setAge(30);
        });

        System.out.println(test);

    }
}			
			]]>
		</programlisting>
		<para>andThen</para>
		<programlisting>
		<![CDATA[
        Consumer<Integer> test = (n) -> {
            System.out.println(n);
        };
        test.andThen((v) -> {
            System.out.println(v);
        }).accept(100);		
		]]>
		</programlisting>
		<section id="IntConsumer">
			<title>IntConsumer</title>
			<programlisting>
			<![CDATA[
IntConsumer printNumber = num -> System.out.println("The number is: " + num);
printNumber.accept(42);  // 输出: The number is: 42		
			]]>
			</programlisting>
		</section>
		<section id="Consumer.Void">
			<title>无返回值 Void</title>
				<section>
			<title>定义 Consumer&lt;Void&gt;</title>
			<programlisting>
			<![CDATA[
	public void play(String url, ProgressBar progressBar, Consumer<Void> consumer) {
        if (neoPlayer == null) {
            neoPlayer = NeoPlayer.getInstance();
            Log.i(TAG, "MediaPlayer 创建实例");
        }
        if (url == null || url.isEmpty()) {
            Log.i(TAG, "Play error: " + url);
            return;
        } else {
            Log.i(TAG, "Play: " + url);
        }

        try {
            neoPlayer.resetPlayer();
            neoPlayer.setDataSource(url);//设置播放来源
            neoPlayer.prepareAsync();//异步准备
        } catch (IOException e) {
            Log.d(TAG, e.toString());
        } catch (IllegalStateException e) {
            Log.d(TAG, e.toString());
        }

        neoPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            //异步准备监听
            @Override
            public void onPrepared(MediaPlayer mediaPlayer) {
//                Log.i(TAG, "Voice 播放异步文件，时长: " + mediaPlayer.getDuration() / 1000 + " Audio: " + url);
                mediaPlayer.start();//播放
                if (progressBar != null) {
                    progress(progressBar);
                    progressBar.setVisibility(View.VISIBLE);
                }
            }
        });
        neoPlayer.setScreenOnWhilePlaying(true);// 设置播放的时候一直让屏幕变亮
        neoPlayer.setOnBufferingUpdateListener(new MediaPlayer.OnBufferingUpdateListener() {
            //文件缓冲监听
            @Override
            public void onBufferingUpdate(MediaPlayer mediaPlayer, int i) {
                Log.i(TAG, "onBufferingUpdate Voice 缓冲区加载进度: " + i + "%");
            }
        });
        neoPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mediaPlayer) {
                progressBar.setVisibility(View.GONE);
                consumer.accept(null);
            }
        });
    }		
			]]>
			</programlisting>
		</section>
			<section>
				<title>回调写法</title>
				<programlisting>
				<![CDATA[
     aigcSpeech.Player().play(Config.Cloud.resUrl.concat(chat.audio), holder.progressBarAudio, (Void) -> {
         holder.toggleButtonPlayer.setChecked(false);
     });
				]]>
				</programlisting>
			</section>
			
		</section>
	</section>

	
	<section id="BiConsumer">
		<title>BiConsumer</title>
		<para>BiConsumer 可以返回两个参数</para>
		<programlisting>
		<![CDATA[
BiConsumer<String, Integer> printInfo = (name, age) -> System.out.println(name + " is " + age + " years old.");
printInfo.accept("Neo", 25);  // 输出: Neo is 25 years old.		
		]]>
		</programlisting>
	</section>
	<section id="BiFunction">
		<title>BiFunction</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.concurrent.ExecutionException;
import java.util.function.BiFunction;

public class Test {

    public static void main(String[] args) {
        BiFunction<String, String, Integer> biFunction = (s1, s2) -> s1.length() + s2.length();
        Integer length = biFunction.apply("Neo", "netkiller");
        System.out.println(length);
    }
}
		
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.concurrent.ExecutionException;
import java.util.function.BiFunction;

public class Test {

    public static void main(String[] args) {
        BiFunction<String, String, Integer> biFunction = (s1, s2) -> s1.length() + s2.length();
        Integer length = biFunction.andThen(len -> len * 2).apply("Neo", "netkiller");
        System.out.println(length);
    }
}
		
		]]>
		</programlisting>
	</section>
	<section id="Predicate">
		<title>Predicate 判断型的接口</title>
		<programlisting>
		<![CDATA[
        Predicate<Integer> predicate = i -> i > 5;
        System.out.println(predicate.test(1));
        System.out.println(predicate.test(10));		
		]]>
		</programlisting>
	</section>
	<section>
		<title>Supplier / Consumer / Predicate 应用场景</title>
		<para>Supplier 没有入参，但是有返回值，通过 get() 获得。</para>
		<para>Consumer 有入参，但是没有返回值，通过 andThen() 可以获得返回叔叔。</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.test;

import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class Test {
    public static void main(String[] args) {
        System.out.println(Thread.currentThread());
        Supplier<String> supplier = () -> "hello, world";
        String result = supplier.get();
        System.out.println("Supplier: " + result);

        Consumer<String> consumer = (s) -> System.out.println(s);
//        consumer.accept("Hello, Neo!");

        Consumer<String> then = consumer.andThen(value -> {
            System.out.println("Consumer: " + value);
        });
        consumer.accept("Hello, Neo!");
        then.accept("Hello, Netkiller!");


        Predicate<Integer> predicate = i -> i > 5;
        System.out.println(predicate.test(1));
        System.out.println(predicate.test(10));

        Predicate<String> string = s -> !s.isEmpty();
        string.or(s -> s.equals("neo"));
        System.out.println(string.test(""));
        System.out.println(string.test("neo"));

    }

}		
		]]>
		</programlisting>
	</section>
</chapter>