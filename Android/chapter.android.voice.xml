<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="sip" ?>
	<title>SIP(Session initialization Protocol) </title>
	<subtitle></subtitle>
	<para>SIP（Session initialization Protocol，会话初始协议）是由IETF（Internet Engineering Task Force，因特网工程任务组）制定的多媒体通信协议。</para>
	<ulink url="https://developer.android.google.cn/guide/topics/connectivity/sip?hl=zh-cn#java" />
	<section id="sip.AndroidManifest.xml">
		<title>AndroidManifest.xml</title>
		<programlisting>
		<![CDATA[
  <uses-permission android:name="android.permission.USE_SIP" />
  <uses-permission android:name="android.permission.INTERNET" />
  <uses-feature android:name="android.software.sip.voip" android:required="true" />
  <uses-feature android:name="android.hardware.wifi" android:required="true" />
  <uses-feature android:name="android.hardware.microphone" android:required="true" />
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
<uses-feature android:name="android.software.sip.voip" />		
		]]>
		</programlisting>
	</section>
	<section id="isVoipSupported">
		<title>查看设备是否支持 voip 和 api</title>
		<programlisting>
		<![CDATA[
            sipManager = SipManager.newInstance(this);

            boolean isVoipSupported = SipManager.isVoipSupported(this);
            boolean isApiSupported = SipManager.isApiSupported(this);
            Log.d(TAG, "isVoipSupported: " + isVoipSupported + " isApiSupported: " + isApiSupported);		
		]]>
		</programlisting>
		<para>如果返回 isVoipSupported: false isApiSupported: false 表示设备不支持</para>
	</section>
	<section id="SipProfile">
		<title>SipProfile</title>
		<programlisting>
		<![CDATA[
        SipProfile sipProfile = new SipProfile.Builder(username, domain)
                .setPassword(password)
                .setOutboundProxy("139.9.54.211")
                .setPort(5060)
                .build();
        Log.d(TAG, "sipProfile " + sipProfile.getUriString());		
		]]>
		</programlisting>
	</section>
	<section id="sipManager.register">
		<title>sipManager.register</title>
		<programlisting>
		<![CDATA[
		sipManager.open(sipProfile);
		        
        sipManager.register(sipProfile, 3600, new SipRegistrationListener() {


            @Override
            public void onRegistering(String localProfileUri) {
                Log.d(TAG, localProfileUri);
            }

            @Override
            public void onRegistrationDone(String localProfileUri, long expiryTime) {
                Log.d(TAG, localProfileUri + " " + expiryTime);
            }

            @Override
            public void onRegistrationFailed(String localProfileUri, int errorCode, String errorMessage) {
                Log.d(TAG, localProfileUri + " " + errorCode + " " + errorMessage);
            }
        });

        boolean status = sipManager.isRegistered(sipProfile.getUriString());

        Log.d(TAG, "SIP Register: " + status);		
		]]>
		</programlisting>
	</section>
	<section id="sipManager.setRegistrationListener">
		<title>sipManager.setRegistrationListener</title>
		<programlisting>
		<![CDATA[
        sipManager.setRegistrationListener(sipProfile.getUriString(), new SipRegistrationListener() {

            public void onRegistering(String localProfileUri) {
                Log.d(TAG, "Registering with SIP Server...");
            }

            public void onRegistrationDone(String localProfileUri, long expiryTime) {
                Log.d(TAG, "Ready");
            }

            public void onRegistrationFailed(String localProfileUri, int errorCode,
                                             String errorMessage) {
                Log.d(TAG, "Registration failed.  Please check settings.");
            }
        });

        boolean status = sipManager.isRegistered(sipProfile.getUriString());

        Log.d(TAG, "SIP Register: " + status);        
		]]>
		</programlisting>
	</section>
	<section>
		<title>拨打 SIP 电话</title>
		<programlisting>
		<![CDATA[
    public SipAudioCall audioCall(String sipAddress) throws SipException {
        SipAudioCall.Listener listener = new SipAudioCall.Listener() {

            @Override
            public void onCallEstablished(SipAudioCall call) {
                call.startAudio();
                call.setSpeakerMode(true);
                call.toggleMute();
            }

            @Override

            public void onCallEnded(SipAudioCall call) {
                // Do something.
            }
        };
        SipAudioCall call = sipManager.makeAudioCall(sipProfile.getUriString(), sipAddress, listener, 30);
        return call;
    }
		]]>
		</programlisting>
	</section>
	<section id="sipManager.close">
		<title>挂断电话</title>
		<programlisting>
		<![CDATA[
    public void closeLocalProfile() {
        if (sipManager == null) {
            return;
        }
        try {
            if (sipProfile != null) {
                sipManager.close(sipProfile.getUriString());
            }
        } catch (Exception ee) {
            Log.d(TAG, "Failed to close local profile.", ee);
        }
    }
		]]>
		</programlisting>
	</section>
	<section>
		<title></title>
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>
	</section>
</chapter>