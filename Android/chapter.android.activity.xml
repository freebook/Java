<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="activity" ?>
	<title>Activity</title>

	<section id="setContentView">
		<title>定义 UI </title>
		<programlisting>
		<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
     <application android:label="Test">
 
		...
		...
        <activity android:name=".WriteActivity"></activity>

    </application>

</manifest>		
		]]>
		</programlisting>
		<programlisting>
			<![CDATA[
setContentView(R.layout.view);			
			]]>
		</programlisting>
	</section>
	<section id="隐藏虚拟键">
		<title>隐藏虚拟键</title>
		<programlisting>
		<![CDATA[
        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE;
        getWindow().getDecorView().setSystemUiVisibility(uiOptions);	
        
        View decorView = getWindow().getDecorView();
        int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
        decorView.setSystemUiVisibility(uiOptions);        	
		]]>
		</programlisting>
		<para>Android API 30</para>
		<programlisting>
		<![CDATA[
        WindowInsetsController controller = getWindow().getDecorView().getWindowInsetsController();
        controller.hide(WindowInsets.Type.statusBars());
        controller.hide(WindowInsets.Type.navigationBars());
        controller.hide(WindowInsets.Type.systemBars());		
		]]>
		</programlisting>
	</section>

	<section id="显式四种跳转方式">
		<title>显式四种跳转方式</title>
		<programlisting>
		<![CDATA[
    Intent intent = new Intent(MainActivity.this,HomeActivity.class);
    startActivity(intent);

    Intent intent = new Intent();
    intent.setClass(MainActivity.this,HomeActivity.class);
    startActivity(intent);

    Intent intent = new Intent();
    ComponentName componentName = new ComponentName(MainActivity.this,HomeActivity.class);
    intent.setComponent(componentName);
    startActivity(intent);


	startActivity(new Intent(MainActivity.this,HomeActivity.class));
		
		]]>
		</programlisting><section id="startActivity">
		<title>startActivity()</title>

		<para></para>
		<programlisting>
		<![CDATA[
		Button button = (Button) findViewById(R.id.writeButton);

        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                setContentView(R.layout.activity_write);
                Intent intent = new Intent(MainActivity.this,WriteActivity.class);
                startActivity(intent);
            }
        });		
		]]>
		</programlisting>
	</section>
	</section>
	<section id="定时关闭">
		<title>定时关闭</title>
		<programlisting>
		<![CDATA[
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Toast.makeText(getApplicationContext(), "5秒后关闭", Toast.LENGTH_SHORT).show();
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            public void run() {
                //结束本界面并跳转到收派员列表的界面
                finish();
            }
        }, 5000);

    }
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
	new Handler().postDelayed(new Runnable() {
        @Override
        public void run() {
            view.close();
        }
    }, 10000);		
		]]>
		</programlisting>
	</section>
	<section id="恢复触发">
		<title>恢复触发</title>
		<para>程序回到桌面，例如设置WI-FI，让步在回到程序，安卓会调用 onResume()</para>
		<programlisting>
		<![CDATA[
    @Override
    public void onResume() {
        super.onResume();
        this.other();
    }		
		]]>
		</programlisting>
	</section>

	<section id="返回触发">
		<title>返回触发</title>
		<programlisting>
		<![CDATA[
    @Override
    public void onBackPressed() {
        // code here to show dialog
        super.onBackPressed();  // optional depending on your needs
        ...
    }		
		]]>
		</programlisting>
	</section>
	<section id="保持屏幕常开">
		<title>保持屏幕常开</title>
		<programlisting>
		<![CDATA[
getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);		
		]]>
		</programlisting>
		<para>取消设置</para>
		<programlisting>
		<![CDATA[
getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);		
		]]>
		</programlisting>
	</section>
	<section id="标题栏添加返回按钮">
		<title>标题栏添加返回按钮</title>
		<para>onCreate 中添加</para>
		<programlisting>
		<![CDATA[
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.settings_activity);

        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
        }
	}
		]]>
		</programlisting>
		<para>Activity 中添加</para>
		<programlisting>
		<![CDATA[
 	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                return true;
            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }

		]]>
		</programlisting>
		<para>在AndroidManifest.xml中标明Activity的主题</para>
		<programlisting>
		<![CDATA[
<activity
            android:name=".ui.ShareActivity"
            android:exported="false"
            android:theme="@style/AppTheme"/>		
		]]>
		</programlisting>
		<para>values/styles.xml 文件中增加</para>
		<programlisting>
		<![CDATA[
 	<style name="AppTheme" parent="Base.Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorThemeBackGround</item>
        <item name="colorPrimaryDark">@color/colorThemeBackGround</item>
        <item name="colorAccent">@color/colorThemeBackGround</item>
    </style>
		
		]]>
		</programlisting>
	</section>
	

	<section id="Intent">
		<title>Activity 间数据传递</title>
		<section>
			<title>Intent 方式</title>
			<para>设置数据</para>
			<programlisting>
			<![CDATA[
Intent intent= new Intent();
intent.putExtra("name","zhangsan");			
			]]>
			</programlisting>
			<para>取出数据</para>
			<programlisting>
			<![CDATA[
Intent intent = getIntent();
String name=intent.getStringExtra("name");			
			]]>
			</programlisting>
		</section>

		<section>
			<title>Bundle 方式</title>

			<programlisting>
		<![CDATA[
Intent it = new Intent(Activity.Main.this, Activity2.class);
Bundle bundle=new Bundle();
bundle.putString("name", "This is from MainActivity!");
it.putExtras(bundle);
startActivity(it);		
		]]>
			</programlisting>
			<para>获取数据</para>
			<programlisting>
		<![CDATA[
Bundle bundle=getIntent().getExtras();
String name=bundle.getString("name");		
		]]>
			</programlisting>
		</section>
		<section>
			<title>Flag 属性</title>
			<para>Flag属性用来设定Activity的启动模式</para>
			<programlisting>
			<![CDATA[
Intent intent = new Intent();
intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			]]>
			</programlisting>
			<para>与清单文件中的设置launchMode属性值相同</para>
			<programlisting>
			<![CDATA[
Intent.FLAG_ACTIVITY_CLEAR_TOP = singleTask
Intent.FLAG_ACTIVITY_SINGLE_TOP = singleTop
Intent.FLAG_ACTIVITY_NEW_TASK = singleInstance			
			]]>
			</programlisting>
			<section>
				<title>在 Service，BroadcastReceiver 中切换 View</title>
				<para>FLAG_ACTIVITY_NEW_TASK</para>
				<programlisting>
				<![CDATA[
context.startActivity(new Intent(context, PictureBookFullscreenActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));				
				]]>
				</programlisting>
				<para>在非Activity（比如Service，BroadcastReceiver）中startActivity需要添加flag Intent.FLAG_ACTIVITY_NEW_TASK</para>
			</section>
		</section>
		<section>
			<title>返回值</title>
			<para>有返回值的跳转</para>
			<programlisting>
			<![CDATA[
Intent intent = new Intent(MainActivity.this,HomeActivity.class);
intent.putExtra("nickname","netkiller");
// 第一个参数Intent对象, 第二个参数 RequestCode
startActivityForResult(intent,REQUSET_CODE);
			
			]]>
			</programlisting>
			<para>第一个参数 是不是我要的返回结果 第二个参数 是谁返回给我的 第三个参数 返回的附加信息</para>
			<programlisting>
			<![CDATA[
	@Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent intent) {
        super.onActivityResult(requestCode, resultCode, intent);

        if(requestCode == REQUSET_CODE && resultCode == HomeActivity.RESULT_CODE){
            String msg = data.getStringExtra("msg");
            Toast.makeText(MainActivity.this,msg,Toast.LENGTH_SHORT).show();
        }
    }			
			]]>
			</programlisting>
			<para>返回结果</para>
			<programlisting>
			<![CDATA[
Intent intent = new Intent();
Intent oldIntent = getIntent();
String nickname = oldIntent.getStringExtra("nickname");
if(TextUtils.isEmpty(nickname)){
    intent.putExtra("msg",nickname);
}else{
    intent.putExtra("msg","Neo");
}

setResult(RESULT_CODE,intent);
//关闭页面
finish();
			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="intentActivityResultLauncher">
		<title>intentActivityResultLauncher 跳转</title>
		<programlisting>
		<![CDATA[
// 定义跳转
ActivityResultLauncher<Intent> intentActivityResultLauncher =
        registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
    Intent data = result.getData();
    if (result.getResultCode() == RESULT_OK && data != null) {
       // 一些逻辑
    }

});
                
// 使用时
Intent intent = new Intent(this,跳转到的.class);

// 执行跳转
intentActivityResultLauncher.launch(intent);		
		]]>
		</programlisting>
	</section>
	<section id="startActivityForResult">
		<title>startActivityForResult 替代方案</title>
		<para>startActivityForResult 即将废弃</para>
		<programlisting>
		<![CDATA[
    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        try {
            startActivityForResult(takePictureIntent, 1);
        } catch (ActivityNotFoundException e) {
            // display error state to the user
        }
    }		
		]]>
		</programlisting>
		<para>替代方案是</para>
		<programlisting>
		<![CDATA[
   //拍照
    private final ActivityResultLauncher<Void> mLauncherCamera = registerForActivityResult(
    new ActivityResultContracts.TakePicturePreview(), result -> {
        //result为拍摄照片Bitmap格式
    });

    //开启拍照, 返回结果Bitmap
    private void launchCamera() {
        mLauncherCamera.launch(null);
    }		
		]]>
		</programlisting>
		<section>
			<title>返回值</title>
			<programlisting>
			<![CDATA[
package cn.netkiller;
 
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.widget.TextView;
 
public class SubActivity extends Activity{
	private TextView tv1;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.sub);
		tv1 = (TextView)this.findViewById(R.id.tv1);
		Intent intent = new Intent(); 
		intent.putExtra("response", "返回码为200");
		setResult(200,intent); 
		finish();
	}
 
}

			
			]]>
			</programlisting>


			<programlisting>
		<![CDATA[
package cn.netkiller;
 
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
 
public class IntentActivity extends Activity {
	private Button btn1;
	private TextView tv1;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        btn1 = (Button)this.findViewById(R.id.brn1);
        tv1 = (TextView)this.findViewById(R.id.tv2);
        btn1.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent();
				intent.setClass(IntentActivity.this, SubActivity.class);
				startActivityForResult(intent, 100); //requestcode=100
				
			}
		});
    }
    //回调函数，会根据requesrCode进行不同的响应
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if(requestCode==100){
			// TODO: 响应逻辑
		}
		if(resultCode==200){
			Bundle bundle = data.getExtras();
			String response = bundle.getString("response");
			tv1.setText(response);
		}
	}
    
}
		]]>
			</programlisting>
		</section>
	</section>
	<section id="Activity.finish()">
		<title>Activity 关闭</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.album;

import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

public class HotelActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hotel);

        TextView hotelClose = (TextView) findViewById(R.id.hotelClose);

        hotelClose.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

    }
}		
		]]>
		</programlisting>
		<section>
			<title>退出 App</title>
			<para>AndroidManifest.xml 中 activity 添加 android:launchMode="singleTask"</para>
			<programlisting>
			<![CDATA[
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTask">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.HOME" />
                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>			
			]]>
			</programlisting>
			<para>MainActivity 中添加 onNewIntent(Intent intent)</para>
			<programlisting>
			<![CDATA[
  	@Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        if (intent != null) {
            boolean isExit = intent.getBooleanExtra("QUIT", false);
            if (isExit) {
                this.finish();
            }
        }
    }			
			]]>
			</programlisting>
			<para>调用 quit 方法即可正常退出主程序</para>
			<programlisting>
			<![CDATA[
    public void quit(View v) {
        Intent intent = new Intent(this, MainActivity.class);
        intent.putExtra("QUIT", true);
        startActivity(intent);
    }			
			]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>DataBinding</title>
		<para>以 MainActivity 为例，为 MainActivity 添加 DataBinding</para>
		<programlisting>
		<![CDATA[
import cn.netkiller.student.databinding.ActivityMainBinding;
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
public class MainActivity extends AppCompatActivity {
    private static final String TAG = MainActivity.class.getSimpleName();
    private ActivityMainBinding binding;
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
	}
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>
	</section>
	<section id="App间跳转">
		<title>App 间跳转</title>
		<programlisting>
		<![CDATA[
    Intent intent = new Intent(Intent.ACTION_MAIN);
    //前提：知道要跳转应用的包名、类名
    ComponentName componentName = new ComponentName("cn.netkiller.album.hotel", "cn.netkiller.album.hotel.MainActivity");
    intent.setComponent(componentName);
    startActivity(intent);
		]]>
		</programlisting>
	</section>
	&section.android.res.xml;
</chapter>