<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="thread" ?>
	<title>Android 多线程</title>
	<section id="android.thread">
		<title>Thread</title>
		<para>配置权限</para>
		<screen>
		<![CDATA[
    new Thread("画画线程") {
         @Override
         public void run() {
             picture(question);
         }
     }.start();
     
     new Thread("GPT线程") {
         @Override
         public void run() {
             if (question != null) {
                 String sentence = cleaning();
                 chatgpt(sentence);
             }
         }
     }.start();
		]]>
		</screen>
		<para></para>
		<programlisting>
		<![CDATA[
// 步骤1：创建线程类，继承自Thread类
class MyThread extends Thread{

	// 步骤2：复写run（），内容 = 定义线程行为
    @Override
    public void run(){
    ... // 定义的线程行为
    }
}

// 步骤3：实例化线程类
MyThread mt=new MyThread(“线程名称”);

// 步骤4：通过线程对象控制线程的状态，如 运行、睡眠、挂起  / 停止
// start（）开启线程
mt.start();		
		]]>
		</programlisting>
		<section>
			<title>线程名称</title>
			<programlisting>
			<![CDATA[
Log.d("Thread", "Current thread: " + Thread.currentThread().getName());			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
Thread myThread = new Thread(new Runnable() {
    @Override
    public void run() {
        Log.d("Thread", "Running in: " + Thread.currentThread().getName());
    }
}, "MyBackgroundThread"); // 设置线程名称为 "MyBackgroundThread"

myThread.start();			
			]]>
			</programlisting>
		</section>
		<section>
			<title>线程名称</title>
			<programlisting>
			<![CDATA[
myThread.setName("MyThread");
			]]>
			</programlisting>
		</section>
		<section id="thread.sleep">
			<title>Sleep</title>
			<programlisting>
			<![CDATA[
    try {

        Thread.sleep(10000);

    } catch (InterruptedException e) {

        Log.e("Location", e.getMessage());

    }
			]]>
			</programlisting>
		</section>

	</section>
	<section id="android.Handler">
		<title>Handler</title>
		<programlisting>
		<![CDATA[
	new Handler().post(new Runnable() {
        @Override
        public void run() {
              mTest.setText("post"); //更新UI
        }
    });		
		]]>
		</programlisting>
	</section>
	<section id="HandlerThread">
		<title>HandlerThread</title>
		<programlisting>
		<![CDATA[
// 实例对象，参数为线程名字
HandlerThread handlerThread = new HandlerThread("handlerThread");
// 启动线程
handlerThread.start();

// 参数为 HandlerThread 内部的一个 looper
    Handler handler = new Handler(handlerThread.getLooper()) {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
        }
    };
		]]>
		</programlisting>
		<para>HandlerThread 与 Thread 有什么不同？</para>
		<programlisting>
		<![CDATA[
// HandlerThread 相当于下面代码
new Thread () {
    @Override
    public void run() {
        Looper.prepare();
        Hnadler handler = new Handler();
        Looper.loop();
    } 
}
		
		]]>
		</programlisting>
		<section id="Handler.post">
			<title>Handler post</title>
			<programlisting>
			<![CDATA[
		mHanderThread = new HandlerThread(TAG);
        mHanderThread.start();
        mHandler = new Handler(mHanderThread.getLooper());
        mHandler.post(new Runnable() {
            @Override
            public void run() {


            }
        });
			]]>
			</programlisting>
		</section>
		<section id="Handler.SendMessage">
			<title>发送消息</title>
			<programlisting>
			<![CDATA[
// 步骤1：创建HandlerThread实例对象
// 传入参数 = 线程名字，作用 = 标记该线程
   HandlerThread mHandlerThread = new HandlerThread("handlerThread");

// 步骤2：启动线程
   mHandlerThread.start();

// 步骤3：创建工作线程Handler & 复写handleMessage（）
// 作用：关联HandlerThread的Looper对象、实现消息处理操作 & 与其他线程进行通信
// 注：消息处理操作（HandlerMessage（））的执行线程 = mHandlerThread所创建的工作线程中执行
  Handler workHandler = new Handler( mHandlerThread.getLooper() ) {
            @Override
            public boolean handleMessage(Message msg) {
				switch (msg.what) {
                    case DownloadThread.TYPE_START:
                        Log.e(TAG, "TYPE_START");
                        break;
                    case DownloadThread.TYPE_FINISHED:
                        Log.e(TAG, "TYPE_FINISHED");
                        break;
                    default:
                        break;
                }
                return true;
            }
        });

// 步骤4：使用工作线程Handler向工作线程的消息队列发送消息
// 在工作线程中，当消息循环时取出对应消息 & 在工作线程执行相关操作
  // a. 定义要发送的消息
  Message msg = Message.obtain();
  msg.what = 2; //消息的标识
  msg.obj = "B"; // 消息的存放
  // b. 通过Handler发送消息到其绑定的消息队列
  workHandler.sendMessage(msg);

// 步骤5：结束线程，即停止线程的消息循环
  mHandlerThread.quit();			
			]]>
			</programlisting>
		</section>
		<section>
			<title>完整例子</title>
			<programlisting>
			<![CDATA[
public class MainActivity extends AppCompatActivity {

    Handler mainHandler,workHandler;
    HandlerThread mHandlerThread;
    TextView text;
    Button button1,button2,button3;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // 显示文本
        text = (TextView) findViewById(R.id.text1);

        // 创建与主线程关联的Handler
        mainHandler = new Handler();

        /**
          * 步骤1：创建HandlerThread实例对象
          * 传入参数 = 线程名字，作用 = 标记该线程
          */
        mHandlerThread = new HandlerThread("handlerThread");

        /**
         * 步骤2：启动线程
         */
        mHandlerThread.start();

        /**
         * 步骤3：创建工作线程Handler & 复写handleMessage（）
         * 作用：关联HandlerThread的Looper对象、实现消息处理操作 & 与其他线程进行通信
         * 注：消息处理操作（HandlerMessage（））的执行线程 = mHandlerThread所创建的工作线程中执行
         */

        workHandler = new Handler(mHandlerThread.getLooper()){
            @Override
            // 消息处理的操作
            public void handleMessage(Message msg)
            {
                //设置了两种消息处理操作,通过msg来进行识别
                switch(msg.what){
                    // 消息1
                    case 1:
                        try {
                            //延时操作
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        // 通过主线程Handler.post方法进行在主线程的UI更新操作
                        mainHandler.post(new Runnable() {
                            @Override
                            public void run () {
                                text.setText("我爱学习");
                            }
                        });
                        break;

                    // 消息2
                    case 2:
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        mainHandler.post(new Runnable() {
                            @Override
                            public void run () {
                                text.setText("我不喜欢学习");
                            }
                        });
                        break;
                    default:
                        break;
                }
            }
        };

        /**
         * 步骤4：使用工作线程Handler向工作线程的消息队列发送消息
         * 在工作线程中，当消息循环时取出对应消息 & 在工作线程执行相关操作
         */
        // 点击Button1
        button1 = (Button) findViewById(R.id.button1);
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // 通过sendMessage（）发送
                // a. 定义要发送的消息
                Message msg = Message.obtain();
                msg.what = 1; //消息的标识
                msg.obj = "A"; // 消息的存放
                // b. 通过Handler发送消息到其绑定的消息队列
                workHandler.sendMessage(msg);
            }
        });

        // 点击Button2
        button2 = (Button) findViewById(R.id.button2);
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // 通过sendMessage（）发送
                // a. 定义要发送的消息
                Message msg = Message.obtain();
                msg.what = 2; //消息的标识
                msg.obj = "B"; // 消息的存放
                // b. 通过Handler发送消息到其绑定的消息队列
                workHandler.sendMessage(msg);
            }
        });

        // 点击Button3
        // 作用：退出消息循环
        button3 = (Button) findViewById(R.id.button3);
        button3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mHandlerThread.quit();
            }
        });

    }
    
}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>获取线程名称</title>
			<programlisting>
			<![CDATA[
HandlerThread handlerThread = new HandlerThread("MyHandlerThread");
handlerThread.start();

// 获取 HandlerThread 的 Looper 并创建 Handler
Handler handler = new Handler(handlerThread.getLooper());

// 获取线程名称
String threadName = handlerThread.getName(); // "MyHandlerThread"			
			]]>
			</programlisting>
		</section>
		<section id="HandlerThread.post.sleep">
			<title>HandlerThread 队列</title>
			<para></para>
			<programlisting>
			<![CDATA[
HandlerThread handerThread = new HandlerThread(TAG);
        handerThread.start();
        Handler handler = new Handler(handerThread.getLooper());
        handler.post(new Runnable() {
            @Override
            public void run() {

                try {
                    Thread.sleep(10000);
                    Log.d(TAG, "handerThread 1 " + handerThread.getThreadId());
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

            }
        });
        handler.post(new Runnable() {
            @Override
            public void run() {

                try {
                    Thread.sleep(1000);
                    Log.d(TAG, "handerThread 2 " + handerThread.getThreadId());
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

            }
        });
        handler.post(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "handerThread 3 " + handerThread.getThreadId());
            }
        });
        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                Log.d(TAG, "handerThread 4 " + handerThread.getThreadId());
            }
        });			
			]]>
			</programlisting>
		</section>
	</section>
	
	
	<section id="android.queue">
		<title>消息队列</title>
		<section id="ConcurrentLinkedQueue">
			<title>非阻塞队列 ConcurrentLinkedQueue</title>
			<programlisting>
			<![CDATA[
 boolean	add(E e) 					将指定元素插入此队列的尾部。
 boolean	contains(Object o)          如果此队列包含指定元素，则返回 true。
 boolean	isEmpty() 		            如果此队列不包含任何元素，则返回 true。
 Iterator<E>	iterator()          返回在此队列元素上以恰当顺序进行迭代的迭代器。
 boolean	offer(E e)           	将指定元素插入此队列的尾部。
 E			peek()           		获取但不移除此队列的头；如果此队列为空，则返回 null。
 E			poll()           		获取并移除此队列的头，如果此队列为空，则返回 null。
 boolean	remove(Object o)        从队列中移除指定元素的单个实例（如果存在）。
 int		size()           		返回此队列中的元素数量。
 Object[]	toArray()           	返回以恰当顺序包含此队列所有元素的数组。
<T> T[] 	toArray(T[] a)          返回以恰当顺序包含此队列所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。
			]]>
			</programlisting>
		</section>
	</section>
</chapter>
