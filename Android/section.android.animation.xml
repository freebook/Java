<?xml version="1.0" encoding="UTF-8"?>
<section id="AnimationSet">
	<title>动画</title>

	<section id="ScaleAnimation">
		<title>ScaleAnimation</title>
		<screen>
		<![CDATA[
ScaleAnimation (float fromX, float toX, float fromY, float toY, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)

参数说明
fromX：起始X坐标上的伸缩尺寸。
toX：结束X坐标上的伸缩尺寸。
fromY：起始Y坐标上的伸缩尺寸。
toY：结束Y坐标上的伸缩尺寸。
pivotXType：X轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT。
pivotXValue：X坐标的伸缩值。
pivotYType：Y轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT。
pivotYValue：Y坐标的伸缩值。		
		]]>
		</screen>
		<para>放大图片 1.5 倍率</para>
		<programlisting>
		<![CDATA[
   final ScaleAnimation scaleAnimation = new ScaleAnimation(1f, 1.5f, 1f, 1.5f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
        scaleAnimation.setDuration(5000);
        scaleAnimation.setStartOffset(1000);
        scaleAnimation.setFillAfter(true);
        imageViewFigure.startAnimation(scaleAnimation);

		]]>
		</programlisting>
	</section>
	<section id="AlphaAnimation">
		<title>AlphaAnimation</title>
		<para>透明度动画</para>
		<programlisting>
	<![CDATA[
	    AlphaAnimation alphaAnimation = new AlphaAnimation(1, 0.8f);
	    alphaAnimation.setDuration(1000);
	    alphaAnimation.setRepeatCount(1);
	    alphaAnimation.setRepeatMode(Animation.REVERSE);
	    alphaAnimation.setFillAfter(true);
	]]>
		</programlisting>
	</section>
		<section id="ObjectAnimator">
		<title>ObjectAnimator</title>
		<para>透明度动画</para>
		<programlisting>
		<![CDATA[
// 创建一个ObjectAnimator对象，指定动画目标为ImageView的scaleX属性，实现水平缩放
ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(imageView, "scaleX", 1f, 1.5f, 1f);
// 设置动画持续时间为500毫秒
scaleXAnimator.setDuration(500);

// 创建一个ObjectAnimator对象，指定动画目标为ImageView的scaleY属性，实现垂直缩放
ObjectAnimator scaleYAnimator = ObjectAnimator.ofFloat(imageView, "scaleY", 1f, 1.5f, 1f);
// 设置动画持续时间为500毫秒
scaleYAnimator.setDuration(500);
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
// 设置动画重复次数为无限循环
scaleXAnimator.setRepeatCount(ValueAnimator.INFINITE);
scaleYAnimator.setRepeatCount(ValueAnimator.INFINITE);

// 设置动画重复模式为反向重复
scaleXAnimator.setRepeatMode(ValueAnimator.REVERSE);
scaleYAnimator.setRepeatMode(ValueAnimator.REVERSE);

// 设置动画插值器为加速插值器
scaleXAnimator.setInterpolator(new AccelerateInterpolator());
scaleYAnimator.setInterpolator(new AccelerateInterpolator());
		]]>
		</programlisting>
	</section>
	<section>
		<title>AnimatorListener</title>
		<para>AnimatorListener 动画监听器</para>
		<programlisting>
		<![CDATA[
animator.addListener(new Animator.AnimatorListener() {
    @Override
    public void onAnimationStart(Animator animator) {
        // 动画开始时执行的操作
    }

    @Override
    public void onAnimationEnd(Animator animator) {
        // 动画结束时执行的操作
    }

    @Override
    public void onAnimationCancel(Animator animator) {
        // 动画被取消时执行的操作
    }

    @Override
    public void onAnimationRepeat(Animator animator) {
        // 动画重复时执行的操作
    }
});
		]]>
		</programlisting>
	</section>
	<section>
		<title>变速曲线</title>
		<para>scaleAnimation.setInterpolator(new AccelerateInterpolator());</para>
		<programlisting>
		<![CDATA[
java类	xml资源id	说明
AccelerateDecelerateInterpolator	@android:anim/accelerate_decelerate_interpolator	其变化开始和结束速率较慢，中间加速
AccelerateInterpolator	@android:anim/accelerate_interpolator	其变化开始速率较慢，后面加速
DecelerateInterpolator	@android:anim/decelerate_interpolator	其变化开始速率较快，后面减速
LinearInterpolator	@android:anim/linear_interpolator	其变化速率恒定
AnticipateInterpolator	@android:anim/anticipate_interpolator	其变化开始向后甩，然后向前
AnticipateOvershootInterpolator	@android:anim/anticipate_overshoot_interpolator	其变化开始向后甩，然后向前甩，过冲到目标值，最后又回到了终值
OvershootInterpolator	@android:anim/overshoot_interpolator	其变化开始向前甩，过冲到目标值，最后又回到了终值
BounceInterpolator	@android:anim/bounce_interpolator	其变化在结束时反弹
CycleInterpolator	@android:anim/cycle_interpolator	循环播放，其速率为正弦曲线
TimeInterpolator	 	一个接口，可以自定义插值器
		]]>
		</programlisting>
	</section>
	<section>
		<title>AnimationSet</title>
		<para>AnimationSet 用于多组动画管理</para>
		<programlisting>
		<![CDATA[
AnimationSet animationSet = new AnimationSet(true);

         final ScaleAnimation scaleAnimation = new ScaleAnimation(0f, 1f, 0f, 1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
         ScaleAnimation scale = new ScaleAnimation(1, 0, 1, 1, 1, 1);
         animationSet.setDuration(1000);
         animationSet.addAnimation(scaleAnimation);
         imageViewFigure.startAnimation(animationSet);
]]>
		</programlisting>
	</section>
</section>