<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="kotlin" ?>
	<title>从 Java 到 Kotlin</title>
	<section id="kotlin.data">
		<title>数据类型与数据结构</title>
		<section>
			<title>循环</title>
			<programlisting>
			<![CDATA[
for (x in 1..5) {
    print(x)
}			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
for (x in 1..10 step 2) {
    print(x)
}
println()
for (x in 9 downTo 0 step 3) {
    print(x)
}			
			]]>
			</programlisting>
		</section>


		<section>
			<title>字符串</title>
			<section>
				<title>字符串转数字</title>
				<programlisting>
				<![CDATA[
"1".toInt()			
				]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>日期时间</title>
			<programlisting>
			<![CDATA[
val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
val formattedDate = dateFormat.format(Date())			
			]]>
			</programlisting>
		</section>
		<section>
			<title>数组</title>
			<programlisting>
			<![CDATA[
val arr = arrayOf(
    "13113668890", "111222445", "14566677",
    "20034534535", "21398989"
)			
			]]>
			</programlisting>
		</section>

		<section id="kotlin.list">
			<title>List 列表</title>
			<section>
				<title>ArrayList</title>
				<programlisting>
				<![CDATA[
val arrayList = ArrayList<String>()
arrayList.add("Java")
arrayList.add("Kotlin")
arrayList.add("Python")
println("ArrayList: $arrayList")				
				]]>
				</programlisting>
			</section>
			<section>
				<title>List.of</title>

				<programlisting>
				<![CDATA[
listOf("debug", "dev").contains(BuildConfig.BUILD_TYPE)			
				]]>
				</programlisting>
			</section>
			<section>
				<title>列表转数组</title>
				<programlisting>
				<![CDATA[
val contact =
            mapOf(
                "BG7NYT" to "177",
                "BG7NEG" to "172",
                "BG7JWV" to "179",
                "BI7XYS" to "190",
                "BD7KBF" to "4612194"
            )

contact.values.toTypedArray()
				]]>
				</programlisting>
			</section>
			<section>
				<title>MutableList 可变列表集合</title>
				<programlisting>
				<![CDATA[
   // 创建可变列表集合
    var mutableList = mutableListOf("Tom", "Jerry")
    // 添加元素
    mutableList.add("Jack")
    // 删除元素
    mutableList.remove("Tom")
    println(mutableList)

    // 将 可变列表集合 转为 只读列表集合
    val list: List<String> = mutableList.toList()
    // 将 只读列表集合 转为 可变列表集合
    val mutable: MutableList<String> = list.toMutableList()				
				]]>
				</programlisting>
				<para>筛选并删除元素</para>
				<programlisting>
				<![CDATA[
fun main() {
    // 创建可变列表集合
    val mutableList = mutableListOf("Tom", "Jerry")
    // 通过 Lambda 表达式筛选要操作的元素
    // 删除包含 字母 T 的元素
    mutableList.removeIf {
        it.contains("T")
    }
    println(mutableList)
}

				]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>Map 图</title>
			<section>
				<title>Map.of</title>
				<programlisting>
				<![CDATA[
 mapOf("content" to "hello world")				
				]]>
				</programlisting>
			</section>
		</section>
	</section>
	<section id="kotlin.class">
		<title>Class</title>
		<programlisting>
			<![CDATA[

    public class TextMessage {
        public String msgtype;
        public Map<String, String> text;

    }
			]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
	class TextMessage {
        var msgtype: String? = null
        var text: Map<String, String>? = null
    }		
		]]>
		</programlisting>
	</section>
	<section id="kotlin.callback">
		<title>Callback 回调</title>
		<section>
			<title>Consumer</title>
			<programlisting>
			<![CDATA[
speakerRecognition.recognition(value.payload.result, Consumer { name: String ->
    honorific.put(value.payload.speaker_id, name)
    Log.i(TAG, "说话人识别：" + value.payload.speaker_id + " " + name)

})
			]]>
			</programlisting>
		</section>
	</section>

	<section id="kotlin.ui">
		<title>界面操作</title>

		<section id="findViewById">
			<title>findViewById</title>
			<programlisting>
			<![CDATA[
		var frameLayoutDebug = findViewById<FrameLayout>(R.id.frameLayoutDebug)
        frameLayoutDebug.visibility=View.VISIBLE
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
var textViewBuildType = findViewById<TextView>(R.id.textViewBuildType)
textViewBuildType.text = BuildConfig.BUILD_TYPE + " 内测版"			
			]]>
			</programlisting>
		</section>
		<section id="runOnUiThread">
			<title>runOnUiThread</title>
			<para>Java 用法</para>
			<programlisting>
			<![CDATA[
runOnUiThread(() -> {

});	
			]]>
			</programlisting>
			<para>切到 Kotlin</para>
			<programlisting>
			<![CDATA[
	runOnUiThread {
       	qrcodeFrameLayout.visibility = View.VISIBLE
    }			
			]]>
			</programlisting>
		</section>
		<section>
			<title>Fragment</title>
			<programlisting>
			<![CDATA[
			val transaction = parentFragmentManager.beginTransaction().replace(R.id.fragmentContainerView, SipFullscreenFragment()).addToBackStack(null).setReorderingAllowed(true).commit()
			]]>
			</programlisting>
			<para>给 Fragment 传参数，我门定义一个 newInstance 方法。</para>
			<programlisting>
			<![CDATA[
package com.ideasprite.conference.ui.phone

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import com.ideasprite.conference.R
import com.ideasprite.conference.databinding.FragmentCallFullscreenBinding


class CallFullscreenFragment : Fragment() {
    private lateinit var phoneNumber: String

    private var _binding: FragmentCallFullscreenBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        _binding = FragmentCallFullscreenBinding.inflate(inflater, container, false)

        binding.textViewCalledNumber.text = phoneNumber

        binding.imageViewHangup.setOnClickListener {

            val transaction = parentFragmentManager.beginTransaction().replace(R.id.fragmentContainerView, SipFullscreenFragment()).addToBackStack(null).setReorderingAllowed(true).commit()
        }

        return binding.root

    }

    companion object {
        fun newInstance(phoneNumber: String) = CallFullscreenFragment().apply {
            this.phoneNumber = phoneNumber
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
			val transaction = parentFragmentManager.beginTransaction()
            transaction.replace(R.id.fragmentContainerView, CallFullscreenFragment.newInstance(phoneNumber))//切换fragment 传递 phoneNumber 参数
            transaction.addToBackStack(null)
            transaction.setReorderingAllowed(true)
            transaction.commit()			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.thread">
		<title>Thread</title>
		<para></para>
		<section id="kotlin.Handler">
			<title>Handler</title>
			<programlisting>
			<![CDATA[
     Handler(Looper.getMainLooper()).postDelayed({
             if (AndroidManager.bluetoothMicrophone()) {
                 aigcSpeech.speaking("蓝牙麦克风连接")
             }
             Log.d(TAG, "Bluetooth connected")
         }, 3000)			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.timer">
		<title>定时与延迟执行</title>
		<section>
			<title>Timer</title>
			<programlisting>
			<![CDATA[
Timer().schedule(object : TimerTask() {
            override fun run() {
              //需要执行的任务
            }
        }, 1000)
			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
Timer().schedule(object : TimerTask() {
            override fun run() {
                //需要执行的任务
            }
        }, 0,2000)
		
			]]>
			</programlisting>
			<programlisting>
		<![CDATA[
	private var seconds = 0

    private val timer = Timer()
    private val timerTask: TimerTask = object : TimerTask() {
        override fun run() {
            val hours = seconds / 3600
            val minutes = (seconds % 3600) / 60
            val secs = seconds % 60

            var time = "00:00"

            if (hours == 0) {
                // 格式化时间为 HH:MM:SS
                time = String.format("%02d:%02d", minutes, secs)
            } else {
                // 格式化时间为 HH:MM:SS
                time = String.format("%02d:%02d:%02d", hours, minutes, secs)
            }

            binding.textViewTimer.text = time
            seconds++
        }
    }		
    
	override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        _binding = FragmentCallFullscreenBinding.inflate(inflater, container, false)

        timer.schedule(timerTask, 1000, 1000)

        return binding.root

    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        timer.cancel()
    }    
		]]>
		</programlisting>
		</section>
	</section>
	<section>
		<title>协程</title>
		<programlisting>
		<![CDATA[
GlobalScope.launch {
    while (true) {
        delay(1000)
        println("每秒执行一次")
    }
}
		]]>
		</programlisting>
	</section>>
	
	
</chapter>