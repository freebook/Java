<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="kotlin" ?>
	<title>从 Java 到 Kotlin</title>
	<section id="kotlin.data">
		<title>数据类型与数据结构</title>
		<section id="kotlin.string">
			<title>字符串</title>
			<section>
				<title>字符串转数字</title>
				<programlisting>
				<![CDATA[
"1".toInt()			
				]]>
				</programlisting>
			</section>
			<section id="kotlin.StringBuilder">
				<title>StringBuilder</title>
				<programlisting>
				<![CDATA[
fun main() {
    val builder = StringBuilder()
    builder.append("你好")
           .append("，")
           .append("世界")
           .append("！")
    
    val message = builder.toString()
    println(message) // 输出：你好，世界！
}				
				]]>
				</programlisting>
			</section>
		</section>
		<section id="kotlin.date">
			<title>日期时间</title>
			<programlisting>
			<![CDATA[
val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
val formattedDate = dateFormat.format(Date())			
			]]>
			</programlisting>
		</section>
		<section id="kotlin.array">
			<title>数组</title>
			<programlisting>
			<![CDATA[
val arr = arrayOf(
    "13113668890", "111222445", "14566677",
    "20034534535", "21398989"
)			
			]]>
			</programlisting>
		</section>

		<section id="kotlin.list">
			<title>List 列表</title>
			<section>
				<title>init</title>
				<programlisting>
				<![CDATA[
        val PATTERN: MutableList<String> = object : ArrayList<String>() {
            init {
                add(".*(?:发言|说话)人(\\d+).*")
                add(".*(?:发言|说话)人(一|二|三|四|五|六|七|八|九|十).*")
                add(".*(?:发言|说话)人(一|二|三|四|五|六|七|八|九|十).*")
                //            add("(.*)的观点.*");
            }
        }
				]]>
				</programlisting>
			</section>
			<section>
				<title>ArrayList</title>
				<programlisting>
				<![CDATA[
val arrayList = ArrayList<String>()
arrayList.add("Java")
arrayList.add("Kotlin")
arrayList.add("Python")
println("ArrayList: $arrayList")				
				]]>
				</programlisting>
			</section>
			<section>
				<title>List.of</title>

				<programlisting>
				<![CDATA[
listOf("debug", "dev").contains(BuildConfig.BUILD_TYPE)			
				]]>
				</programlisting>
			</section>
			<section>
				<title>列表转数组</title>
				<programlisting>
				<![CDATA[
val contact =
            mapOf(
                "BG7NYT" to "177",
                "BG7NEG" to "172",
                "BG7JWV" to "179",
                "BI7XYS" to "190",
                "BD7KBF" to "4612194"
            )

contact.values.toTypedArray()
				]]>
				</programlisting>
			</section>
			<section>
				<title>MutableList 可变列表集合</title>
				<programlisting>
				<![CDATA[
   // 创建可变列表集合
    var mutableList = mutableListOf("Tom", "Jerry")
    // 添加元素
    mutableList.add("Jack")
    // 删除元素
    mutableList.remove("Tom")
    println(mutableList)

    // 将 可变列表集合 转为 只读列表集合
    val list: List<String> = mutableList.toList()
    // 将 只读列表集合 转为 可变列表集合
    val mutable: MutableList<String> = list.toMutableList()				
				]]>
				</programlisting>
				<para>筛选并删除元素</para>
				<programlisting>
				<![CDATA[
fun main() {
    // 创建可变列表集合
    val mutableList = mutableListOf("Tom", "Jerry")
    // 通过 Lambda 表达式筛选要操作的元素
    // 删除包含 字母 T 的元素
    mutableList.removeIf {
        it.contains("T")
    }
    println(mutableList)
}

				]]>
				</programlisting>
			</section>
			<section>
				<title>forEach</title>
				<programlisting>
				<![CDATA[
var content = meetingDao.findByTaskId(meetingData.taskId).forEach { (id, taskId, time, speaker, sentence) ->
                Log.d(TAG, sentence)
            }				
				]]>
				</programlisting>
			</section>
			<section>
				<title>列表拼接字符串</title>
				<programlisting>
				<![CDATA[
var content = meetingDao.findByTaskId("5b4a5bd92da847d292ed74ae696a7ca1").map({ "${it.time} 发言人${it.speaker} ${it.sentence}" }).joinToString(separator = "\n")
Log.d(TAG, content)				
				]]>
				</programlisting>
			</section>
		</section>
		<section id="kotlin.map">
			<title>Map 图</title>
			<section>
				<title>init</title>
				<programlisting>
				<![CDATA[
        val digit: MutableMap<String?, String?> = object : HashMap<String?, String?>() {
            init {
                put("一", "1")
                put("二", "2")
                put("三", "3")
                put("四", "4")
                put("五", "5")
                put("六", "6")
                put("七", "7")
                put("八", "8")
                put("九", "9")
                put("十", "10")
                put("零", "0")
            }
        }				
				]]>
				</programlisting>
			</section>
			<section>
				<title>添加元素</title>
				<programlisting>
				<![CDATA[
// 方式1：显式指定泛型类型
val emptyMutableMap: MutableMap<String, Int> = mutableMapOf()

// 方式2：使用 HashMap 构造函数（Java 兼容方式）
val emptyHashMap = HashMap<String, Int>()

// 可变空 Map 的使用示例
fun main() {
    // 向可变空 Map 中添加元素
    emptyMutableMap["one"] = 1
    emptyMutableMap["two"] = 2
    
    emptyHashMap["three"] = 3
    
    println(emptyMutableMap) // 输出：{one=1, two=2}
    println(emptyHashMap)    // 输出：{three=3}
}
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>Map.of</title>
				<programlisting>
				<![CDATA[
 mapOf("content" to "hello world")
				]]>
				</programlisting>
			</section>
			<section>
				<title>mutableMapOf()</title>
				<programlisting>
				<![CDATA[
fun main() {
    // 创建并初始化可变 Map
    val mutableMap = mutableMapOf(
        "name" to "Alice",
        "age" to 25,
        "city" to "Beijing"
    )

    // 1. 添加键值对（若键已存在则覆盖）
    mutableMap["gender"] = "Female" // 用 [] 运算符
    mutableMap.put("job", "Engineer") // 用 put() 方法
    println("添加后: $mutableMap")

    // 2. 修改值
    mutableMap["age"] = 26 // 直接赋值覆盖
    mutableMap.replace("city", "Shanghai") // 用 replace() 方法
    println("修改后: $mutableMap")

    // 3. 删除键值对
    mutableMap.remove("job") // 按键删除
    println("删除后: $mutableMap")

    // 4. 清空 Map
    // mutableMap.clear()

    // 5. 检查是否包含键/值
    val hasName = mutableMap.containsKey("name")
    val hasAge30 = mutableMap.containsValue(30)
    println("包含 name 键: $hasName，包含 30 值: $hasAge30")

    // 6. 遍历 Map
    println("\n遍历键值对：")
    for ((key, value) in mutableMap) {
        println("$key: $value")
    }

    // 7. 转换为不可变 Map
    val immutableMap: Map<String, Any> = mutableMap.toMap()
}
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>反转 Map 的 key 与 value</title>
				<programlisting>
				<![CDATA[
 val originalMap = mapOf("a" to 1, "b" to 2, "c" to 2)

// 反转键值对（注意：如果值有重复，会导致键冲突，后面的键会覆盖前面的）
val reversedMap = originalMap.associateBy({ it.value }, { it.key })

println(reversedMap) // 输出: {1=a, 2=c}（值2对应的原键"b"被覆盖）
				]]>
				</programlisting>
				<programlisting>
				<![CDATA[
ConcurrentHashMap<String, String> speakers = new ConcurrentHashMap<>();
        speakers.put("1", "发言人一");
        speakers.put("2", "市场部小周");
        speakers.put("4", "陈先生");
        speakers.put("5", "齐天大圣");
        speakers.put("6", "一品轩小飞");
        speakers.put("7", "年年富");
        speakers.put("8", "李总");		
val invertedMap: Map<String, String> = speakers.entries.associateBy({ it.value as String }, { it.key as String })				
				]]>
				</programlisting>
			</section>
		</section>
	</section>
	<section id="kotlin.class">
		<title>Class</title>
		<programlisting>
			<![CDATA[

    public class TextMessage {
        public String msgtype;
        public Map<String, String> text;

    }
			]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
	class TextMessage {
        var msgtype: String? = null
        var text: Map<String, String>? = null
    }		
		]]>
		</programlisting>
		<section>
			<title>枚举</title>
			<programlisting>
			<![CDATA[
// 定义简单枚举
enum class Direction {
    NORTH, SOUTH, EAST, WEST
}

// 使用枚举
fun main() {
    val direction = Direction.NORTH
    println(direction) // 输出：NORTH
    
    // 遍历所有枚举值
    for (d in Direction.values()) {
        println(d)
    }
}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.loop">
		<title>流程控制</title>
		<section>
			<title></title>
			<programlisting>
			<![CDATA[
fun main() {
    val username: String? = "Alice"  // 可能为 null 的变量
    
    // 安全调用：仅当 username 非空时，才执行 let 内的逻辑
    username?.let {
        println("用户名长度：${it.length}")  // it 指代 username
        println("大写形式：${it.uppercase()}")
    }
    
    // 若 username 为 null，上述代码块不会执行
    val nullName: String? = null
    nullName?.let {
        println("这行不会执行")  // 永远不会被调用
    }
}			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
fun main() {
    val nullName: String? = null

    // 情况1：带 ?.let（安全调用）
    nullName?.let {
        println("执行不会执行") // 不会执行，无异常
    }

    // 情况2：不带 ? 的 let（直接调用）
    nullName.let { 
        println("执行") // 抛出 NullPointerException
    }
}
			]]>
			</programlisting>
		</section>
		<section>
			<title>循环</title>
			<programlisting>
			<![CDATA[
for (x in 1..5) {
    print(x)
}			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
for (x in 1..10 step 2) {
    print(x)
}
println()
for (x in 9 downTo 0 step 3) {
    print(x)
}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.callback">
		<title>Callback 回调</title>
		<section>
			<title>Consumer</title>
			<programlisting>
			<![CDATA[
speakerRecognition.recognition(value.payload.result, Consumer { name: String ->
    honorific.put(value.payload.speaker_id, name)
    Log.i(TAG, "说话人识别：" + value.payload.speaker_id + " " + name)

})
			]]>
			</programlisting>
		</section>
		<section>
			<title>callback</title>
			<programlisting>
			<![CDATA[
// 定义带返回值的回调函数类型
fun processData(input: String, callback: (String) -> String) {
    val result = callback(input) // 执行回调并获取返回值
    println("处理后的结果：$result")
}

// 使用
fun main() {
    processData("hello") { input ->
        input.uppercase() // 回调返回大写后的字符串
    }
    // 输出：处理后的结果：HELLO
}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>定义接口方式</title>
			<programlisting>
			<![CDATA[
// 1. 定义无返回值的回调接口
interface OnStatusListener {
    fun onStart() // 开始时回调（无返回值）
    fun onProgress(percent: Int) // 进度回调（有参数，无返回值）
    fun onFinish() // 结束时回调（无返回值）
}

// 2. 实现回调发送者
class Downloader {
    private var listener: OnStatusListener? = null

    fun setOnStatusListener(l: OnStatusListener) {
        listener = l
    }

    fun startDownload() {
        listener?.onStart() // 触发开始回调
        
        // 模拟下载进度
        for (i in 1..100 step 20) {
            Thread.sleep(500)
            listener?.onProgress(i) // 触发进度回调（无返回值）
        }
        
        listener?.onFinish() // 触发结束回调
    }
}

// 3. 使用回调
fun main() {
    val downloader = Downloader()
    downloader.setOnStatusListener(object : OnStatusListener {
        override fun onStart() {
            println("下载开始") // 无返回值，仅执行逻辑
        }

        override fun onProgress(percent: Int) {
            println("下载进度：$percent%") // 无返回值
        }

        override fun onFinish() {
            println("下载完成") // 无返回值
        }
    })
    
    downloader.startDownload()
}			
			]]>
			</programlisting>
		</section>
	</section>

	<section id="kotlin.ui">
		<title>界面操作</title>

		<section id="findViewById">
			<title>findViewById</title>
			<programlisting>
			<![CDATA[
		var frameLayoutDebug = findViewById<FrameLayout>(R.id.frameLayoutDebug)
        frameLayoutDebug.visibility=View.VISIBLE
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
var textViewBuildType = findViewById<TextView>(R.id.textViewBuildType)
textViewBuildType.text = BuildConfig.BUILD_TYPE + " 内测版"			
			]]>
			</programlisting>
		</section>
		<section id="runOnUiThread">
			<title>runOnUiThread</title>
			<para>Java 用法</para>
			<programlisting>
			<![CDATA[
runOnUiThread(() -> {

});	
			]]>
			</programlisting>
			<para>切到 Kotlin</para>
			<programlisting>
			<![CDATA[
	runOnUiThread {
       	qrcodeFrameLayout.visibility = View.VISIBLE
    }			
			]]>
			</programlisting>
		</section>
		<section id="kotlin.Fragment">
			<title>Fragment</title>
			<programlisting>
			<![CDATA[
			val transaction = parentFragmentManager.beginTransaction().replace(R.id.fragmentContainerView, SipFullscreenFragment()).addToBackStack(null).setReorderingAllowed(true).commit()
			]]>
			</programlisting>
			<para>给 Fragment 传参数，我门定义一个 newInstance 方法。</para>
			<programlisting>
			<![CDATA[
package com.ideasprite.conference.ui.phone

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import com.ideasprite.conference.R
import com.ideasprite.conference.databinding.FragmentCallFullscreenBinding


class CallFullscreenFragment : Fragment() {
    private lateinit var phoneNumber: String

    private var _binding: FragmentCallFullscreenBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        _binding = FragmentCallFullscreenBinding.inflate(inflater, container, false)

        binding.textViewCalledNumber.text = phoneNumber

        binding.imageViewHangup.setOnClickListener {

            val transaction = parentFragmentManager.beginTransaction().replace(R.id.fragmentContainerView, SipFullscreenFragment()).addToBackStack(null).setReorderingAllowed(true).commit()
        }

        return binding.root

    }

    companion object {
        fun newInstance(phoneNumber: String) = CallFullscreenFragment().apply {
            this.phoneNumber = phoneNumber
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
			val transaction = parentFragmentManager.beginTransaction()
            transaction.replace(R.id.fragmentContainerView, CallFullscreenFragment.newInstance(phoneNumber))//切换fragment 传递 phoneNumber 参数
            transaction.addToBackStack(null)
            transaction.setReorderingAllowed(true)
            transaction.commit()			
			]]>
			</programlisting>
		</section>
		<section id="kotlin">
			<title>ImageView</title>
			<section>
				<title>设置图片</title>
				<programlisting>
				<![CDATA[
			if (status) {
                phoneBinding?.imageViewLightWifi?.imageResource = R.drawable.stroke_color_rbtn_blue
            } else {
                phoneBinding?.imageViewLightWifi?.imageResource = R.drawable.stroke_color_rbtn_white
            }				
				]]>
				</programlisting>
				<para></para>
				<programlisting>
				<![CDATA[
val drawable: Drawable? = ResourcesCompat.getDrawable(resources, R.drawable.myimage, null)				
				]]>
				</programlisting>
			</section>
		</section>
	</section>
	<section id="kotlin.thread">
		<title>Thread</title>
		<para></para>
		<section id="kotlin.Handler">
			<title>Handler</title>
			<programlisting>
			<![CDATA[
     Handler(Looper.getMainLooper()).postDelayed({
             if (AndroidManager.bluetoothMicrophone()) {
                 aigcSpeech.speaking("蓝牙麦克风连接")
             }
             Log.d(TAG, "Bluetooth connected")
         }, 3000)			
			]]>
			</programlisting>
		</section>
		<section>
			<title></title>
			<programlisting>
			<![CDATA[
private val handler = object : Handler(Looper.myLooper()!!) {
    override fun handleMessage(msg: Message) {
        when (msg.what) {
            // 处理计时逻辑
            START -> {
                // 计算时间
                val hours = seconds / 3600
                val minutes = (seconds % 3600) / 60
                val secs = seconds % 60

                val time = if (hours == 0) {
                    String.format("%02d:%02d", minutes, secs)
                } else {
                    String.format("%02d:%02d:%02d", hours, minutes, secs)
                }

                // 更新UI
                lifecycleScope.launch {
                    phoneBinding?.textViewTimer?.text = time
                }
                seconds++

                // 继续发送下一次计时消息（形成循环）
                sendEmptyMessageDelayed(START, 1000)
            }
            // 处理停止指令
            STOP -> {
                // 移除所有未处理的消息，终止循环
                removeCallbacksAndMessages(null)
                seconds = 0 // 重置计时
            }
        }
    }
}

// 消息类型常量
private const val START = 1 // 计时 tick
private const val STOP = 2 // 停止指令
private var seconds = 0

// 启动计时器
private fun startTimer() {
    seconds = 0
    // 发送第一个计时消息，启动循环
    handler.sendEmptyMessage(START)
}

// 停止计时器（通过发送停止消息）
private fun stopTimer() {
    handler.sendEmptyMessage(STOP)
}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.timer">
		<title>定时与延迟执行</title>
		<section>
			<title>Timer</title>
			<programlisting>
			<![CDATA[
Timer().schedule(object : TimerTask() {
            override fun run() {
              //需要执行的任务
            }
        }, 1000)
			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
Timer().schedule(object : TimerTask() {
            override fun run() {
                //需要执行的任务
            }
        }, 0,2000)
		
			]]>
			</programlisting>
			<programlisting>
		<![CDATA[
	private var seconds = 0

    private val timer = Timer()
    private val timerTask: TimerTask = object : TimerTask() {
        override fun run() {
            val hours = seconds / 3600
            val minutes = (seconds % 3600) / 60
            val secs = seconds % 60

            var time = "00:00"

            if (hours == 0) {
                // 格式化时间为 HH:MM:SS
                time = String.format("%02d:%02d", minutes, secs)
            } else {
                // 格式化时间为 HH:MM:SS
                time = String.format("%02d:%02d:%02d", hours, minutes, secs)
            }

            binding.textViewTimer.text = time
            seconds++
        }
    }		
    
	override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        _binding = FragmentCallFullscreenBinding.inflate(inflater, container, false)

        timer.schedule(timerTask, 1000, 1000)

        return binding.root

    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
        timer.cancel()
    }    
		]]>
			</programlisting>
		</section>
		<section>
			<title></title>
			<programlisting>
			<![CDATA[
import java.util.Timer
import java.util.TimerTask
import java.util.Date

fun main() {
	Timer().schedule(object : TimerTask() {
		override fun run() {
			println("Hello World!")
		}
	}, Date(), 1000)
}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="MutableLiveData">
		<title>MutableLiveData</title>
		<para>定义 MutableLiveData</para>
		<programlisting>
		<![CDATA[
    companion object {
        val mutableLiveData = MutableLiveData<String>()
    }		
		]]>
		</programlisting>
		<para>监听 MutableLiveData</para>
		<programlisting>
		<![CDATA[
        mutableLiveData.observe(this) { text ->
            CoroutineScope(Dispatchers.Main).launch {
                binding.textViewSentence.text = text
            }
        }
		]]>
		</programlisting>
		<para>发送数据</para>
		<programlisting>
		<![CDATA[
	TestActivity.mutableLiveData.postValue(sentence.result)
		]]>
		</programlisting>
		<section>
			<title>MutableLiveData 使用 Pair 传 key, value 两个值</title>
			<programlisting>
			<![CDATA[
import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Observer
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class KeyValueLiveDataActivity : AppCompatActivity() {
    // 定义存储 Pair 的 LiveData（Pair<key类型, value类型>）
    private val keyValueLiveData = MutableLiveData<Pair<String, Int>>()

    private lateinit var infoTextView: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_key_value_live_data)
        infoTextView = findViewById(R.id.tv_info)

        // 观察键值对数据
        observeKeyValueData()

        // 模拟发送键值对
        simulateKeyValueUpdates()
    }

    private fun observeKeyValueData() {
        keyValueLiveData.observe(this) { pair ->
            // pair 是 Pair 对象，通过 first 取 key，second 取 value
            val key = pair.first
            val value = pair.second
            infoTextView.text = "收到键值对：\nkey=$key, value=$value"
        }
    }

    private fun simulateKeyValueUpdates() {
        CoroutineScope(Dispatchers.Main).launch {
            // 发送第一个键值对
            delay(1000)
            keyValueLiveData.value = Pair("北京", 25)  // key="北京", value=25

            // 发送第二个键值对
            delay(3000)
            keyValueLiveData.value = Pair("上海", 28)  // key="上海", value=28
        }
    }
}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>MutableLiveData 传自定义对象</title>
			<programlisting>
			<![CDATA[
import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Observer
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

// 自定义数据类，明确存储 "城市"（key）和 "温度"（value）
data class CityTemp(val city: String, val temp: Int)

class CustomClassLiveDataActivity : AppCompatActivity() {
    // 定义存储自定义数据类的 LiveData
    private val cityTempLiveData = MutableLiveData<CityTemp>()

    private lateinit var infoTextView: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_key_value_live_data)
        infoTextView = findViewById(R.id.tv_info)

        // 观察自定义数据类
        observeCityTemp()

        // 模拟发送数据
        simulateDataUpdates()
    }

    private fun observeCityTemp() {
        cityTempLiveData.observe(this) { cityTemp ->
            // 直接通过属性名访问 key 和 value，语义更清晰
            infoTextView.text = "城市：${cityTemp.city}\n温度：${cityTemp.temp}℃"
        }
    }

    private fun simulateDataUpdates() {
        CoroutineScope(Dispatchers.Main).launch {
            delay(1000)
            cityTempLiveData.value = CityTemp("北京", 25)  // 传递 key 和 value

            delay(3000)
            cityTempLiveData.value = CityTemp("上海", 28)
        }
    }
}
			]]>
			</programlisting>
		</section>
	</section>
	<section id="kotlin.Coroutine">
		<title>协程</title>
		<screen>
		<![CDATA[
GlobeScope：全局范围，不会自动结束执行。
MainScope：	主线程的作用域，全局范围
lifecycleScope：生命周期范围，用于activity等有生命周期的组件，在onDestroy的时候会自动结束。
viewModelScope：viewModel范围，用于ViewModel中，在ViewModel被回收时会自动结束		
		]]>
		</screen>
		<section id="GlobalScope">
			<title>GlobalScope</title>
			<section>
				<title>DefaultDispatcher</title>
				<para></para>
				<programlisting>
				<![CDATA[
GlobalScope.launch {
    while (true) {
        delay(1000)
        println("每秒执行一次")
    }
}
				]]>
				</programlisting>
				<para></para>
				<programlisting>
				<![CDATA[
	GlobalScope.launch {
        //GlobalScope开启协程：DefaultDispatcher-worker-1
        Log.d(TAG, "GlobalScope开启协程：" + Thread.currentThread().name)
		//子线程中此处不可以做UI操作
		withContext(Dispatchers.Main){
            Toast.makeText(this@MainActivity, "协程中切换线程", Toast.LENGTH_SHORT).show()
        }
    }				
				]]>
				</programlisting>
			</section>
			<section>
				<title>Dispatchers.Main</title>
				<programlisting>
				<![CDATA[
	GlobalScope.launch(Dispatchers.Main) {
        	//GlobalScope开启协程：main
            Log.d(TAG, "GlobalScope开启协程：" + Thread.currentThread().name)
            //可以做UI操作
            Toast.makeText(this@MainActivity, "GlobalScope开启协程", Toast.LENGTH_SHORT).show()
    }				
				]]>
				</programlisting>
			</section>
			<section>
				<title>Dispatchers.IO</title>
				<programlisting>
				<![CDATA[
GlobalScope.launch(Dispatchers.IO) {
    if (AndroidManager.Device.scanMicrophone() && !State.usbMicrophone.get()) {
        aigcSpeech.speaking("蓝牙麦克风连接")
    }
    Log.d(TAG, "Bluetooth connected")
}				
				]]>
				</programlisting>
			</section>
			<section>
				<title>手动开始协程</title>
				<programlisting>
				<![CDATA[
val job = GlobalScope.launch(start = CoroutineStart.LAZY) {

    Log.w("执行在协程中...")

    delay(1000L)

    Log.w("执行完毕...")
}


job.start()				
				]]>
				</programlisting>
			</section>
			<section>
				<title>取消协程</title>
				<programlisting>
				<![CDATA[
var job: Job = Job()

...

 GlobalScope.launch(job) {

   Log.w("执行协程...")

    delay(1000L)

    Log.w("执行完毕...")
}


override fun onDestroy() {
    job.cancel()
    super.onDestroy()
}				
				]]>
				</programlisting>
			</section>
			<section>
				<title>完成回调</title>
				<programlisting>
				<![CDATA[
		val exceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->
            Log.e(throwable.message ?: "Unkown Error")
        }

        val job = GlobalScope.launch(Dispatchers.Main + exceptionHandler) {
            Log.w("执行协程...")

            delay(1000L)

            val num = 9/0

            Log.w("协程执行完毕...")
        }

        job.invokeOnCompletion {
            Log.w("完成或异常的回调")
        }				
				]]>
				</programlisting>
			</section>
		</section>
		<section id="MainScope">
			<title>MainScope</title>
			<programlisting>
			<![CDATA[
	MainScope().launch {
            Log.w("执行协程")

            val result = OtherTask {
                async(Dispatchers.IO) {
                    "netkiller"
                }.await()
            }

            Log.w("程执行完毕 $result")
    }
			]]>
			</programlisting>
		</section>
		<section id="lifecycleScope">
			<title>lifecycleScope</title>
			<para>lifecycleScope只能在Activity、Fragment中使用，会绑定Activity和Fragment的生命周期。使用的时候需要导</para>
			<section>
				<title>launch</title>
				<para>lifecycleScope默认主线程，可以通过withContext来指定线程</para>
				<programlisting>
				<![CDATA[
lifecycleScope.launch {
    // do
    withContext(Dispatchers.IO) {
        // do
    }
}
 
// or
 
lifecycleScope.launch(Dispatchers.IO){
    // do
}
 
// or
 
lifecycleScope.launch {
    whenResumed {
        // do
    }
}
 
// or
 
lifecycleScope.launchWhenResumed {
    // do
}
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>launchWhenResumed</title>
				<programlisting>
				<![CDATA[
	lifecycleScope.launch{
        
        delay(1000L)
        
    }

    lifecycleScope.launchWhenResumed {
        
        delay(3000L)
        
    }
				
				]]>
				</programlisting>
			</section>
			<section>
				<title>协程中串行任务</title>
				<programlisting>
			<![CDATA[
	private fun serialExecution() {
        lifecycleScope.launch {
            val startTime = System.currentTimeMillis()
            val a = getDataA()
            val b = getDataB()
            val sum = a + b
            //D/MainActivity: serialExecution: sum = 3，耗时：3008
            Log.d(TAG, "serialExecution: sum = $sum，耗时：${System.currentTimeMillis() - startTime}")
        }
    }

    private suspend fun getDataA(): Int {
        delay(1000)
        return 1
    }

    private suspend fun getDataB(): Int {
        delay(2000)
        return 2
    }
			]]>
				</programlisting>
			</section>
			<section>
				<title>携程并行执行任务</title>
				<programlisting>
			<![CDATA[
private fun parallelExecution(){
        lifecycleScope.launch {
            val startTime = System.currentTimeMillis()
            val a = lifecycleScope.async { getDataA() }
            val b = lifecycleScope.async { getDataB() }
            val sum = a.await() + b.await()
            //D/MainActivity: parallelExecution: sum = 3，耗时：2009
            Log.d(TAG, "parallelExecution: sum = $sum，耗时：${System.currentTimeMillis() - startTime}")
        }
    }
    
    private suspend fun getDataA(): Int {
        delay(1000)
        return 1
    }

    private suspend fun getDataB(): Int {
        delay(2000)
        return 2
    }			
			]]>
				</programlisting>
			</section>
			<section>
				<title>取消携程</title>
				<programlisting>
			<![CDATA[
private var job: Job? = null
    
job = lifecycleScope.launch {
    ...
}
job?.cancel()
    			
			]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title></title>
			<programlisting>
			<![CDATA[
CoroutineScope(Dispatchers.IO).launch {
}			
			]]>
			</programlisting>
			
		</section>
		<section id="viewModelScope">
			<title>viewModelScope</title>
			<section id="viewModelScope.await()">
				<title>await()</title>
				<programlisting>
				<![CDATA[
fun getMessageByViewModel() {
    viewModelScope.launch {
        val deferred = async(Dispatchers.IO) { getMessage("netkiller") }
        mMessage.value = deferred.await()
    }
}				
				]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>协程上下文与继承关系</title>
			<para>协程嵌套时取消协程，GlobalScope与MainScope 并不会杯取消。</para>
			<programlisting>
			<![CDATA[
	val job = CoroutineScope(Dispatchers.Main).launch {

	    async(Dispatchers.IO) {
	        Log.w("协程async开始")
	        delay(5000)
	        Log.w("协程async执行完毕")
	    }
	
	    launch {
	        Log.w("协程launch开始")
	        delay(2000)
	        Log.w("协程launch执行完毕")
	    }
	
	    GlobalScope.launch {
	        Log.w("协程GlobalScope开始")
	        delay(3000)
	        Log.w("协程GlobalScope执行完毕")
	    }
	
	    MainScope().launch {
	        Log.w("协程MainScope开始")
	        delay(4000)
	        Log.w("协程MainScope执行完毕")
	    }
	
	}

    override fun onDestroy() {
        super.onDestroy()
        job.cancel()
    }			
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
	val job = CoroutineScope(Dispatchers.Main).launch {

        async(Dispatchers.IO) {
	        Log.w("协程async开始")
	        delay(5000)
	        Log.w("协程async执行完毕")
	    }
	
	    launch {
	        Log.w("协程launch开始")
	        delay(2000)
	        Log.w("协程launch执行完毕")
	    }
	
	    GlobalScope.launch {
	        Log.w("协程GlobalScope开始")
	        delay(3000)
	        Log.w("协程GlobalScope执行完毕")
	    }

        MainScope().launch(job!!) {
            Log.w("协程MainScope开始")
            delay(4000)
            Log.w("协程MainScope执行完毕")
        }

    }

    override fun onDestroy() {
        super.onDestroy()
        job.cancel()
    } 			
			]]>
			</programlisting>
		</section>
	</section>

</chapter>