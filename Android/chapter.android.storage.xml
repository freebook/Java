<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="storage" ?>
	<title>存储</title>
	
	<section>
		<title>获得存储目录</title>
		<section>
			<title>公共存储目录</title>
			<screen>
			<![CDATA[
Log.d(TAG, Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).toString());
Log.d(TAG, getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString());
            		
/storage/emulated/0/Pictures

/storage/emulated/0/Android/data/cn.netkiller.album.education/files/Pictures		
			]]>
			</screen>
			<para>公共存储目录不会因为APP卸载而删除</para>
			<programlisting>
		<![CDATA[
Environment.getExternalStorageDirectory():                     /storage/emulated/0
Environment.getExternalStoragePublicDirectory(""):             /storage/emulated/0
Environment.getExternalStoragePublicDirectory("test"):         /storage/emulated/0/test
Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)：  /storage/emulated/0/Pictures		
		]]>
			</programlisting>
		</section>
		<section>
		<title>内部存储</title>
		<programlisting>
		<![CDATA[
Environment.getDataDirectory():      /data
Context.getCacheDir():               /data/data/cn.netkiller.test/cache
Context.getFilesDir():               /data/data/cn.netkiller.test/files
Context.getFileStreamPath(""):       /data/data/cn.netkiller.test/files
Context.getFileStreamPath("test"):   /data/data/cn.netkiller.test/files/test
		
		]]>
		</programlisting>
	</section>
	<section>
		<title>扩展存储</title>
		<programlisting>
		<![CDATA[
Environment.getExternalStorageDirectory():               /storage/emulated/0
Context.getExternalCacheDir():                           /storage/emulated/0/Android/data/cn.netkiller.test/cache
Context.getExternalFilesDir(""):                         /storage/emulated/0/Android/data/cn.netkiller.test/files
Context.getExternalFilesDir("test"):                     /storage/emulated/0/Android/data/cn.netkiller.test/files/test
Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES):    /storage/emulated/0/Android/data/cn.netkiller.test/files/Pictures		
		]]>
		</programlisting>
	</section>
	<section>
		<title>文件夹类型</title>
		<screen>
		<![CDATA[
public static String DIRECTORY_MUSIC = "Music";
public static String DIRECTORY_ALARMS = "Alarms";
public static String DIRECTORY_NOTIFICATIONS = "Notifications";
public static String DIRECTORY_PICTURES = "Pictures";
public static String DIRECTORY_MOVIES = "Movies";
public static String DIRECTORY_DOWNLOADS = "Download";
public static String DIRECTORY_DCIM = "DCIM";
public static String DIRECTORY_DOCUMENTS = "Documents";
		]]>
		</screen>
	</section>
	</section>
	<section>
		<title>FileProvider 配置</title>
		<programlisting>
		<![CDATA[
        <provider
            android:authorities="cn.netkiller.student.fileprovider"
            android:name="androidx.core.content.FileProvider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/filepaths" />
        </provider>		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<paths>
<!--    <root-path path="/data/user/0/com.example.overlay.idea/cache/" name="files_root" />-->
<!--    <root-path path="." name="external_storage_root" />-->
<!--    <external-path path="." name="files_path" />-->

<!--    &lt;!&ndash; 物理路径为Context.getFilesDir() + /files/* &ndash;&gt;-->
<!--    <files-path path="files" name="files" />-->
<!--    &lt;!&ndash; 物理路径为Context.getCacheDir() + /files/* &ndash;&gt;-->
<!--    <cache-path path="files" name="cache" />-->
<!--    &lt;!&ndash; 物理路径为Environment.getExternalStorageDirectory() + /files/* &ndash;&gt;-->
    <external-path path="Download" name="external" />
<!--    &lt;!&ndash; 物理路径为Context.getExternalFilesDir(String) + /files/* &ndash;&gt;-->
<!--    <external-files-path path="files" name="externalfiles"/>-->
<!--    &lt;!&ndash; 物理路径为Context.getExternalCacheDir() + /files/* &ndash;&gt;-->
<!--    <external-cache-path  path="files" name="externalcache"/>-->
<!--    &lt;!&ndash; 物理路径为`Context.getExternalMediaDirs() + /files/*, 要求API21+ &ndash;&gt;-->
<!--    <external-media-path name="externalmedia" path="files" />-->

</paths>
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[

		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>

	</section>
	<section id="SharedPreferences">
		<title>SharedPreferences</title>

		<para>SharedPreferences是Android中的数据存储技术，常用来存储一些轻量级的数据。</para>
		<para>实际上SharedPreferences是 NoSQL 数据库，用于处理的key-value键值对存储，类似Windows
			系统的注册表，Linux 系统里的 Berkeley DB (bdb) 以及衍生出的 dba,mdb 这类 hash 表数据库。
		</para>
		<section id="SharedPreferences.Mode">
			<title>操作模式</title>
			<programlisting>
		<![CDATA[
Context.MODE_PRIVATE：为默认操作模式,代表该文件是私有数据,只能被应用本身访问,在该模式下,写入的内容会覆盖原文件的内容
Context.MODE_APPEND：模式会检查文件是否存在,存在就往文件追加内容,否则就创建新文件.
Context.MODE_WORLD_READABLE和Context.MODE_WORLD_WRITEABLE用来控制其他应用是否有权限读写该文件.
MODE_WORLD_READABLE：表示当前文件可以被其他应用读取.
MODE_WORLD_WRITEABLE：表示当前文件可以被其他应用写入.		
		]]>
			</programlisting>
		</section>
		<section id="SharedPreferences.Put">
			<title>保存数据</title>
			<programlisting>
		<![CDATA[
        Button buttonPut = (Button) findViewById(R.id.buttonPut);

        buttonPut.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                //实例化SharedPreferences对象
                SharedPreferences sharedPreferences = getSharedPreferences("test", Activity.MODE_PRIVATE);

                //实例化SharedPreferences.Editor对象
                SharedPreferences.Editor editor = sharedPreferences.edit();

                //用putString的方法保存数据
                editor.putString("name", "Neo");
                editor.putString("nickname", "netkiller");
                editor.putBoolean("sex", true);
                editor.putInt("age", 30);
                editor.putFloat("tall", 180.23f);
                Set<String> books = new HashSet<String>();
                books.add("Netkiller Linux 手札");
                books.add("Netkiller Java 手札");
                books.add("Netkiller Android 手札");
                editor.putStringSet("books", books);

                //提交当前数据
                editor.commit();

            }
        });

		]]>
			</programlisting>
		</section>
		<section id="SharedPreferences.Get">
			<title>读取数据</title>
			<programlisting>
		<![CDATA[
        Button buttonGet = (Button) findViewById(R.id.buttonGet);

        buttonGet.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                //实例化SharedPreferences对象
                SharedPreferences sharedPreferences = getSharedPreferences("test", Activity.MODE_PRIVATE);

                //使用getString方法获得value，
                String name = sharedPreferences.getString("name", "");
                String nickname = sharedPreferences.getString("nickname", "");
                boolean sex = sharedPreferences.getBoolean("sex", false);
                int age = sharedPreferences.getInt("age", 0);
                float tall = sharedPreferences.getFloat("tall", 0f);
                Set<String> books = sharedPreferences.getStringSet("books", null);

                Log.i("SharedPreferences", String.format("%s,%s,%s,%s,%s,%s", name, nickname, sex, age, tall, books.toString()));

            }
        });
		
		]]>
			</programlisting>
		</section>
		<section id="sharedPreferences.contains">
			<title>通过 key 查询数据是否存在</title>
			<programlisting>
		<![CDATA[
		SharedPreferences sharedPreferences = getSharedPreferences("test", Activity.MODE_PRIVATE);
		if (sharedPreferences.contains("nickname")) {
            Log.i("SharedPreferences", sharedPreferences.getString("nickname", ""));
        }else{
            Log.i("SharedPreferences", "key: nickname 不存在");
        }
		
		]]>
			</programlisting>
		</section>
		<section id="SharedPreferences.editor.remove">
			<title>删除数据</title>
			<programlisting>
		<![CDATA[
	SharedPreferences sharedPreferences = getSharedPreferences("test", Activity.MODE_PRIVATE);
	SharedPreferences.Editor editor = sharedPreferences.edit();

    editor.remove("nickname");
    editor.commit();
    
    Log.i("SharedPreferences", sharedPreferences.getAll().toString());
		]]>
			</programlisting>
		</section>
		<section id="SharedPreferences.editor.clear">
			<title>清空数据</title>
			<programlisting>
		<![CDATA[
	SharedPreferences sharedPreferences = getSharedPreferences("test", Activity.MODE_PRIVATE);
	SharedPreferences.Editor editor = sharedPreferences.edit();
    editor.clear();
    editor.commit();

    Log.i("SharedPreferences", sharedPreferences.getAll().toString());		
		]]>
			</programlisting>
		</section>
		<section id="SharedPreferences.object">
			<title>对象存储</title>
			<para>对象存储，需要将对象序列化，然后反序列化</para>
		</section>
		<section id="SharedPreferences.xml">
			<title>SharedPreferences 读取物理存储文件</title>
			<para>SharedPreferences 的数据存储再一个 xml 文件中，他的地址是：</para>
			<programlisting>
		<![CDATA[
//<package name>应替换成应用的包名, <name>
File xmlFile = new File("/data/data/<package name>/shared_prefs/<name>.xml");		
		]]>
			</programlisting>
			<para></para>
			<programlisting>
		<![CDATA[
<?xml version='1.0' encoding='utf-8' standalone='yes' ?>
<map>
   <string name="name">陈景峰</string>
   <string name="nickname">netkiller</string>
   <int name="age" value="30" />
</map>
		]]>
			</programlisting>
		</section>
	</section>
	<section id="android.sdcard">
		<title>SD Card</title>
		<section>
			<title>SD Card 状态</title>

			<programlisting>
			<![CDATA[
	if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                    TextView textView = (TextView) findViewById(R.id.textView);
                    textView.setText("SD 卡不存在，请插入 SD 卡！");
                }		
			]]>
			</programlisting>
		</section>
		<section>
			<title>Android 11 申请 sdcard 权限</title>
			<programlisting>
			<![CDATA[
	private static final int REQUEST_CODE = 1024;

    private void requestPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // 先判断有没有权限
            if (!Environment.isExternalStorageManager()) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                intent.setData(Uri.parse("package:" + getPackageName()));
                startActivityForResult(intent, REQUEST_CODE);
            }
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            // 先判断有没有权限
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
//                写入文件
            } else {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE);
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE) {
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
//                写入文件
            } else {
//                ToastUtils.show("存储权限获取失败");
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE && Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (Environment.isExternalStorageManager()) {
//                写入文件
            } else {
//                ToastUtils.show("存储权限获取失败");
            }
        }
    }			
			]]>
			</programlisting>
		</section>
	</section>
	&section.android.download.xml;
	<section>
		<title>android.os.FileUriExposedException</title>
		<para>下载 apk 文件，抛出 android.os.FileUriExposedException 异常</para>
		<programlisting>
		<![CDATA[
android.os.FileUriExposedException: file:///storage/emulated/0/Download/netkiller.apk exposed beyond app through Intent.getData()
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />
		]]>
		</programlisting>
		<para>此种方法不行</para>
		<programlisting>
		<![CDATA[
            intent.setDataAndType(Uri.fromFile(new File(filePath)), "application/vnd.android.package-archive");		
		]]>
		</programlisting>
		<para>改用 FileProvider.getUriForFile </para>
		<programlisting>
		<![CDATA[
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
//            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);

            Uri contentUri = FileProvider.getUriForFile(context, "cn.netkiller.student.fileprovider", new File(filePath));
            intent.setDataAndType(contentUri, "application/vnd.android.package-archive");
            intent.setPackage(context.getPackageName());
            context.startActivity(intent);
		]]>
		</programlisting>
	</section>
</chapter>
