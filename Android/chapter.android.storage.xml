<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="storage" ?>
	<title>存储</title>
	<section id="storage.directory">
		<title>获得存储目录</title>
		<section>
			<title>用户存储目录</title>
			<programlisting>
			<![CDATA[
Log.d(TAG, getContext().getFilesDir().toString());	
			]]>
			</programlisting>
			
		</section>
		<section id="storage.Assets">
			<title>Assets 目录</title>
			<para>遍历目录</para>
			<programlisting>
			<![CDATA[
        AssetManager assetManager = MainApplication.getContext().getApplicationContext().getAssets();
        try {
            String[] filelists = assetManager.list("");
            for (int i = 0; i < filelists.length; i++) {
                Log.d(TAG, filelists[i]);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        }			
			]]>
			</programlisting>
			<para>复制 Assets 到指定目录</para>
			<programlisting>
			<screen>
			<![CDATA[
	private synchronized boolean copyAssetsData() {

        AssetManager assetManager = MainApplication.getContext().getApplicationContext().getAssets();

        try {
            List<String> files = List.of(assetManager.list(""));

            for (String file : files) {
                Log.d(TAG, "coping " + file);

                String target = workspace.concat("/").concat(file);
                InputStream in = null;
                OutputStream out = null;

                try {

                    Log.i(TAG, "copying asset files from [" + file + "] to [" + target + "]");
                    in = assetManager.open(file);
                    (new File(target)).createNewFile();
                    out = new FileOutputStream(target);


                    byte[] data = new byte[1024];
                    int length = -1;

                    while ((length = in.read(data)) != -1) {
                        out.write(data, 0, length);
                    }

                    out.flush();

                } catch (Exception e) {
                    Log.e(TAG, "skip asset files from [" + file + "] to [" + target + "]", e);
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                            Log.e(TAG, "" + e);
                        }
                    }

                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            Log.e(TAG, "", e);
                        }
                    }

                }

            }


        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        Log.d(TAG, "Copy assets files");
        return true;
    }			
			]]>
			</screen>
			</programlisting>
		</section>
		<section>
			<title>公共存储目录</title>
			<screen>
			<![CDATA[
Log.d(TAG, Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).toString());
Log.d(TAG, getExternalFilesDir(Environment.DIRECTORY_PICTURES).toString());
            		
/storage/emulated/0/Pictures
/storage/emulated/0/Android/data/cn.netkiller.album.education/files/Pictures		
			]]>
			</screen>
			<para>公共存储目录不会因为APP卸载而删除</para>
			<programlisting>
		<![CDATA[
Environment.getExternalStorageDirectory():                     /storage/emulated/0
Environment.getExternalStoragePublicDirectory(""):             /storage/emulated/0
Environment.getExternalStoragePublicDirectory("test"):         /storage/emulated/0/test
Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)：  /storage/emulated/0/Pictures
		]]>
			</programlisting>
		</section>
		<section>
			<title>内部存储</title>
			<programlisting>
		<![CDATA[
Environment.getDataDirectory():      /data
Context.getCacheDir():               /data/data/cn.netkiller.test/cache
Context.getFilesDir():               /data/data/cn.netkiller.test/files
Context.getFileStreamPath(""):       /data/data/cn.netkiller.test/files
Context.getFileStreamPath("test"):   /data/data/cn.netkiller.test/files/test
		
		]]>
			</programlisting>
		</section>
		<section>
			<title>扩展存储</title>
			<programlisting>
		<![CDATA[
Environment.getExternalStorageDirectory():               /storage/emulated/0
Context.getExternalCacheDir():                           /storage/emulated/0/Android/data/cn.netkiller.test/cache
Context.getExternalFilesDir(""):                         /storage/emulated/0/Android/data/cn.netkiller.test/files
Context.getExternalFilesDir(null):                         /storage/emulated/0/Android/data/cn.netkiller.test/files
Context.getExternalFilesDir("test"):                     /storage/emulated/0/Android/data/cn.netkiller.test/files/test
Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES):    /storage/emulated/0/Android/data/cn.netkiller.test/files/Pictures		
		]]>
			</programlisting>
		</section>
		<section>
			<title>文件夹类型</title>
			<screen>
		<![CDATA[
public static String DIRECTORY_MUSIC = "Music";
public static String DIRECTORY_ALARMS = "Alarms";
public static String DIRECTORY_NOTIFICATIONS = "Notifications";
public static String DIRECTORY_PICTURES = "Pictures";
public static String DIRECTORY_MOVIES = "Movies";
public static String DIRECTORY_DOWNLOADS = "Download";
public static String DIRECTORY_DCIM = "DCIM";
public static String DIRECTORY_DOCUMENTS = "Documents";
		]]>
			</screen>
		</section>
	</section>
	<section id="FileProvider">
		<title>FileProvider 配置</title>
		<programlisting>
		<![CDATA[
        <provider
            android:authorities="cn.netkiller.student.fileprovider"
            android:name="androidx.core.content.FileProvider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/filepaths" />
        </provider>		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<paths>
<!--    <root-path path="/data/user/0/com.example.overlay.idea/cache/" name="files_root" />-->
<!--    <root-path path="." name="external_storage_root" />-->
<!--    <external-path path="." name="files_path" />-->

<!--    &lt;!&ndash; 物理路径为Context.getFilesDir() + /files/* &ndash;&gt;-->
<!--    <files-path path="files" name="files" />-->
<!--    &lt;!&ndash; 物理路径为Context.getCacheDir() + /files/* &ndash;&gt;-->
<!--    <cache-path path="files" name="cache" />-->
<!--    &lt;!&ndash; 物理路径为Environment.getExternalStorageDirectory() + /files/* &ndash;&gt;-->
    <external-path path="Download" name="external" />
<!--    &lt;!&ndash; 物理路径为Context.getExternalFilesDir(String) + /files/* &ndash;&gt;-->
<!--    <external-files-path path="files" name="externalfiles"/>-->
<!--    &lt;!&ndash; 物理路径为Context.getExternalCacheDir() + /files/* &ndash;&gt;-->
<!--    <external-cache-path  path="files" name="externalcache"/>-->
<!--    &lt;!&ndash; 物理路径为`Context.getExternalMediaDirs() + /files/*, 要求API21+ &ndash;&gt;-->
<!--    <external-media-path name="externalmedia" path="files" />-->

</paths>
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
		
		]]>
		</programlisting>

	</section>
	
	<section id="android.sdcard">
		<title>SD Card</title>
		<section>
			<title>SD Card 状态</title>

			<programlisting>
			<![CDATA[
	if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                    TextView textView = (TextView) findViewById(R.id.textView);
                    textView.setText("SD 卡不存在，请插入 SD 卡！");
                }		
			]]>
			</programlisting>
		</section>
		<section>
			<title>Android 11 申请 sdcard 权限</title>
			<programlisting>
			<![CDATA[
	private static final int REQUEST_CODE = 1024;

    private void requestPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // 先判断有没有权限
            if (!Environment.isExternalStorageManager()) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                intent.setData(Uri.parse("package:" + getPackageName()));
                startActivityForResult(intent, REQUEST_CODE);
            }
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            // 先判断有没有权限
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
//                写入文件
            } else {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE);
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE) {
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&
                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
//                写入文件
            } else {
//                ToastUtils.show("存储权限获取失败");
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE && Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (Environment.isExternalStorageManager()) {
//                写入文件
            } else {
//                ToastUtils.show("存储权限获取失败");
            }
        }
    }			
			]]>
			</programlisting>
		</section>
	</section>
	&section.android.download.xml;
	<section>
		<title>android.os.FileUriExposedException</title>
		<para>下载 apk 文件，抛出 android.os.FileUriExposedException 异常</para>
		<programlisting>
		<![CDATA[
android.os.FileUriExposedException: file:///storage/emulated/0/Download/netkiller.apk exposed beyond app through Intent.getData()
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />
		]]>
		</programlisting>
		<para>此种方法不行</para>
		<programlisting>
		<![CDATA[
            intent.setDataAndType(Uri.fromFile(new File(filePath)), "application/vnd.android.package-archive");		
		]]>
		</programlisting>
		<para>改用 FileProvider.getUriForFile </para>
		<programlisting>
		<![CDATA[
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
//            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);

            Uri contentUri = FileProvider.getUriForFile(context, "cn.netkiller.student.fileprovider", new File(filePath));
            intent.setDataAndType(contentUri, "application/vnd.android.package-archive");
            intent.setPackage(context.getPackageName());
            context.startActivity(intent);
		]]>
		</programlisting>
	</section>
	<section id="storage.download">
		<title>下载工具类</title>
		<para></para>
		<programlisting>
		<![CDATA[
package cn.netkiller.utils;

import android.os.Environment;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class Download {
    private static final String TAG = Download.class.getSimpleName();

    public Download() {

    }

    public void downloadToDirectory(final String url, final String directory, final OnDownloadListener listener) throws IOException {
        String filename = url.substring(url.lastIndexOf("/") + 1);
        String savePath = isExistDir(directory);
        File file = new File(savePath, filename);
        download(url, file, listener);
    }

    public void downloadToFile(final String url, final String filename, final OnDownloadListener listener) throws IOException {
        File file = new File(Environment.getExternalStorageDirectory() + "/Download", filename);
        Log.d("Download", "--- downloadToFile:"+file.getAbsolutePath());
        download(url, file, listener);
    }

    public void download(final String url, File file, final OnDownloadListener listener) {

        OkHttpClient okHttpClient = new OkHttpClient();
        Request request = new Request.Builder().url(url).build();
        okHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                listener.onFailure();
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                InputStream inputStream = null;
                byte[] buf = new byte[2048];
                int len = 0;
                FileOutputStream fileOutputStream = null;

                try {
                    inputStream = response.body().byteStream();
                    long total = response.body().contentLength();

                    Log.d(TAG, url + " => " + file.getAbsolutePath());

                    fileOutputStream = new FileOutputStream(file);
                    long sum = 0;
                    while ((len = inputStream.read(buf)) != -1) {
                        fileOutputStream.write(buf, 0, len);
                        sum += len;
                        int progress = (int) (sum * 1.0f / total * 100);
                        listener.onDownloading(progress);
                    }
                    fileOutputStream.flush();
                    listener.onSuccess(file.getAbsolutePath());
                } catch (Exception e) {
                    listener.onFailure();
                } finally {
                    try {
                        if (inputStream != null)
                            inputStream.close();
                    } catch (IOException e) {
                    }
                    try {
                        if (fileOutputStream != null)
                            fileOutputStream.close();
                    } catch (IOException e) {
                    }
                }
            }
        });
    }

    private String isExistDir(String saveDir) throws IOException {
        File downloadFile = new File(Environment.getExternalStorageDirectory(), saveDir);
        if (!downloadFile.mkdirs()) {
            downloadFile.createNewFile();
        }
        String savePath = downloadFile.getAbsolutePath();
        return savePath;
    }

    public interface OnDownloadListener {
        /**
         * 下载成功
         */
        void onSuccess(String filename);


        /**
         * @param progress 下载进度
         */
        void onDownloading(int progress);

        /**
         * 下载失败
         */
        void onFailure();


    }

}		
		]]>
		</programlisting>
	</section>
</chapter>