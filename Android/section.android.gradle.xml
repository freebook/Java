<?xml version="1.0" encoding="UTF-8"?>
<section id="android.gradle.kt">
	<title>Gradle</title>
	<section id="gradle.exclude">
		<title>排除重复包引用</title>
		<screen>
		<![CDATA[
dependencies {
    implementation("commons-beanutils:commons-beanutils:1.9.4") {
        exclude(group = "commons-collections", module = "commons-collections")
    }
    implementation("com.opencsv:opencsv:4.6") {
        exclude(group = "commons-collections", module = "commons-collections")
        exclude(group = "org.apache.commons", module = "commons-collections4") // Watch out for other transitive dependency creep
    }
}
		]]>
		</screen>
	</section>
	<section id="gradle.dependencies">
		<title>引用其他模块依赖</title>
		<para></para>
		<screen>
		<![CDATA[
	implementation(project(":utils"))
    implementation(project(":ai"))
		]]>
		</screen>
		<screen>
		<![CDATA[
dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.recyclerview)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.lifecycle.livedata.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)
   
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)

    implementation("com.pjdroid:pjdroid:2.2.4")

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp-sse
    implementation(libs.okhttp)
    implementation(libs.okhttp.sse)
    implementation(libs.gson)
    implementation("com.belerweb:pinyin4j:2.5.1")
    implementation("com.github.bumptech.glide:glide:4.16.0")

    implementation("com.squareup.retrofit2:retrofit:3.0.0")
    implementation("com.squareup.retrofit2:converter-gson:3.0.0")
    implementation("com.squareup.retrofit2:adapter-rxjava2:3.0.0")

//    implementation("javax.xml.bind:jaxb-api:2.3.1")
//    implementation("com.auth0:java-jwt:4.5.0")

	implementation(project(":utils"))
    implementation(project(":ai"))

}		
		]]>
		</screen>
	</section>
	<section id="gradle.jar">
		<title>Jar</title>
		<programlisting>
		<![CDATA[
plugins {
    id("java-library")
    alias(libs.plugins.jetbrains.kotlin.jvm)
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
kotlin {
    compilerOptions {
        jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
    }
}
tasks.jar {
    var version = "1.0.0"
    archiveFileName.set("netkiller-utils-${version}.jar")
}
//tasks.withType<Jar> {
//    var version = "1.0.0"
//    archiveFileName.set("netkiller-utils-${version}.jar")
//}		
		]]>
		</programlisting>		
	</section>
	<section id="gradle.aar">
		<title>Android Library 项目 .aar 文件上传至 GitHub Package 仓库</title>
		<programlisting>
		<![CDATA[
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    id("maven-publish")
}

android {
    namespace = "cn.netkiller.ai"
    compileSdk = 35

    defaultConfig {
        minSdk = 31

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}

publishing {
    publications {
        create<MavenPublication>("maven") {
//            groupId = project.group.toString()
//            artifactId = project.name
//            version = project.version as String

//            from(components["release"])
            //            from(components["java"])
            groupId = "cn.netkiller"
            artifactId = "ai"
            version = "1.0.0"

            artifact("build/outputs/aar/ai-release.aar")

            // 生成 POM 文件
            pom {
                name.set("netkiller 工具包")
                description.set("内部集合了常用Java工具")
                url.set("https://www.netkiller.cn/java")

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }

                developers {
                    developer {
                        id.set("netkiller")
                        name.set("Neo Chen")
                        email.set("netkiller@msn.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/netkiller/Conference.git")
                    developerConnection.set("scm:git:ssh://github.com/netkiller/Conference.git")
                    url.set("https://github.com/netkiller/Conference")
                }
            }
        }
    }

    repositories {
        // 发布到本地 Maven 仓库（调试用）
//        maven {
//            url = uri("${System.getProperty("user.home")}/.m2/repository")
//        }

        // 可选：发布到远程仓库（例如 Nexus 或 Artifactory）

        maven {
            url = uri("https://maven.pkg.github.com/netkiller/Conference")
//            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
//                username = System.getenv("MAVEN_USERNAME")
//                password = System.getenv("MAVEN_PASSWORD")
                username = "netkiller"
                password = "ghp_WYSx64NuUW5fgrTsllB4vJAobjRu2In4sg8s"
            }
        }

    }
}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>新建 module 编译出现 Please ensure dynamic features are configured in the build file.</title>
		<screen>
		<![CDATA[
This application (cn.netkiller.sip) is not configured to use dynamic features.
Please ensure dynamic features are configured in the build file.
Refer to https://developer.android.com/guide/playcore/feature-delivery#base_feature_relationship		
		]]>
		</screen>
		<para>解决方案，讲 alias 替换成 id</para>
		<screen>
		<![CDATA[
plugins {
//    alias(libs.plugins.android.library)
//    alias(libs.plugins.jetbrains.kotlin.android)
    id("com.android.library")
    id("org.jetbrains.kotlin.android")
}
		]]>
		</screen>
	</section>
</section>