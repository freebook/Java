<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="mvc" ?>
	<title>Spring MVC</title>
	<para>Spring MVC 有两种启动模式，一种是传统Tomcat，需要配置很多XML文件。另一种方式是采用 Spring Boot 需要些一个Java程序，不需要写xml文件，这个程序会帮助你处理启动所需的一切，并且采用嵌入方式启动 Tomcat 或者 Jetty.</para>
	<para>两种方式各有优缺点，Tomcat 方式配置繁琐，但是可以使用虚拟机，同一个IP地址使用不同域名访问，出现不同的内容。而Spring Boot一个应用一个容器一个端口，比不得不通过端口来区分应用。</para>
	<section id="spring.maven">
		<title>Maven</title>
		<screen>
		<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>

		]]>
		</screen>
	</section>
	&section.boot.quickstart.xml;
	<section id="spring.xml">
		<title>Spring MVC configuration</title>
		<programlisting>
		<![CDATA[
  <!-- **************************************************************** -->
  <!--  RESOURCE FOLDERS CONFIGURATION                                  -->
  <!--  Dispatcher configuration for serving static resources           -->
  <!-- **************************************************************** -->
  <mvc:resources location="/images/" mapping="/images/**" />
  <mvc:resources location="/css/" mapping="/css/**" />
		]]>
		</programlisting>
	</section>
	<section id="tomcat">
		<title>Tomcat</title>
		<para>web.xml</para>
		<screen>
		<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>m.cf88.com</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<servlet>
        <servlet-name>netkiller</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>netkiller</servlet-name>
        <url-pattern>/welcome.jsp</url-pattern>
        <url-pattern>/welcome.html</url-pattern>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping> 

</web-app>
		]]>
		</screen>
		<para>netkiller-servlet.xml</para>
		<screen>
		<![CDATA[
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="cn.netkiller.controller" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

</beans>		
		]]>
		</screen>
	</section>

	<section id="thymeleaf">
		<title>Thymeleaf</title>
		<para>http://thymeleaf.org/</para>
		<section>
			<title>Maven pom.xml</title>
			<programlisting>
			<![CDATA[
			<dependency>  
	            <groupId>org.springframework.boot</groupId>  
	            <artifactId>spring-boot-starter-thymeleaf</artifactId>  
	        </dependency>  		
			]]>
			</programlisting>
		</section>
		<section>
			<title>Spring 配置</title>
			<programlisting>
			<![CDATA[
	<!-- **************************************************************** -->
	<!-- THYMELEAF-SPECIFIC ARTIFACTS -->
	<!-- TemplateResolver <- TemplateEngine <- ViewResolver -->
	<!-- **************************************************************** -->

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/templates/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
	</bean>

	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
	</bean>	
			]]>
			</programlisting>
		</section>
		
		<section>
			<title>controller</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/")
public class HelloController {

	@RequestMapping(value = "/{name}", method = RequestMethod.GET)
	public String getMovie(@PathVariable String name, ModelMap model) {
		model.addAttribute("name", name);
		return "hello";
	}

}			
			]]>
			</programlisting>
		</section>
		
		<section>
			<title>HTML5 Template</title>
			<programlisting>
			<![CDATA[
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<title>Spring MVC + Thymeleaf Example</title>
</head>
<body>
	Hello, <span th:text="${name}" />!
</body>
</html>
			]]>
			</programlisting>
		</section>

	</section>

	<section id="mybatis">
		<title>集成 Mybatis</title>
		<section>
			<title>pom.xml</title>
			<programlisting>
			<![CDATA[
 		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.3</version>
		</dependency>
   			]]>
			</programlisting>
		</section>
		<section>
			<title>properties</title>
			<programlisting>
			<![CDATA[
 	<bean id="configuracion"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resources/development.properties" />
	</bean>
   			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
jdbc.url=jdbc:oracle:thin:@192.168.4.9:1521:orcl
#jdbc.url=jdbc:mysql://127.0.0.1:3306/mybatis
jdbc.username=test
jdbc.password=123456
   			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>			
			]]>
			</programlisting>
		</section>
		<section>
			<title>dataSource</title>
			<screen>
			<![CDATA[
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
			]]>
			</screen>
		</section>
		<section>
			<title>SqlSessionFactory</title>
			<para>创建SqlSessionFactory，需指定数据源，property名称必须为dataSource</para>
			<programlisting>
			<![CDATA[
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
			]]>
			</programlisting>
		</section>
		<section>
			<title>Mapper 扫描</title>
			<para></para>
			<programlisting>
			<![CDATA[
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.netkiller.mappers" />
		<property name="annotationClass" value="cn.netkiller.mappers.annotation.MybatisMapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
			]]>
			</programlisting>
		</section>
		
		
		<section>
			<title>Mapper 单一class映射</title>
			<para>创建数据映射器Mapper，属性mapperInterface的value必须为接口类</para>
			<programlisting>
			<![CDATA[
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
		<property name="mapperInterface" value="com.mybatis.demo.UserMapper" />  
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />  
	</bean>
			]]>
			</programlisting>
		</section>
		<section>
			<title>Service</title>
			<para></para>
			<programlisting>
			<![CDATA[
	<bean id="userService" class="cn.netkiller.service.UserService">
	</bean>
			]]>
			</programlisting>
		</section>
		<section>
			<title>测试实例</title>
			<example>
				<title>MyBatis</title>
				<para>建立映射</para>
				<programlisting>
				<![CDATA[
package cn.netkiller.mapper;

import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Param;

import cn.netkiller.model.User;

public interface UserMapper {
	@Select("SELECT * FROM `user` WHERE id = #{id}")
	public User findById(@Param("id") int id); 
}
				]]>
				</programlisting>
				<para>建立模型</para>
				<programlisting>
				<![CDATA[
package cn.netkiller.model;

public class User {
	private String id;
	private String name;
	private int age;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}

				]]>
				</programlisting>
				<para>建立 service</para>
				<programlisting>
				<![CDATA[
package cn.netkiller.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.netkiller.mapper.UserMapper;
import cn.netkiller.model.User;

@Service
public class UserService {
	@Autowired
	private UserMapper userMapper;

	public UserMapper getUserMapper() {
		return userMapper;
	}

	public void setUserMapper(UserMapper userMapper) {
		this.userMapper = userMapper;
	}

	public User findById(int id) {
        return userMapper.findById(id);
    }
}
				
				]]>
				</programlisting>
				<para>建立控制器</para>
				<programlisting>
				<![CDATA[
package cn.netkiller.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import cn.netkiller.mapper.UserMapper;
import cn.netkiller.model.User;
import cn.netkiller.service.UserService;

@Controller
public class Index {

	@Autowired
	private UserMapper userMapper;
	
	@Autowired
    private UserService userService;
	
	
	@RequestMapping("/index")
	// @ResponseBody
	public ModelAndView index() {

		String message = "Hello";
		return new ModelAndView("index/index", "variable", message);
	}

	@RequestMapping("/user")
	public ModelAndView user() {
		
		User user = userService.findById(2);
		String message = user.toString();
		return new ModelAndView("index/index", "variable", message);
	}
	
	@RequestMapping("/member")
	public ModelAndView member() {
		User user = userMapper.findById(2);
		String message = user.toString();
		return new ModelAndView("index/index", "variable", message);
	}
}				
				]]>
				</programlisting>
			</example>
		</section>
	</section>
	<section id="properties">
		<title>Properties</title>
		<section>
			<title>载入*.properties文件</title>
			<programlisting>
			<![CDATA[
	@RequestMapping("/config")
	@ResponseBody
	public void config() {
		try {
			Properties properties = PropertiesLoaderUtils.loadProperties(new ClassPathResource("/config.properties"));
			for(String key : properties.stringPropertyNames()) {
				  String value = properties.getProperty(key);
				  System.out.println(key + " => " + value);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
			]]>
			</programlisting>
		</section>
		<section>
			<title>@Value 注解</title>
			<para>application.properties</para>
			<screen>
server.name=Linux
server.host=192.168.0.1,172.16.0.1
			</screen>
			<screen>
			<![CDATA[
	@Value("${server.name}")
	private String name;
	
	@Value("${server.name:Windows}") 如果application.properties没有配置server.name那么默认值将是 Windows
	private String name;
	
	@Value("${app.name:@null}") // app.name = null
 	private String name;
 	
 	@Value("#{'${server.host}'.split(',')}") 
 	private List<String> host;
 			]]>
			</screen>
		</section>
		<section>
			<title>@PropertySource 注解</title>
			<programlisting>
			<![CDATA[
@PropertySource("classpath:/config.properties}")	

忽略FileNotFoundException，当配置文件不存在系统抛出FileNotFoundException并终止程序运行，ignoreResourceNotFound=true 会跳过使程序能够正常运行
@PropertySource(value="classpath:config.properties", ignoreResourceNotFound=true)		



			]]>
			</programlisting>
			<para>载入多个配置文件</para>
			<programlisting>
			<![CDATA[
@PropertySources({  
        @PropertySource("classpath:config.properties"),  
        @PropertySource("classpath:db.properties")  
})
			]]>
			</programlisting>
			<para>test.properties</para>
			<programlisting>
name=Neo
age=30
			</programlisting>
			<programlisting>
			<![CDATA[
package cn.netkiller.web;

import java.util.Date;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@PropertySource("classpath:test.properties")
public class TestController {
	
	@Autowired
	Environment environment;
	
	@Value("${age}")
	private String age;

	public TestController() {
		// TODO Auto-generated constructor stub
	}
	
	// 环境变量方式
	@RequestMapping("/test/env")
	@ResponseBody
	public String env() {
		String message = environment.getProperty("name");
		return message;
	}
	
	@RequestMapping("/test/age")
	@ResponseBody
	public String age() {
		String message = age;
		return message;
	}

}
			]]>
			</programlisting>
		</section>
	</section>
	
	&section.mvc.controller.xml;
	&section.mvc.rest.xml;
	&section.mvc.view.xml;
	
	&section.mvc.faq.xml;
	
</chapter>