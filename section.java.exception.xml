<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="throw" ?>
	<title>异常处理</title>
	<section>
		<title>抛出异常</title>
		<programlisting>
		<![CDATA[
throw new NullPointerException();
throw new IOException();
throw new FileNotFoundException("文件不存在");
throw new ArrayIndexOutOfBoundsException("数字范围越界");

		]]>
		</programlisting>
	</section>
	<section id="try-with-resources">
		<title>try-with-resources</title>
		<para>打开的系统资源，比如流、文件或者 Socket 连接等，都需要被开发者手动关闭资源，否则将会造成资源占用和泄露。</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.demo;
		
import java.io.*;

class ExceptionTest {
    public static void main(String[] args) {
        BufferedReader br = null;
        String line;

        try {
            System.out.println("Entering try block");
            br = new BufferedReader(new FileReader("test.txt"));
            while ((line = br.readLine()) != null) {
            System.out.println("Line =>"+line);
            }
        } catch (IOException e) {
            System.out.println("IOException in try block =>" + e.getMessage());
        } finally {
            System.out.println("Entering finally block");
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException e) {
                System.out.println("IOException in finally block =>"+e.getMessage());
            }
        }
    }
}
		]]>
		</programlisting>
		<para>try-with-resources 语句关闭所有实现 AutoCloseable 接口的资源。</para>
		<programlisting>
		<![CDATA[
package cn.netkiller.demo;

import java.io.*;

public class ExceptionTest {

    public static void main(String[] args) {
    	String line;
        try(BufferedReader br = new BufferedReader(new FileReader("test.txt"))) {
            while ((line = br.readLine()) != null) {
                System.out.println("Line =>"+line);
            }
        } catch (IOException e) {
            System.out.println("IOException in try block =>" + e.getMessage());
        }
    }
}
		]]>
		</programlisting>
		<para>无需再使用 close() 关闭资源 try 执行完毕后会自动释放资源。</para>
	</section>
	<section id="SneakyThrows">
		<title>SneakyThrows</title>
		<section>
			<title>处理所有异常 Exception</title>

			<programlisting>
		<![CDATA[
    public static void exceptionTest() {
        File file = new File("/tmp/test.txt");
        try {
            FileReader fileReader = new FileReader(file);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static void exceptionTest() throws Exception {
        File file = new File("/tmp/test.txt");
        FileReader fileReader = new FileReader(file);
    }
		]]>
			</programlisting>
			<para>使用 @SneakyThrows 注解，替代写法</para>
			<programlisting>
		<![CDATA[
    @SneakyThrows
    public static void exceptionTest(String pathname) {
        File file = new File(pathname);
        FileReader fileReader = new FileReader(file);
    }		
		]]>
			</programlisting>
		</section>
		<section>
			<title>处理特定异常</title>
			<programlisting>
			<![CDATA[
	public static void exceptionTest() {
        File file = new File("/tmp/test.txt");
        try {
            FileReader fileReader = new FileReader(file);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public static void exceptionTest() throws FileNotFoundException {
        File file = new File("/tmp/test.txt");
        FileReader fileReader = new FileReader(file);
    }
			]]>
			</programlisting>
			<para>使用 @SneakyThrows 注解，替代写法</para>
			<programlisting>
			<![CDATA[
    @SneakyThrows(FileNotFoundException.class)
    public static void exceptionTest(File file) {
        FileReader fileReader = new FileReader(file);
    }
			]]>
			</programlisting>
		</section>
		<section>
			<title>抛出异常</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.test;

import lombok.SneakyThrows;

public class Test {
    @SneakyThrows
    public static void throwExceptionTest(String message) {
        throw new IllegalStateException(message);
    }


    public static void main(String[] args) {
        try {
            throwExceptionTest("Test");
        } catch (Exception e) {
            System.out.println(e);
        }

    }
}			
			]]>
			</programlisting>
		</section>
	</section>
</chapter>